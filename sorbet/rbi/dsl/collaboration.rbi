# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Collaboration`.
# Please instead update this file by running `bin/tapioca dsl Collaboration`.

class Collaboration
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Collaboration).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Collaboration]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Collaboration)) }
    def fifth; end

    sig { returns(::Collaboration) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Collaboration)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Collaboration) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Collaboration) }
    def first!; end

    sig { returns(T.nilable(::Collaboration)) }
    def forty_two; end

    sig { returns(::Collaboration) }
    def forty_two!; end

    sig { returns(T.nilable(::Collaboration)) }
    def fourth; end

    sig { returns(::Collaboration) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Collaboration) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Collaboration).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Collaboration).void)
      ).returns(::Collaboration)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Collaboration).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Collaboration).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Collaboration)) }
    def second; end

    sig { returns(::Collaboration) }
    def second!; end

    sig { returns(T.nilable(::Collaboration)) }
    def second_to_last; end

    sig { returns(::Collaboration) }
    def second_to_last!; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Collaboration) }
    def take!; end

    sig { returns(T.nilable(::Collaboration)) }
    def third; end

    sig { returns(::Collaboration) }
    def third!; end

    sig { returns(T.nilable(::Collaboration)) }
    def third_to_last; end

    sig { returns(::Collaboration) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def build_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def build_scraper(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def create_scraper(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def create_scraper!(*args, &blk); end

    sig { returns(T.nilable(::Owner)) }
    def owner; end

    sig { params(value: T.nilable(::Owner)).void }
    def owner=(value); end

    sig { returns(T.nilable(::Owner)) }
    def reload_owner; end

    sig { returns(T.nilable(::Scraper)) }
    def reload_scraper; end

    sig { returns(T.nilable(::Scraper)) }
    def scraper; end

    sig { params(value: T.nilable(::Scraper)).void }
    def scraper=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def admin; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def admin=(value); end

    sig { returns(T::Boolean) }
    def admin?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_before_last_save; end

    sig { returns(T.untyped) }
    def admin_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def admin_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_previous_change; end

    sig { returns(T::Boolean) }
    def admin_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_was; end

    sig { void }
    def admin_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T::Boolean) }
    def maintain; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def maintain=(value); end

    sig { returns(T::Boolean) }
    def maintain?; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintain_before_last_save; end

    sig { returns(T.untyped) }
    def maintain_before_type_cast; end

    sig { returns(T::Boolean) }
    def maintain_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintain_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintain_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def maintain_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintain_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def maintain_previous_change; end

    sig { returns(T::Boolean) }
    def maintain_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintain_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def maintain_was; end

    sig { void }
    def maintain_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def owner_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { returns(T::Boolean) }
    def owner_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T::Boolean) }
    def pull; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def pull=(value); end

    sig { returns(T::Boolean) }
    def pull?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pull_before_last_save; end

    sig { returns(T.untyped) }
    def pull_before_type_cast; end

    sig { returns(T::Boolean) }
    def pull_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pull_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pull_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def pull_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pull_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def pull_previous_change; end

    sig { returns(T::Boolean) }
    def pull_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def pull_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def pull_was; end

    sig { void }
    def pull_will_change!; end

    sig { returns(T::Boolean) }
    def push; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def push=(value); end

    sig { returns(T::Boolean) }
    def push?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_before_last_save; end

    sig { returns(T.untyped) }
    def push_before_type_cast; end

    sig { returns(T::Boolean) }
    def push_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def push_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def push_previous_change; end

    sig { returns(T::Boolean) }
    def push_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def push_was; end

    sig { void }
    def push_will_change!; end

    sig { void }
    def restore_admin!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_maintain!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_pull!; end

    sig { void }
    def restore_push!; end

    sig { void }
    def restore_scraper_id!; end

    sig { void }
    def restore_triage!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_admin; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_maintain; end

    sig { returns(T::Boolean) }
    def saved_change_to_maintain?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_pull; end

    sig { returns(T::Boolean) }
    def saved_change_to_pull?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_push; end

    sig { returns(T::Boolean) }
    def saved_change_to_push?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_scraper_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_scraper_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_triage; end

    sig { returns(T::Boolean) }
    def saved_change_to_triage?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::Integer) }
    def scraper_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def scraper_id=(value); end

    sig { returns(T::Boolean) }
    def scraper_id?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_before_last_save; end

    sig { returns(T.untyped) }
    def scraper_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def scraper_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def scraper_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def scraper_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scraper_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def scraper_id_previous_change; end

    sig { returns(T::Boolean) }
    def scraper_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_was; end

    sig { void }
    def scraper_id_will_change!; end

    sig { returns(T::Boolean) }
    def triage; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def triage=(value); end

    sig { returns(T::Boolean) }
    def triage?; end

    sig { returns(T.nilable(T::Boolean)) }
    def triage_before_last_save; end

    sig { returns(T.untyped) }
    def triage_before_type_cast; end

    sig { returns(T::Boolean) }
    def triage_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def triage_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def triage_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def triage_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def triage_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def triage_previous_change; end

    sig { returns(T::Boolean) }
    def triage_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def triage_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def triage_was; end

    sig { void }
    def triage_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maintain?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pull?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_push?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scraper_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_triage?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Collaboration } }

    sig { returns(T::Array[::Collaboration]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Collaboration } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Collaboration } }

    sig do
      params(
        records: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Collaboration, Integer, String, T::Enumerable[T.any(::Collaboration, Integer, String, T::Enumerable[::Collaboration])])
      ).returns(T::Array[::Collaboration])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Collaboration, Integer, String, T::Enumerable[T.any(::Collaboration, Integer, String, T::Enumerable[::Collaboration])])
      ).returns(T::Array[::Collaboration])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Collaboration]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Collaboration, T::Enumerable[T.any(::Collaboration, T::Enumerable[::Collaboration])])
      ).returns(T::Array[::Collaboration])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Collaboration]) }
    def target; end

    sig { returns(T::Array[::Collaboration]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Collaboration } }

    sig { returns(T::Array[::Collaboration]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Collaboration } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
