# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `AlertMailer`.
# Please instead update this file by running `bin/tapioca dsl AlertMailer`.

class AlertMailer
  class << self
    sig do
      params(
        user: T.untyped,
        broken_scrapers: T.untyped,
        successful_scrapers: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def alert_email(user, broken_scrapers, successful_scrapers); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def asset_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def audio_url(source, options = T.unsafe(nil)); end

    sig { params(text: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def auto_link(text, *args, &block); end

    sig { params(args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def capture(*args, &block); end

    sig { params(args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def capture_with_haml(*args, &block); end

    sig { params(args: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def capture_without_haml(*args); end

    sig { params(content: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cdata_section(content); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_extname(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def concat(string); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def concat_with_haml_xss(string); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def concat_without_haml_xss(string); end

    sig do
      params(
        name: T.untyped,
        content: T.untyped,
        options: T.untyped,
        block: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def content_for(name, content = T.unsafe(nil), options = T.unsafe(nil), &block); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def content_for?(name); end

    sig { params(name: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def content_tag(name, *args, &block); end

    sig { params(name: T.untyped, args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def content_tag_with_haml(name, *args, &block); end

    sig do
      params(
        name: T.untyped,
        content_or_options_with_block: T.untyped,
        options: T.untyped,
        escape: T.untyped,
        block: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def content_tag_without_haml(name, content_or_options_with_block = T.unsafe(nil), options = T.unsafe(nil), escape = T.unsafe(nil), &block); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def current_cycle(name = T.unsafe(nil)); end

    sig { params(first_value: T.untyped, values: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def cycle(first_value, *values); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def escape_once(html); end

    sig { params(text: T.untyped, phrase: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def excerpt(text, phrase, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def font_url(source, options = T.unsafe(nil)); end

    sig { params(text: T.untyped, phrases: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def highlight(text, phrases, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def image_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def javascript_url(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def path_to_video(source, options = T.unsafe(nil)); end

    sig do
      params(
        count: T.untyped,
        singular: T.untyped,
        plural_arg: T.untyped,
        plural: T.untyped,
        locale: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def pluralize(count, singular, plural_arg = T.unsafe(nil), plural: T.unsafe(nil), locale: T.unsafe(nil)); end

    sig { params(name: T.untyped, content: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def provide(name, content = T.unsafe(nil), &block); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def public_compute_asset_path(source, options = T.unsafe(nil)); end

    sig { params(stringish: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def raw(stringish); end

    sig { params(name: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def reset_cycle(name = T.unsafe(nil)); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_concat(string); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_concat_with_haml_xss(string); end

    sig { params(string: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_concat_without_haml_xss(string); end

    sig { params(array: T.untyped, sep: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def safe_join(array, sep = T.unsafe(nil)); end

    sig { params(html: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitize(html, options = T.unsafe(nil)); end

    sig { params(style: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def sanitize_css(style); end

    sig do
      params(
        text: T.untyped,
        html_options: T.untyped,
        options: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def simple_format(text, html_options = T.unsafe(nil), options = T.unsafe(nil)); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def strip_links(html); end

    sig { params(html: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def strip_tags(html); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def stylesheet_url(source, options = T.unsafe(nil)); end

    sig do
      params(
        name: T.untyped,
        options: T.untyped,
        open: T.untyped,
        escape: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def tag(name = T.unsafe(nil), options = T.unsafe(nil), open = T.unsafe(nil), escape = T.unsafe(nil)); end

    sig { params(array: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def to_sentence(array, options = T.unsafe(nil)); end

    sig { params(text: T.untyped, options: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def truncate(text, options = T.unsafe(nil), &block); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_asset(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_audio(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_font(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_image(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_javascript(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_stylesheet(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def url_to_video(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_path(source, options = T.unsafe(nil)); end

    sig { params(source: T.untyped, options: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def video_url(source, options = T.unsafe(nil)); end

    sig { params(args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def with_output_buffer(*args, &block); end

    sig { params(args: T.untyped, block: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def with_output_buffer_with_haml_xss(*args, &block); end

    sig { params(buf: T.untyped).returns(::ActionMailer::MessageDelivery) }
    def with_output_buffer_without_haml_xss(buf = T.unsafe(nil)); end

    sig do
      params(
        text: T.untyped,
        line_width: T.untyped,
        break_sequence: T.untyped
      ).returns(::ActionMailer::MessageDelivery)
    end
    def word_wrap(text, line_width: T.unsafe(nil), break_sequence: T.unsafe(nil)); end
  end
end
