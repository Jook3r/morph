# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Metric`.
# Please instead update this file by running `bin/tapioca dsl Metric`.

class Metric
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Metric).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Metric]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Metric)) }
    def fifth; end

    sig { returns(::Metric) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Metric)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Metric) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Metric) }
    def first!; end

    sig { returns(T.nilable(::Metric)) }
    def forty_two; end

    sig { returns(::Metric) }
    def forty_two!; end

    sig { returns(T.nilable(::Metric)) }
    def fourth; end

    sig { returns(::Metric) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Metric) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Metric).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Metric).void)).returns(::Metric) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Metric).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Metric).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Metric)) }
    def second; end

    sig { returns(::Metric) }
    def second!; end

    sig { returns(T.nilable(::Metric)) }
    def second_to_last; end

    sig { returns(::Metric) }
    def second_to_last!; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Metric) }
    def take!; end

    sig { returns(T.nilable(::Metric)) }
    def third; end

    sig { returns(::Metric) }
    def third!; end

    sig { returns(T.nilable(::Metric)) }
    def third_to_last; end

    sig { returns(::Metric) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def build_run(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def create_run(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def create_run!(*args, &blk); end

    sig { returns(T.nilable(::Run)) }
    def reload_run; end

    sig { returns(T.nilable(::Run)) }
    def run; end

    sig { params(value: T.nilable(::Run)).void }
    def run=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def inblock; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def inblock=(value); end

    sig { returns(T::Boolean) }
    def inblock?; end

    sig { returns(T.nilable(::Integer)) }
    def inblock_before_last_save; end

    sig { returns(T.untyped) }
    def inblock_before_type_cast; end

    sig { returns(T::Boolean) }
    def inblock_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def inblock_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def inblock_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def inblock_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def inblock_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def inblock_previous_change; end

    sig { returns(T::Boolean) }
    def inblock_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def inblock_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def inblock_was; end

    sig { void }
    def inblock_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def majflt; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def majflt=(value); end

    sig { returns(T::Boolean) }
    def majflt?; end

    sig { returns(T.nilable(::Integer)) }
    def majflt_before_last_save; end

    sig { returns(T.untyped) }
    def majflt_before_type_cast; end

    sig { returns(T::Boolean) }
    def majflt_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def majflt_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def majflt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def majflt_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def majflt_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def majflt_previous_change; end

    sig { returns(T::Boolean) }
    def majflt_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def majflt_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def majflt_was; end

    sig { void }
    def majflt_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def maxrss; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def maxrss=(value); end

    sig { returns(T::Boolean) }
    def maxrss?; end

    sig { returns(T.nilable(::Integer)) }
    def maxrss_before_last_save; end

    sig { returns(T.untyped) }
    def maxrss_before_type_cast; end

    sig { returns(T::Boolean) }
    def maxrss_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maxrss_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maxrss_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def maxrss_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def maxrss_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def maxrss_previous_change; end

    sig { returns(T::Boolean) }
    def maxrss_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def maxrss_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def maxrss_was; end

    sig { void }
    def maxrss_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def minflt; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def minflt=(value); end

    sig { returns(T::Boolean) }
    def minflt?; end

    sig { returns(T.nilable(::Integer)) }
    def minflt_before_last_save; end

    sig { returns(T.untyped) }
    def minflt_before_type_cast; end

    sig { returns(T::Boolean) }
    def minflt_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def minflt_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def minflt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def minflt_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def minflt_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def minflt_previous_change; end

    sig { returns(T::Boolean) }
    def minflt_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def minflt_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def minflt_was; end

    sig { void }
    def minflt_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def nivcsw; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def nivcsw=(value); end

    sig { returns(T::Boolean) }
    def nivcsw?; end

    sig { returns(T.nilable(::Integer)) }
    def nivcsw_before_last_save; end

    sig { returns(T.untyped) }
    def nivcsw_before_type_cast; end

    sig { returns(T::Boolean) }
    def nivcsw_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nivcsw_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nivcsw_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def nivcsw_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def nivcsw_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nivcsw_previous_change; end

    sig { returns(T::Boolean) }
    def nivcsw_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def nivcsw_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def nivcsw_was; end

    sig { void }
    def nivcsw_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def nvcsw; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def nvcsw=(value); end

    sig { returns(T::Boolean) }
    def nvcsw?; end

    sig { returns(T.nilable(::Integer)) }
    def nvcsw_before_last_save; end

    sig { returns(T.untyped) }
    def nvcsw_before_type_cast; end

    sig { returns(T::Boolean) }
    def nvcsw_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nvcsw_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nvcsw_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def nvcsw_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def nvcsw_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def nvcsw_previous_change; end

    sig { returns(T::Boolean) }
    def nvcsw_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def nvcsw_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def nvcsw_was; end

    sig { void }
    def nvcsw_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def oublock; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def oublock=(value); end

    sig { returns(T::Boolean) }
    def oublock?; end

    sig { returns(T.nilable(::Integer)) }
    def oublock_before_last_save; end

    sig { returns(T.untyped) }
    def oublock_before_type_cast; end

    sig { returns(T::Boolean) }
    def oublock_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def oublock_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def oublock_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def oublock_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def oublock_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def oublock_previous_change; end

    sig { returns(T::Boolean) }
    def oublock_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def oublock_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def oublock_was; end

    sig { void }
    def oublock_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_inblock!; end

    sig { void }
    def restore_majflt!; end

    sig { void }
    def restore_maxrss!; end

    sig { void }
    def restore_minflt!; end

    sig { void }
    def restore_nivcsw!; end

    sig { void }
    def restore_nvcsw!; end

    sig { void }
    def restore_oublock!; end

    sig { void }
    def restore_run_id!; end

    sig { void }
    def restore_stime!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_utime!; end

    sig { void }
    def restore_wall_time!; end

    sig { returns(T.nilable(::Integer)) }
    def run_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def run_id=(value); end

    sig { returns(T::Boolean) }
    def run_id?; end

    sig { returns(T.nilable(::Integer)) }
    def run_id_before_last_save; end

    sig { returns(T.untyped) }
    def run_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def run_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def run_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def run_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def run_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def run_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def run_id_previous_change; end

    sig { returns(T::Boolean) }
    def run_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def run_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def run_id_was; end

    sig { void }
    def run_id_will_change!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_inblock; end

    sig { returns(T::Boolean) }
    def saved_change_to_inblock?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_majflt; end

    sig { returns(T::Boolean) }
    def saved_change_to_majflt?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_maxrss; end

    sig { returns(T::Boolean) }
    def saved_change_to_maxrss?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_minflt; end

    sig { returns(T::Boolean) }
    def saved_change_to_minflt?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_nivcsw; end

    sig { returns(T::Boolean) }
    def saved_change_to_nivcsw?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_nvcsw; end

    sig { returns(T::Boolean) }
    def saved_change_to_nvcsw?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_oublock; end

    sig { returns(T::Boolean) }
    def saved_change_to_oublock?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_run_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_run_id?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_stime; end

    sig { returns(T::Boolean) }
    def saved_change_to_stime?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_utime; end

    sig { returns(T::Boolean) }
    def saved_change_to_utime?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_wall_time; end

    sig { returns(T::Boolean) }
    def saved_change_to_wall_time?; end

    sig { returns(T.nilable(::Float)) }
    def stime; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def stime=(value); end

    sig { returns(T::Boolean) }
    def stime?; end

    sig { returns(T.nilable(::Float)) }
    def stime_before_last_save; end

    sig { returns(T.untyped) }
    def stime_before_type_cast; end

    sig { returns(T::Boolean) }
    def stime_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def stime_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def stime_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def stime_changed?; end

    sig { returns(T.nilable(::Float)) }
    def stime_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def stime_previous_change; end

    sig { returns(T::Boolean) }
    def stime_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def stime_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def stime_was; end

    sig { void }
    def stime_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def utime; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def utime=(value); end

    sig { returns(T::Boolean) }
    def utime?; end

    sig { returns(T.nilable(::Float)) }
    def utime_before_last_save; end

    sig { returns(T.untyped) }
    def utime_before_type_cast; end

    sig { returns(T::Boolean) }
    def utime_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def utime_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def utime_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def utime_changed?; end

    sig { returns(T.nilable(::Float)) }
    def utime_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def utime_previous_change; end

    sig { returns(T::Boolean) }
    def utime_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def utime_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def utime_was; end

    sig { void }
    def utime_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def wall_time; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def wall_time=(value); end

    sig { returns(T::Boolean) }
    def wall_time?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_before_last_save; end

    sig { returns(T.untyped) }
    def wall_time_before_type_cast; end

    sig { returns(T::Boolean) }
    def wall_time_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def wall_time_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def wall_time_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def wall_time_changed?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def wall_time_previous_change; end

    sig { returns(T::Boolean) }
    def wall_time_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_was; end

    sig { void }
    def wall_time_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_inblock?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_majflt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_maxrss?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_minflt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nivcsw?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nvcsw?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_oublock?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_run_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stime?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_utime?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wall_time?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Metric } }

    sig { returns(T::Array[::Metric]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Metric } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Metric } }

    sig do
      params(
        records: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Metric, Integer, String, T::Enumerable[T.any(::Metric, Integer, String, T::Enumerable[::Metric])])
      ).returns(T::Array[::Metric])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Metric, Integer, String, T::Enumerable[T.any(::Metric, Integer, String, T::Enumerable[::Metric])])
      ).returns(T::Array[::Metric])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Metric]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Metric, T::Enumerable[T.any(::Metric, T::Enumerable[::Metric])])
      ).returns(T::Array[::Metric])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Metric]) }
    def target; end

    sig { returns(T::Array[::Metric]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Metric } }

    sig { returns(T::Array[::Metric]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Metric } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
