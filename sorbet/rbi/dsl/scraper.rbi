# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Scraper`.
# Please instead update this file by running `bin/tapioca dsl Scraper`.

class Scraper
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Scraper).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Scraper]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Scraper)) }
    def fifth; end

    sig { returns(::Scraper) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Scraper)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Scraper) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Scraper) }
    def first!; end

    sig { returns(T.nilable(::Scraper)) }
    def forty_two; end

    sig { returns(::Scraper) }
    def forty_two!; end

    sig { returns(T.nilable(::Scraper)) }
    def fourth; end

    sig { returns(::Scraper) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Scraper) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Scraper).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Scraper).void)).returns(::Scraper) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Scraper).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Scraper).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Scraper)) }
    def second; end

    sig { returns(::Scraper) }
    def second!; end

    sig { returns(T.nilable(::Scraper)) }
    def second_to_last; end

    sig { returns(::Scraper) }
    def second_to_last!; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Scraper) }
    def take!; end

    sig { returns(T.nilable(::Scraper)) }
    def third; end

    sig { returns(::Scraper) }
    def third!; end

    sig { returns(T.nilable(::Scraper)) }
    def third_to_last; end

    sig { returns(::Scraper) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(::ApiQuery::PrivateCollectionProxy) }
    def api_queries; end

    sig { params(value: T::Enumerable[::ApiQuery]).void }
    def api_queries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def api_query_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def api_query_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CreateScraperProgress) }
    def build_create_scraper_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_forked_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def build_last_run(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def build_owner(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contribution_ids=(ids); end

    sig { returns(::Contribution::PrivateCollectionProxy) }
    def contributions; end

    sig { params(value: T::Enumerable[::Contribution]).void }
    def contributions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def contributor_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contributor_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def contributors; end

    sig { params(value: T::Enumerable[::User]).void }
    def contributors=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CreateScraperProgress) }
    def create_create_scraper_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CreateScraperProgress) }
    def create_create_scraper_progress!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_forked_by(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_forked_by!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def create_last_run(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Run) }
    def create_last_run!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner!(*args, &blk); end

    sig { returns(T.nilable(::CreateScraperProgress)) }
    def create_scraper_progress; end

    sig { params(value: T.nilable(::CreateScraperProgress)).void }
    def create_scraper_progress=(value); end

    sig { returns(T.nilable(::User)) }
    def forked_by; end

    sig { params(value: T.nilable(::User)).void }
    def forked_by=(value); end

    sig { returns(T.nilable(::Run)) }
    def last_run; end

    sig { params(value: T.nilable(::Run)).void }
    def last_run=(value); end

    sig { returns(T::Array[T.untyped]) }
    def metric_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def metric_ids=(ids); end

    sig { returns(::Metric::PrivateCollectionProxy) }
    def metrics; end

    sig { params(value: T::Enumerable[::Metric]).void }
    def metrics=(value); end

    sig { returns(T.nilable(::Owner)) }
    def owner; end

    sig { params(value: T.nilable(::Owner)).void }
    def owner=(value); end

    sig { returns(T.nilable(::CreateScraperProgress)) }
    def reload_create_scraper_progress; end

    sig { returns(T.nilable(::User)) }
    def reload_forked_by; end

    sig { returns(T.nilable(::Run)) }
    def reload_last_run; end

    sig { returns(T.nilable(::Owner)) }
    def reload_owner; end

    sig { returns(T::Array[T.untyped]) }
    def run_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def run_ids=(ids); end

    sig { returns(::Run::PrivateCollectionProxy) }
    def runs; end

    sig { params(value: T::Enumerable[::Run]).void }
    def runs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def variable_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def variable_ids=(ids); end

    sig { returns(::Variable::PrivateCollectionProxy) }
    def variables; end

    sig { params(value: T::Enumerable[::Variable]).void }
    def variables=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def variables_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def watch_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def watch_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def watcher_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def watcher_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def watchers; end

    sig { params(value: T::Enumerable[::User]).void }
    def watchers=(value); end

    sig { returns(::Alert::PrivateCollectionProxy) }
    def watches; end

    sig { params(value: T::Enumerable[::Alert]).void }
    def watches=(value); end

    sig { returns(T::Array[T.untyped]) }
    def webhook_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def webhook_ids=(ids); end

    sig { returns(::Webhook::PrivateCollectionProxy) }
    def webhooks; end

    sig { params(value: T::Enumerable[::Webhook]).void }
    def webhooks=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def webhooks_attributes=(attributes); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def auto_run; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def auto_run=(value); end

    sig { returns(T::Boolean) }
    def auto_run?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_run_before_last_save; end

    sig { returns(T.untyped) }
    def auto_run_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_run_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_run_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_run_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def auto_run_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_run_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_run_previous_change; end

    sig { returns(T::Boolean) }
    def auto_run_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_run_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_run_was; end

    sig { void }
    def auto_run_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def create_scraper_progress_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def create_scraper_progress_id=(value); end

    sig { returns(T::Boolean) }
    def create_scraper_progress_id?; end

    sig { returns(T.nilable(::Integer)) }
    def create_scraper_progress_id_before_last_save; end

    sig { returns(T.untyped) }
    def create_scraper_progress_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def create_scraper_progress_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_scraper_progress_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_scraper_progress_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def create_scraper_progress_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def create_scraper_progress_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def create_scraper_progress_id_previous_change; end

    sig { returns(T::Boolean) }
    def create_scraper_progress_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def create_scraper_progress_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def create_scraper_progress_id_was; end

    sig { void }
    def create_scraper_progress_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def description_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { returns(T::Boolean) }
    def description_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def forked_by_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def forked_by_id=(value); end

    sig { returns(T::Boolean) }
    def forked_by_id?; end

    sig { returns(T.nilable(::Integer)) }
    def forked_by_id_before_last_save; end

    sig { returns(T.untyped) }
    def forked_by_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def forked_by_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def forked_by_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def forked_by_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def forked_by_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def forked_by_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def forked_by_id_previous_change; end

    sig { returns(T::Boolean) }
    def forked_by_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def forked_by_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def forked_by_id_was; end

    sig { void }
    def forked_by_id_will_change!; end

    sig { returns(::String) }
    def full_name; end

    sig { params(value: ::String).returns(::String) }
    def full_name=(value); end

    sig { returns(T::Boolean) }
    def full_name?; end

    sig { returns(T.nilable(::String)) }
    def full_name_before_last_save; end

    sig { returns(T.untyped) }
    def full_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def full_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_previous_change; end

    sig { returns(T::Boolean) }
    def full_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def full_name_was; end

    sig { void }
    def full_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def git_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def git_url=(value); end

    sig { returns(T::Boolean) }
    def git_url?; end

    sig { returns(T.nilable(::String)) }
    def git_url_before_last_save; end

    sig { returns(T.untyped) }
    def git_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def git_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def git_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def git_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_url_previous_change; end

    sig { returns(T::Boolean) }
    def git_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def git_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def git_url_was; end

    sig { void }
    def git_url_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def github_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def github_id=(value); end

    sig { returns(T::Boolean) }
    def github_id?; end

    sig { returns(T.nilable(::Integer)) }
    def github_id_before_last_save; end

    sig { returns(T.untyped) }
    def github_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def github_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def github_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_id_previous_change; end

    sig { returns(T::Boolean) }
    def github_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def github_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def github_id_was; end

    sig { void }
    def github_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def github_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def github_url=(value); end

    sig { returns(T::Boolean) }
    def github_url?; end

    sig { returns(T.nilable(::String)) }
    def github_url_before_last_save; end

    sig { returns(T.untyped) }
    def github_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def github_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def github_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def github_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def github_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def github_url_previous_change; end

    sig { returns(T::Boolean) }
    def github_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def github_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def github_url_was; end

    sig { void }
    def github_url_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def memory_mb; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def memory_mb=(value); end

    sig { returns(T::Boolean) }
    def memory_mb?; end

    sig { returns(T.nilable(::Integer)) }
    def memory_mb_before_last_save; end

    sig { returns(T.untyped) }
    def memory_mb_before_type_cast; end

    sig { returns(T::Boolean) }
    def memory_mb_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def memory_mb_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def memory_mb_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def memory_mb_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def memory_mb_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def memory_mb_previous_change; end

    sig { returns(T::Boolean) }
    def memory_mb_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def memory_mb_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def memory_mb_was; end

    sig { void }
    def memory_mb_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def original_language_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def original_language_key=(value); end

    sig { returns(T::Boolean) }
    def original_language_key?; end

    sig { returns(T.nilable(::String)) }
    def original_language_key_before_last_save; end

    sig { returns(T.untyped) }
    def original_language_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def original_language_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_language_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_language_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def original_language_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_language_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_language_key_previous_change; end

    sig { returns(T::Boolean) }
    def original_language_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def original_language_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def original_language_key_was; end

    sig { void }
    def original_language_key_will_change!; end

    sig { returns(::Integer) }
    def owner_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def owner_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def owner_id_previous_change; end

    sig { returns(T::Boolean) }
    def owner_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(::Integer) }
    def repo_size; end

    sig { params(value: ::Integer).returns(::Integer) }
    def repo_size=(value); end

    sig { returns(T::Boolean) }
    def repo_size?; end

    sig { returns(T.nilable(::Integer)) }
    def repo_size_before_last_save; end

    sig { returns(T.untyped) }
    def repo_size_before_type_cast; end

    sig { returns(T::Boolean) }
    def repo_size_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repo_size_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repo_size_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def repo_size_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def repo_size_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def repo_size_previous_change; end

    sig { returns(T::Boolean) }
    def repo_size_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def repo_size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def repo_size_was; end

    sig { void }
    def repo_size_will_change!; end

    sig { void }
    def restore_auto_run!; end

    sig { void }
    def restore_create_scraper_progress_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_forked_by_id!; end

    sig { void }
    def restore_full_name!; end

    sig { void }
    def restore_git_url!; end

    sig { void }
    def restore_github_id!; end

    sig { void }
    def restore_github_url!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_memory_mb!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_original_language_key!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_repo_size!; end

    sig { void }
    def restore_scraperwiki_url!; end

    sig { void }
    def restore_sqlite_db_size!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_auto_run; end

    sig { returns(T::Boolean) }
    def saved_change_to_auto_run?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_create_scraper_progress_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_create_scraper_progress_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_forked_by_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_forked_by_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_full_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_git_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_git_url?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_github_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_github_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_url?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_memory_mb; end

    sig { returns(T::Boolean) }
    def saved_change_to_memory_mb?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_original_language_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_original_language_key?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_repo_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_repo_size?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_scraperwiki_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_scraperwiki_url?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sqlite_db_size; end

    sig { returns(T::Boolean) }
    def saved_change_to_sqlite_db_size?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def scraperwiki_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def scraperwiki_url=(value); end

    sig { returns(T::Boolean) }
    def scraperwiki_url?; end

    sig { returns(T.nilable(::String)) }
    def scraperwiki_url_before_last_save; end

    sig { returns(T.untyped) }
    def scraperwiki_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def scraperwiki_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraperwiki_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraperwiki_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scraperwiki_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def scraperwiki_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraperwiki_url_previous_change; end

    sig { returns(T::Boolean) }
    def scraperwiki_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def scraperwiki_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def scraperwiki_url_was; end

    sig { void }
    def scraperwiki_url_will_change!; end

    sig { returns(::Integer) }
    def sqlite_db_size; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sqlite_db_size=(value); end

    sig { returns(T::Boolean) }
    def sqlite_db_size?; end

    sig { returns(T.nilable(::Integer)) }
    def sqlite_db_size_before_last_save; end

    sig { returns(T.untyped) }
    def sqlite_db_size_before_type_cast; end

    sig { returns(T::Boolean) }
    def sqlite_db_size_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sqlite_db_size_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sqlite_db_size_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sqlite_db_size_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sqlite_db_size_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sqlite_db_size_previous_change; end

    sig { returns(T::Boolean) }
    def sqlite_db_size_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sqlite_db_size_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sqlite_db_size_was; end

    sig { void }
    def sqlite_db_size_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auto_run?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_create_scraper_progress_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_forked_by_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_git_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_memory_mb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_original_language_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_repo_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scraperwiki_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sqlite_db_size?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Scraper } }

    sig { returns(T::Array[::Scraper]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Scraper } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Scraper } }

    sig do
      params(
        records: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Scraper, Integer, String, T::Enumerable[T.any(::Scraper, Integer, String, T::Enumerable[::Scraper])])
      ).returns(T::Array[::Scraper])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Scraper, Integer, String, T::Enumerable[T.any(::Scraper, Integer, String, T::Enumerable[::Scraper])])
      ).returns(T::Array[::Scraper])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Scraper]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Scraper, T::Enumerable[T.any(::Scraper, T::Enumerable[::Scraper])])
      ).returns(T::Array[::Scraper])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Scraper]) }
    def target; end

    sig { returns(T::Array[::Scraper]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Scraper } }

    sig { returns(T::Array[::Scraper]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Scraper } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
