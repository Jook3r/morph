# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def alert_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def alert_ids=(ids); end

    sig { returns(::Alert::PrivateCollectionProxy) }
    def alerts; end

    sig { params(value: T::Enumerable[::Alert]).void }
    def alerts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def contribution_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def contribution_ids=(ids); end

    sig { returns(::Contribution::PrivateCollectionProxy) }
    def contributions; end

    sig { params(value: T::Enumerable[::Contribution]).void }
    def contributions=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organization_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organization_ids=(ids); end

    sig { returns(::Organization::PrivateCollectionProxy) }
    def organizations; end

    sig { params(value: T::Enumerable[::Organization]).void }
    def organizations=(value); end

    sig { returns(T::Array[T.untyped]) }
    def organizations_user_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def organizations_user_ids=(ids); end

    sig { returns(::OrganizationsUser::PrivateCollectionProxy) }
    def organizations_users; end

    sig { params(value: T::Enumerable[::OrganizationsUser]).void }
    def organizations_users=(value); end

    sig { returns(T::Array[T.untyped]) }
    def run_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def run_ids=(ids); end

    sig { returns(::Run::PrivateCollectionProxy) }
    def runs; end

    sig { params(value: T::Enumerable[::Run]).void }
    def runs=(value); end

    sig { returns(T::Array[T.untyped]) }
    def scraper_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def scraper_ids=(ids); end

    sig { returns(::Scraper::PrivateCollectionProxy) }
    def scrapers; end

    sig { params(value: T::Enumerable[::Scraper]).void }
    def scrapers=(value); end

    sig { returns(::Scraper::PrivateCollectionProxy) }
    def scrapers_contributed_to; end

    sig { params(value: T::Enumerable[::Scraper]).void }
    def scrapers_contributed_to=(value); end

    sig { returns(T::Array[T.untyped]) }
    def scrapers_contributed_to_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def scrapers_contributed_to_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def watch_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def watch_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def watcher_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def watcher_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def watchers; end

    sig { params(value: T::Enumerable[::User]).void }
    def watchers=(value); end

    sig { returns(::Alert::PrivateCollectionProxy) }
    def watches; end

    sig { params(value: T::Enumerable[::Alert]).void }
    def watches=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def all_supporters(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def supporters(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def access_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def access_token=(value); end

    sig { returns(T::Boolean) }
    def access_token?; end

    sig { returns(T.nilable(::String)) }
    def access_token_before_last_save; end

    sig { returns(T.untyped) }
    def access_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def access_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def access_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def access_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_previous_change; end

    sig { returns(T::Boolean) }
    def access_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def access_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def access_token_was; end

    sig { void }
    def access_token_will_change!; end

    sig { returns(T::Boolean) }
    def admin; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def admin=(value); end

    sig { returns(T::Boolean) }
    def admin?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_before_last_save; end

    sig { returns(T.untyped) }
    def admin_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def admin_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def admin_previous_change; end

    sig { returns(T::Boolean) }
    def admin_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_was; end

    sig { void }
    def admin_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at=(value); end

    sig { returns(T::Boolean) }
    def alerted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at_before_last_save; end

    sig { returns(T.untyped) }
    def alerted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def alerted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alerted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alerted_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def alerted_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def alerted_at_previous_change; end

    sig { returns(T::Boolean) }
    def alerted_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def alerted_at_was; end

    sig { void }
    def alerted_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def api_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def api_key=(value); end

    sig { returns(T::Boolean) }
    def api_key?; end

    sig { returns(T.nilable(::String)) }
    def api_key_before_last_save; end

    sig { returns(T.untyped) }
    def api_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def api_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def api_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def api_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def api_key_previous_change; end

    sig { returns(T::Boolean) }
    def api_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def api_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def api_key_was; end

    sig { void }
    def api_key_will_change!; end

    sig { returns(T.nilable(::String)) }
    def blog; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def blog=(value); end

    sig { returns(T::Boolean) }
    def blog?; end

    sig { returns(T.nilable(::String)) }
    def blog_before_last_save; end

    sig { returns(T.untyped) }
    def blog_before_type_cast; end

    sig { returns(T::Boolean) }
    def blog_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def blog_changed?; end

    sig { returns(T.nilable(::String)) }
    def blog_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def blog_previous_change; end

    sig { returns(T::Boolean) }
    def blog_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def blog_previously_was; end

    sig { returns(T.nilable(::String)) }
    def blog_was; end

    sig { void }
    def blog_will_change!; end

    sig { returns(T.nilable(::String)) }
    def company; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def company=(value); end

    sig { returns(T::Boolean) }
    def company?; end

    sig { returns(T.nilable(::String)) }
    def company_before_last_save; end

    sig { returns(T.untyped) }
    def company_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def company_changed?; end

    sig { returns(T.nilable(::String)) }
    def company_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def company_previous_change; end

    sig { returns(T::Boolean) }
    def company_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def company_previously_was; end

    sig { returns(T.nilable(::String)) }
    def company_was; end

    sig { void }
    def company_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_sign_in_at_was; end

    sig { void }
    def current_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def current_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def current_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def current_sign_in_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def current_sign_in_ip_was; end

    sig { void }
    def current_sign_in_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.untyped) }
    def feature_switches; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def feature_switches=(value); end

    sig { returns(T::Boolean) }
    def feature_switches?; end

    sig { returns(T.untyped) }
    def feature_switches_before_last_save; end

    sig { returns(T.untyped) }
    def feature_switches_before_type_cast; end

    sig { returns(T::Boolean) }
    def feature_switches_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def feature_switches_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def feature_switches_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def feature_switches_changed?; end

    sig { returns(T.untyped) }
    def feature_switches_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def feature_switches_previous_change; end

    sig { returns(T::Boolean) }
    def feature_switches_previously_changed?; end

    sig { returns(T.untyped) }
    def feature_switches_previously_was; end

    sig { returns(T.untyped) }
    def feature_switches_was; end

    sig { void }
    def feature_switches_will_change!; end

    sig { returns(T.nilable(::String)) }
    def gravatar_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def gravatar_url=(value); end

    sig { returns(T::Boolean) }
    def gravatar_url?; end

    sig { returns(T.nilable(::String)) }
    def gravatar_url_before_last_save; end

    sig { returns(T.untyped) }
    def gravatar_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def gravatar_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def gravatar_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def gravatar_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gravatar_url_previous_change; end

    sig { returns(T::Boolean) }
    def gravatar_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def gravatar_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gravatar_url_was; end

    sig { void }
    def gravatar_url_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_sign_in_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_sign_in_at_was; end

    sig { void }
    def last_sign_in_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_sign_in_ip=(value); end

    sig { returns(T::Boolean) }
    def last_sign_in_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_sign_in_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_sign_in_ip_previous_change; end

    sig { returns(T::Boolean) }
    def last_sign_in_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_sign_in_ip_was; end

    sig { void }
    def last_sign_in_ip_will_change!; end

    sig { returns(T.nilable(::String)) }
    def location; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.nilable(::String)) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def location_changed?; end

    sig { returns(T.nilable(::String)) }
    def location_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def location_previous_change; end

    sig { returns(T::Boolean) }
    def location_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def location_previously_was; end

    sig { returns(T.nilable(::String)) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def nickname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def nickname=(value); end

    sig { returns(T::Boolean) }
    def nickname?; end

    sig { returns(T.nilable(::String)) }
    def nickname_before_last_save; end

    sig { returns(T.untyped) }
    def nickname_before_type_cast; end

    sig { returns(T::Boolean) }
    def nickname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def nickname_changed?; end

    sig { returns(T.nilable(::String)) }
    def nickname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_previous_change; end

    sig { returns(T::Boolean) }
    def nickname_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def nickname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def nickname_was; end

    sig { void }
    def nickname_will_change!; end

    sig { returns(T.nilable(::String)) }
    def provider; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def provider=(value); end

    sig { returns(T::Boolean) }
    def provider?; end

    sig { returns(T.nilable(::String)) }
    def provider_before_last_save; end

    sig { returns(T.untyped) }
    def provider_before_type_cast; end

    sig { returns(T::Boolean) }
    def provider_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def provider_changed?; end

    sig { returns(T.nilable(::String)) }
    def provider_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def provider_previous_change; end

    sig { returns(T::Boolean) }
    def provider_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def provider_previously_was; end

    sig { returns(T.nilable(::String)) }
    def provider_was; end

    sig { void }
    def provider_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at=(value); end

    sig { returns(T::Boolean) }
    def remember_created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_before_last_save; end

    sig { returns(T.untyped) }
    def remember_created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def remember_created_at_previous_change; end

    sig { returns(T::Boolean) }
    def remember_created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def remember_created_at_was; end

    sig { void }
    def remember_created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remember_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remember_token=(value); end

    sig { returns(T::Boolean) }
    def remember_token?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_before_last_save; end

    sig { returns(T.untyped) }
    def remember_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def remember_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remember_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remember_token_previous_change; end

    sig { returns(T::Boolean) }
    def remember_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remember_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remember_token_was; end

    sig { void }
    def remember_token_will_change!; end

    sig { void }
    def restore_access_token!; end

    sig { void }
    def restore_admin!; end

    sig { void }
    def restore_alerted_at!; end

    sig { void }
    def restore_api_key!; end

    sig { void }
    def restore_blog!; end

    sig { void }
    def restore_company!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_sign_in_at!; end

    sig { void }
    def restore_current_sign_in_ip!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_feature_switches!; end

    sig { void }
    def restore_gravatar_url!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_sign_in_at!; end

    sig { void }
    def restore_last_sign_in_ip!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_nickname!; end

    sig { void }
    def restore_provider!; end

    sig { void }
    def restore_remember_created_at!; end

    sig { void }
    def restore_remember_token!; end

    sig { void }
    def restore_sign_in_count!; end

    sig { void }
    def restore_stripe_customer_id!; end

    sig { void }
    def restore_stripe_plan_id!; end

    sig { void }
    def restore_stripe_subscription_id!; end

    sig { void }
    def restore_suspended!; end

    sig { void }
    def restore_type!; end

    sig { void }
    def restore_uid!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_access_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_access_token?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_admin; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_alerted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_alerted_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_api_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_api_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_blog; end

    sig { returns(T::Boolean) }
    def saved_change_to_blog?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_company; end

    sig { returns(T::Boolean) }
    def saved_change_to_company?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_current_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_sign_in_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_feature_switches; end

    sig { returns(T::Boolean) }
    def saved_change_to_feature_switches?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_gravatar_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_gravatar_url?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_sign_in_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_sign_in_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_sign_in_ip?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_nickname; end

    sig { returns(T::Boolean) }
    def saved_change_to_nickname?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_provider; end

    sig { returns(T::Boolean) }
    def saved_change_to_provider?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_remember_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remember_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_remember_token?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_sign_in_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_sign_in_count?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_customer_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_customer_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_plan_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_plan_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_stripe_subscription_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_stripe_subscription_id?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_suspended; end

    sig { returns(T::Boolean) }
    def saved_change_to_suspended?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_uid?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::Integer) }
    def sign_in_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def sign_in_count=(value); end

    sig { returns(T::Boolean) }
    def sign_in_count?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_before_last_save; end

    sig { returns(T.untyped) }
    def sign_in_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def sign_in_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def sign_in_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def sign_in_count_previous_change; end

    sig { returns(T::Boolean) }
    def sign_in_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def sign_in_count_was; end

    sig { void }
    def sign_in_count_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_customer_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_customer_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_customer_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_customer_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def stripe_customer_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_customer_id_previous_change; end

    sig { returns(T::Boolean) }
    def stripe_customer_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_customer_id_was; end

    sig { void }
    def stripe_customer_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_plan_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_plan_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_plan_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_plan_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_plan_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_plan_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_plan_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_plan_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def stripe_plan_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_plan_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_plan_id_previous_change; end

    sig { returns(T::Boolean) }
    def stripe_plan_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_plan_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_plan_id_was; end

    sig { void }
    def stripe_plan_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def stripe_subscription_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def stripe_subscription_id=(value); end

    sig { returns(T::Boolean) }
    def stripe_subscription_id?; end

    sig { returns(T.nilable(::String)) }
    def stripe_subscription_id_before_last_save; end

    sig { returns(T.untyped) }
    def stripe_subscription_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def stripe_subscription_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_subscription_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_subscription_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def stripe_subscription_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_subscription_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def stripe_subscription_id_previous_change; end

    sig { returns(T::Boolean) }
    def stripe_subscription_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def stripe_subscription_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def stripe_subscription_id_was; end

    sig { void }
    def stripe_subscription_id_will_change!; end

    sig { returns(T::Boolean) }
    def suspended; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def suspended=(value); end

    sig { returns(T::Boolean) }
    def suspended?; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspended_before_last_save; end

    sig { returns(T.untyped) }
    def suspended_before_type_cast; end

    sig { returns(T::Boolean) }
    def suspended_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspended_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspended_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def suspended_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspended_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def suspended_previous_change; end

    sig { returns(T::Boolean) }
    def suspended_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspended_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def suspended_was; end

    sig { void }
    def suspended_will_change!; end

    sig { returns(T.nilable(::String)) }
    def type; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def type=(value); end

    sig { returns(T::Boolean) }
    def type?; end

    sig { returns(T.nilable(::String)) }
    def type_before_last_save; end

    sig { returns(T.untyped) }
    def type_before_type_cast; end

    sig { returns(T::Boolean) }
    def type_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def type_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def type_previous_change; end

    sig { returns(T::Boolean) }
    def type_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def type_was; end

    sig { void }
    def type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def uid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def uid=(value); end

    sig { returns(T::Boolean) }
    def uid?; end

    sig { returns(T.nilable(::String)) }
    def uid_before_last_save; end

    sig { returns(T.untyped) }
    def uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def uid_changed?; end

    sig { returns(T.nilable(::String)) }
    def uid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def uid_previous_change; end

    sig { returns(T::Boolean) }
    def uid_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def uid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def uid_was; end

    sig { void }
    def uid_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_access_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_alerted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_api_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_blog?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_feature_switches?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gravatar_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_sign_in_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nickname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_provider?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remember_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_sign_in_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_customer_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_plan_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stripe_subscription_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suspended?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def all_supporters(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def supporters(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
