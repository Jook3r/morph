# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Run`.
# Please instead update this file by running `bin/tapioca dsl Run`.

class Run
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Run).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Run]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Run)) }
    def fifth; end

    sig { returns(::Run) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Run)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Run) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Run) }
    def first!; end

    sig { returns(T.nilable(::Run)) }
    def forty_two; end

    sig { returns(::Run) }
    def forty_two!; end

    sig { returns(T.nilable(::Run)) }
    def fourth; end

    sig { returns(::Run) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Run) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Run).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Run).void)).returns(::Run) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Run).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Run).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Run)) }
    def second; end

    sig { returns(::Run) }
    def second!; end

    sig { returns(T.nilable(::Run)) }
    def second_to_last; end

    sig { returns(::Run) }
    def second_to_last!; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Run) }
    def take!; end

    sig { returns(T.nilable(::Run)) }
    def third; end

    sig { returns(::Run) }
    def third!; end

    sig { returns(T.nilable(::Run)) }
    def third_to_last; end

    sig { returns(::Run) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Metric) }
    def build_metric(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def build_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def build_scraper(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def connection_log_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def connection_log_ids=(ids); end

    sig { returns(::ConnectionLog::PrivateCollectionProxy) }
    def connection_logs; end

    sig { params(value: T::Enumerable[::ConnectionLog]).void }
    def connection_logs=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Metric) }
    def create_metric(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Metric) }
    def create_metric!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Owner) }
    def create_owner!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def create_scraper(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Scraper) }
    def create_scraper!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def domain_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def domain_ids=(ids); end

    sig { returns(::Domain::PrivateCollectionProxy) }
    def domains; end

    sig { params(value: T::Enumerable[::Domain]).void }
    def domains=(value); end

    sig { returns(T::Array[T.untyped]) }
    def log_line_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def log_line_ids=(ids); end

    sig { returns(::LogLine::PrivateCollectionProxy) }
    def log_lines; end

    sig { params(value: T::Enumerable[::LogLine]).void }
    def log_lines=(value); end

    sig { returns(T.nilable(::Metric)) }
    def metric; end

    sig { params(value: T.nilable(::Metric)).void }
    def metric=(value); end

    sig { returns(T.nilable(::Owner)) }
    def owner; end

    sig { params(value: T.nilable(::Owner)).void }
    def owner=(value); end

    sig { returns(T.nilable(::Metric)) }
    def reload_metric; end

    sig { returns(T.nilable(::Owner)) }
    def reload_owner; end

    sig { returns(T.nilable(::Scraper)) }
    def reload_scraper; end

    sig { returns(T.nilable(::Scraper)) }
    def scraper; end

    sig { params(value: T.nilable(::Scraper)).void }
    def scraper=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finished_successfully(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def running(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T::Boolean) }
    def auto; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def auto=(value); end

    sig { returns(T::Boolean) }
    def auto?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_before_last_save; end

    sig { returns(T.untyped) }
    def auto_before_type_cast; end

    sig { returns(T::Boolean) }
    def auto_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def auto_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def auto_previous_change; end

    sig { returns(T::Boolean) }
    def auto_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def auto_was; end

    sig { void }
    def auto_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def connection_logs_count; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def connection_logs_count=(value); end

    sig { returns(T::Boolean) }
    def connection_logs_count?; end

    sig { returns(T.nilable(::Integer)) }
    def connection_logs_count_before_last_save; end

    sig { returns(T.untyped) }
    def connection_logs_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def connection_logs_count_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def connection_logs_count_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def connection_logs_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def connection_logs_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def connection_logs_count_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def connection_logs_count_previous_change; end

    sig { returns(T::Boolean) }
    def connection_logs_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def connection_logs_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def connection_logs_count_was; end

    sig { void }
    def connection_logs_count_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def docker_image; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def docker_image=(value); end

    sig { returns(T::Boolean) }
    def docker_image?; end

    sig { returns(T.nilable(::String)) }
    def docker_image_before_last_save; end

    sig { returns(T.untyped) }
    def docker_image_before_type_cast; end

    sig { returns(T::Boolean) }
    def docker_image_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def docker_image_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def docker_image_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def docker_image_changed?; end

    sig { returns(T.nilable(::String)) }
    def docker_image_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def docker_image_previous_change; end

    sig { returns(T::Boolean) }
    def docker_image_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def docker_image_previously_was; end

    sig { returns(T.nilable(::String)) }
    def docker_image_was; end

    sig { void }
    def docker_image_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at=(value); end

    sig { returns(T::Boolean) }
    def finished_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at_before_last_save; end

    sig { returns(T.untyped) }
    def finished_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def finished_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def finished_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def finished_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def finished_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def finished_at_previous_change; end

    sig { returns(T::Boolean) }
    def finished_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def finished_at_was; end

    sig { void }
    def finished_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def git_revision; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def git_revision=(value); end

    sig { returns(T::Boolean) }
    def git_revision?; end

    sig { returns(T.nilable(::String)) }
    def git_revision_before_last_save; end

    sig { returns(T.untyped) }
    def git_revision_before_type_cast; end

    sig { returns(T::Boolean) }
    def git_revision_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_revision_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_revision_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def git_revision_changed?; end

    sig { returns(T.nilable(::String)) }
    def git_revision_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def git_revision_previous_change; end

    sig { returns(T::Boolean) }
    def git_revision_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def git_revision_previously_was; end

    sig { returns(T.nilable(::String)) }
    def git_revision_was; end

    sig { void }
    def git_revision_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def ip_address; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def ip_address=(value); end

    sig { returns(T::Boolean) }
    def ip_address?; end

    sig { returns(T.nilable(::String)) }
    def ip_address_before_last_save; end

    sig { returns(T.untyped) }
    def ip_address_before_type_cast; end

    sig { returns(T::Boolean) }
    def ip_address_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_address_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_address_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def ip_address_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_address_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def ip_address_previous_change; end

    sig { returns(T::Boolean) }
    def ip_address_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def ip_address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def ip_address_was; end

    sig { void }
    def ip_address_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def owner_id=(value); end

    sig { returns(T::Boolean) }
    def owner_id?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_before_last_save; end

    sig { returns(T.untyped) }
    def owner_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def owner_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def owner_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def owner_id_previous_change; end

    sig { returns(T::Boolean) }
    def owner_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def owner_id_was; end

    sig { void }
    def owner_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at=(value); end

    sig { returns(T::Boolean) }
    def queued_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at_before_last_save; end

    sig { returns(T.untyped) }
    def queued_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def queued_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def queued_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def queued_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def queued_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def queued_at_previous_change; end

    sig { returns(T::Boolean) }
    def queued_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def queued_at_was; end

    sig { void }
    def queued_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def records_added; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def records_added=(value); end

    sig { returns(T::Boolean) }
    def records_added?; end

    sig { returns(T.nilable(::Integer)) }
    def records_added_before_last_save; end

    sig { returns(T.untyped) }
    def records_added_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_added_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_added_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_added_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def records_added_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_added_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_added_previous_change; end

    sig { returns(T::Boolean) }
    def records_added_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_added_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_added_was; end

    sig { void }
    def records_added_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def records_changed; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def records_changed=(value); end

    sig { returns(T::Boolean) }
    def records_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_changed_before_last_save; end

    sig { returns(T.untyped) }
    def records_changed_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_changed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_changed_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_changed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def records_changed_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_changed_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_changed_previous_change; end

    sig { returns(T::Boolean) }
    def records_changed_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_changed_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_changed_was; end

    sig { void }
    def records_changed_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def records_removed; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def records_removed=(value); end

    sig { returns(T::Boolean) }
    def records_removed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_removed_before_last_save; end

    sig { returns(T.untyped) }
    def records_removed_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_removed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_removed_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_removed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def records_removed_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_removed_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_removed_previous_change; end

    sig { returns(T::Boolean) }
    def records_removed_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_removed_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_removed_was; end

    sig { void }
    def records_removed_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def records_unchanged; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def records_unchanged=(value); end

    sig { returns(T::Boolean) }
    def records_unchanged?; end

    sig { returns(T.nilable(::Integer)) }
    def records_unchanged_before_last_save; end

    sig { returns(T.untyped) }
    def records_unchanged_before_type_cast; end

    sig { returns(T::Boolean) }
    def records_unchanged_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_unchanged_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_unchanged_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def records_unchanged_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_unchanged_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def records_unchanged_previous_change; end

    sig { returns(T::Boolean) }
    def records_unchanged_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def records_unchanged_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def records_unchanged_was; end

    sig { void }
    def records_unchanged_will_change!; end

    sig { void }
    def restore_auto!; end

    sig { void }
    def restore_connection_logs_count!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_docker_image!; end

    sig { void }
    def restore_finished_at!; end

    sig { void }
    def restore_git_revision!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_ip_address!; end

    sig { void }
    def restore_owner_id!; end

    sig { void }
    def restore_queued_at!; end

    sig { void }
    def restore_records_added!; end

    sig { void }
    def restore_records_changed!; end

    sig { void }
    def restore_records_removed!; end

    sig { void }
    def restore_records_unchanged!; end

    sig { void }
    def restore_scraper_id!; end

    sig { void }
    def restore_started_at!; end

    sig { void }
    def restore_status_code!; end

    sig { void }
    def restore_tables_added!; end

    sig { void }
    def restore_tables_changed!; end

    sig { void }
    def restore_tables_removed!; end

    sig { void }
    def restore_tables_unchanged!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_wall_time!; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_auto; end

    sig { returns(T::Boolean) }
    def saved_change_to_auto?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_connection_logs_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_connection_logs_count?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_docker_image; end

    sig { returns(T::Boolean) }
    def saved_change_to_docker_image?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_finished_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_finished_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_git_revision; end

    sig { returns(T::Boolean) }
    def saved_change_to_git_revision?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_ip_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_ip_address?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_owner_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_owner_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_queued_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_queued_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_records_added; end

    sig { returns(T::Boolean) }
    def saved_change_to_records_added?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_records_changed; end

    sig { returns(T::Boolean) }
    def saved_change_to_records_changed?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_records_removed; end

    sig { returns(T::Boolean) }
    def saved_change_to_records_removed?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_records_unchanged; end

    sig { returns(T::Boolean) }
    def saved_change_to_records_unchanged?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_scraper_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_scraper_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_started_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_started_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_status_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_status_code?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_tables_added; end

    sig { returns(T::Boolean) }
    def saved_change_to_tables_added?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_tables_changed; end

    sig { returns(T::Boolean) }
    def saved_change_to_tables_changed?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_tables_removed; end

    sig { returns(T::Boolean) }
    def saved_change_to_tables_removed?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_tables_unchanged; end

    sig { returns(T::Boolean) }
    def saved_change_to_tables_unchanged?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def saved_change_to_wall_time; end

    sig { returns(T::Boolean) }
    def saved_change_to_wall_time?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def scraper_id=(value); end

    sig { returns(T::Boolean) }
    def scraper_id?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_before_last_save; end

    sig { returns(T.untyped) }
    def scraper_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def scraper_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scraper_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scraper_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scraper_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def scraper_id_previous_change; end

    sig { returns(T::Boolean) }
    def scraper_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def scraper_id_was; end

    sig { void }
    def scraper_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at=(value); end

    sig { returns(T::Boolean) }
    def started_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_before_last_save; end

    sig { returns(T.untyped) }
    def started_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def started_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def started_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def started_at_previous_change; end

    sig { returns(T::Boolean) }
    def started_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def started_at_was; end

    sig { void }
    def started_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def status_code; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def status_code=(value); end

    sig { returns(T::Boolean) }
    def status_code?; end

    sig { returns(T.nilable(::Integer)) }
    def status_code_before_last_save; end

    sig { returns(T.untyped) }
    def status_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_code_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_code_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def status_code_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def status_code_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def status_code_previous_change; end

    sig { returns(T::Boolean) }
    def status_code_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def status_code_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def status_code_was; end

    sig { void }
    def status_code_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def tables_added; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def tables_added=(value); end

    sig { returns(T::Boolean) }
    def tables_added?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_added_before_last_save; end

    sig { returns(T.untyped) }
    def tables_added_before_type_cast; end

    sig { returns(T::Boolean) }
    def tables_added_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_added_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_added_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tables_added_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_added_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_added_previous_change; end

    sig { returns(T::Boolean) }
    def tables_added_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_added_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def tables_added_was; end

    sig { void }
    def tables_added_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def tables_changed; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def tables_changed=(value); end

    sig { returns(T::Boolean) }
    def tables_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_changed_before_last_save; end

    sig { returns(T.untyped) }
    def tables_changed_before_type_cast; end

    sig { returns(T::Boolean) }
    def tables_changed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_changed_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_changed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tables_changed_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_changed_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_changed_previous_change; end

    sig { returns(T::Boolean) }
    def tables_changed_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_changed_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def tables_changed_was; end

    sig { void }
    def tables_changed_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def tables_removed; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def tables_removed=(value); end

    sig { returns(T::Boolean) }
    def tables_removed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_removed_before_last_save; end

    sig { returns(T.untyped) }
    def tables_removed_before_type_cast; end

    sig { returns(T::Boolean) }
    def tables_removed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_removed_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_removed_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tables_removed_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_removed_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_removed_previous_change; end

    sig { returns(T::Boolean) }
    def tables_removed_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_removed_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def tables_removed_was; end

    sig { void }
    def tables_removed_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def tables_unchanged; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def tables_unchanged=(value); end

    sig { returns(T::Boolean) }
    def tables_unchanged?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_unchanged_before_last_save; end

    sig { returns(T.untyped) }
    def tables_unchanged_before_type_cast; end

    sig { returns(T::Boolean) }
    def tables_unchanged_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_unchanged_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_unchanged_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tables_unchanged_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_unchanged_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tables_unchanged_previous_change; end

    sig { returns(T::Boolean) }
    def tables_unchanged_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def tables_unchanged_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def tables_unchanged_was; end

    sig { void }
    def tables_unchanged_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Float) }
    def wall_time; end

    sig { params(value: ::Float).returns(::Float) }
    def wall_time=(value); end

    sig { returns(T::Boolean) }
    def wall_time?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_before_last_save; end

    sig { returns(T.untyped) }
    def wall_time_before_type_cast; end

    sig { returns(T::Boolean) }
    def wall_time_came_from_user?; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def wall_time_change; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def wall_time_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def wall_time_changed?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_in_database; end

    sig { returns(T.nilable([::Float, ::Float])) }
    def wall_time_previous_change; end

    sig { returns(T::Boolean) }
    def wall_time_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def wall_time_was; end

    sig { void }
    def wall_time_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_auto?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_connection_logs_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_docker_image?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_finished_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_git_revision?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ip_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_owner_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_queued_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_records_added?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_records_changed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_records_removed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_records_unchanged?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scraper_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_started_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tables_added?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tables_changed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tables_removed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tables_unchanged?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wall_time?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finished_successfully(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def running(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Run } }

    sig { returns(T::Array[::Run]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Run } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Run } }

    sig do
      params(
        records: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Run, Integer, String, T::Enumerable[T.any(::Run, Integer, String, T::Enumerable[::Run])])
      ).returns(T::Array[::Run])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Run, Integer, String, T::Enumerable[T.any(::Run, Integer, String, T::Enumerable[::Run])])
      ).returns(T::Array[::Run])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Run]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Run, T::Enumerable[T.any(::Run, T::Enumerable[::Run])])
      ).returns(T::Array[::Run])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Run]) }
    def target; end

    sig { returns(T::Array[::Run]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Run } }

    sig { returns(T::Array[::Run]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Run } }

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
