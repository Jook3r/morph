# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faye` gem.
# Please instead update this file by running `bin/tapioca gem faye`.

# source://faye-1.4.0/lib/faye.rb:16
module Faye
  class << self
    # source://faye-1.4.0/lib/faye.rb:92
    def async_each(list, iterator, callback); end

    # source://faye-1.4.0/lib/faye.rb:64
    def client_id_from_messages(messages); end

    # source://faye-1.4.0/lib/faye.rb:69
    def copy_object(object); end

    # source://faye-1.4.0/lib/faye.rb:56
    def ensure_reactor_running!; end

    # Returns the value of attribute logger.
    #
    # source://faye-1.4.0/lib/faye.rb:53
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://faye-1.4.0/lib/faye.rb:53
    def logger=(_arg0); end

    # source://faye-1.4.0/lib/faye.rb:60
    def random(*args); end

    # source://faye-1.4.0/lib/faye.rb:84
    def to_json(value); end
  end
end

# source://faye-1.4.0/lib/faye.rb:46
Faye::BAYEUX_VERSION = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye.rb:48
Faye::CONNECTION_TYPES = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:2
class Faye::Channel
  include ::WebSocket::Driver::EventEmitter
  include ::Faye::Publisher

  # @return [Channel] a new instance of Channel
  #
  # source://faye-1.4.0/lib/faye/protocol/channel.rb:7
  def initialize(name); end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:12
  def <<(message); end

  # Returns the value of attribute name.
  #
  # source://faye-1.4.0/lib/faye/protocol/channel.rb:5
  def name; end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/protocol/channel.rb:16
  def unused?; end

  class << self
    # source://faye-1.4.0/lib/faye/protocol/channel.rb:30
    def expand(name); end

    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/protocol/channel.rb:61
    def meta?(name); end

    # source://faye-1.4.0/lib/faye/protocol/channel.rb:52
    def parse(name); end

    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/protocol/channel.rb:66
    def service?(name); end

    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/protocol/channel.rb:71
    def subscribable?(name); end

    # source://faye-1.4.0/lib/faye/protocol/channel.rb:57
    def unparse(segments); end

    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/protocol/channel.rb:47
    def valid?(name); end
  end
end

# source://faye-1.4.0/lib/faye/protocol/channel.rb:21
Faye::Channel::CONNECT = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:24
Faye::Channel::DISCONNECT = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:20
Faye::Channel::HANDSHAKE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:26
Faye::Channel::META = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:27
Faye::Channel::SERVICE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:22
Faye::Channel::SUBSCRIBE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/channel.rb:77
class Faye::Channel::Set
  # @return [Set] a new instance of Set
  #
  # source://faye-1.4.0/lib/faye/protocol/channel.rb:78
  def initialize; end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:113
  def distribute_message(message); end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/protocol/channel.rb:90
  def has_subscription?(name); end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:82
  def keys; end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:86
  def remove(name); end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:94
  def subscribe(names, subscription); end

  # source://faye-1.4.0/lib/faye/protocol/channel.rb:101
  def unsubscribe(name, subscription); end
end

# source://faye-1.4.0/lib/faye/protocol/channel.rb:23
Faye::Channel::UNSUBSCRIBE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/client.rb:2
class Faye::Client
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable
  include ::WebSocket::Driver::EventEmitter
  include ::Faye::Publisher
  include ::Faye::Logging
  include ::Faye::Extensible
  extend ::Forwardable

  # @return [Client] a new instance of Client
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:23
  def initialize(endpoint = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://RUBY_ROOT/forwardable.rb:226
  def add_websocket_extension(*args, &block); end

  # Request                              Response
  # MUST include:  * channel             MUST include:  * channel
  #                * clientId                           * successful
  #                * connectionType                     * clientId
  # MAY include:   * ext                 MAY include:   * error
  #                * id                                 * advice
  #                                                     * ext
  #                                                     * id
  #                                                     * timestamp
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:109
  def connect(&block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def disable(*args, &block); end

  # Request                              Response
  # MUST include:  * channel             MUST include:  * channel
  #                * clientId                           * successful
  # MAY include:   * ext                                * clientId
  #                * id                  MAY include:   * error
  #                                                     * ext
  #                                                     * id
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:144
  def disconnect; end

  # Request
  # MUST include:  * channel
  #                * version
  #                * supportedConnectionTypes
  # MAY include:   * minimumVersion
  #                * ext
  #                * id
  #
  # Success Response                             Failed Response
  # MUST include:  * channel                     MUST include:  * channel
  #                * version                                    * successful
  #                * supportedConnectionTypes                   * error
  #                * clientId                    MAY include:   * supportedConnectionTypes
  #                * successful                                 * advice
  # MAY include:   * minimumVersion                             * version
  #                * advice                                     * minimumVersion
  #                * ext                                        * ext
  #                * id                                         * id
  #                * authSuccessful
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:65
  def handshake(&block); end

  # Request                              Response
  # MUST include:  * channel             MUST include:  * channel
  #                * data                               * successful
  # MAY include:   * clientId            MAY include:   * id
  #                * id                                 * error
  #                * ext                                * ext
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:260
  def publish(channel, data, options = T.unsafe(nil)); end

  # source://RUBY_ROOT/forwardable.rb:226
  def set_header(*args, &block); end

  # Request                              Response
  # MUST include:  * channel             MUST include:  * channel
  #                * clientId                           * successful
  #                * subscription                       * clientId
  # MAY include:   * ext                                * subscription
  #                * id                  MAY include:   * error
  #                                                     * advice
  #                                                     * ext
  #                                                     * id
  #                                                     * timestamp
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:180
  def subscribe(channel, force = T.unsafe(nil), &block); end

  # Request                              Response
  # MUST include:  * channel             MUST include:  * channel
  #                * clientId                           * successful
  #                * subscription                       * clientId
  # MAY include:   * ext                                * subscription
  #                * id                  MAY include:   * error
  #                                                     * advice
  #                                                     * ext
  #                                                     * id
  #                                                     * timestamp
  #
  # source://faye-1.4.0/lib/faye/protocol/client.rb:227
  def unsubscribe(channel, subscription = T.unsafe(nil), &block); end

  private

  # source://faye-1.4.0/lib/faye/protocol/client.rb:337
  def cycle_connection; end

  # source://faye-1.4.0/lib/faye/protocol/client.rb:331
  def deliver_message(message); end

  # source://faye-1.4.0/lib/faye/protocol/client.rb:299
  def generate_message_id; end

  # source://faye-1.4.0/lib/faye/protocol/client.rb:320
  def handle_advice(advice); end

  # source://faye-1.4.0/lib/faye/protocol/client.rb:305
  def receive_message(message); end

  # source://faye-1.4.0/lib/faye/protocol/client.rb:285
  def send_message(message, options, &callback); end
end

# source://faye-1.4.0/lib/faye/protocol/client.rb:11
Faye::Client::CONNECTED = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/protocol/client.rb:10
Faye::Client::CONNECTING = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/protocol/client.rb:18
Faye::Client::CONNECTION_TIMEOUT = T.let(T.unsafe(nil), Float)

# source://faye-1.4.0/lib/faye/protocol/client.rb:12
Faye::Client::DISCONNECTED = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/protocol/client.rb:14
Faye::Client::HANDSHAKE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/client.rb:16
Faye::Client::NONE = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/client.rb:15
Faye::Client::RETRY = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/protocol/client.rb:9
Faye::Client::UNCONNECTED = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/mixins/deferrable.rb:2
module Faye::Deferrable
  include ::EventMachine::Deferrable

  # source://faye-1.4.0/lib/faye/mixins/deferrable.rb:6
  def set_deferred_status(status, *args); end
end

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:2
class Faye::Dispatcher
  include ::WebSocket::Driver::EventEmitter
  include ::Faye::Publisher
  include ::Faye::Logging
  extend ::Forwardable

  # @return [Dispatcher] a new instance of Dispatcher
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:22
  def initialize(client, endpoint, options); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:59
  def add_websocket_extension(extension); end

  # Returns the value of attribute client_id.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:18
  def client_id; end

  # Sets the attribute client_id
  #
  # @param value the value to set the attribute client_id to.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:18
  def client_id=(_arg0); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:71
  def close; end

  # source://RUBY_ROOT/forwardable.rb:226
  def connection_type(*args, &block); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:77
  def connection_types; end

  # Returns the value of attribute cookies.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def cookies; end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:63
  def disable(feature); end

  # Returns the value of attribute endpoint.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def endpoint; end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:55
  def endpoint_for(connection_type); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:141
  def handle_error(message, immediate = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:128
  def handle_response(reply); end

  # Returns the value of attribute headers.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def headers; end

  # Returns the value of attribute max_request_size.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:20
  def max_request_size; end

  # Returns the value of attribute proxy.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def proxy; end

  # Returns the value of attribute retry.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def retry; end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:81
  def select_transport(transport_types); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:92
  def send_message(message, timeout, options = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:67
  def set_header(name, value); end

  # Returns the value of attribute timeout.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:18
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:18
  def timeout=(_arg0); end

  # Returns the value of attribute tls.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:19
  def tls; end

  # Returns the value of attribute transports.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:20
  def transports; end

  # Returns the value of attribute ws_extensions.
  #
  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:20
  def ws_extensions; end

  private

  # source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:106
  def send_envelope(envelope); end
end

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:8
Faye::Dispatcher::DEFAULT_RETRY = T.let(T.unsafe(nil), Float)

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:11
Faye::Dispatcher::DOWN = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:4
class Faye::Dispatcher::Envelope < ::Struct; end

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:7
Faye::Dispatcher::MAX_REQUEST_SIZE = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/protocol/dispatcher.rb:10
Faye::Dispatcher::UP = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/engines/proxy.rb:2
module Faye::Engine
  class << self
    # source://faye-1.4.0/lib/faye/engines/proxy.rb:13
    def ensure_reactor_running!; end

    # source://faye-1.4.0/lib/faye/engines/proxy.rb:18
    def get(options); end

    # source://faye-1.4.0/lib/faye/engines/proxy.rb:22
    def random(bitlength = T.unsafe(nil)); end
  end
end

# source://faye-1.4.0/lib/faye/engines/connection.rb:4
class Faye::Engine::Connection
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable
  include ::Faye::Timeouts

  # @return [Connection] a new instance of Connection
  #
  # source://faye-1.4.0/lib/faye/engines/connection.rb:10
  def initialize(engine, id, options = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/engines/connection.rb:24
  def connect(options, &block); end

  # source://faye-1.4.0/lib/faye/engines/connection.rb:17
  def deliver(message); end

  # source://faye-1.4.0/lib/faye/engines/connection.rb:35
  def flush; end

  # Returns the value of attribute socket.
  #
  # source://faye-1.4.0/lib/faye/engines/connection.rb:8
  def socket; end

  # Sets the attribute socket
  #
  # @param value the value to set the attribute socket to.
  #
  # source://faye-1.4.0/lib/faye/engines/connection.rb:8
  def socket=(_arg0); end

  private

  # source://faye-1.4.0/lib/faye/engines/connection.rb:52
  def begin_connection_timeout(timeout); end

  # source://faye-1.4.0/lib/faye/engines/connection.rb:47
  def begin_delivery_timeout; end
end

# source://faye-1.4.0/lib/faye/engines/proxy.rb:8
Faye::Engine::ID_LENGTH = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/engines/proxy.rb:6
Faye::Engine::INTERVAL = T.let(T.unsafe(nil), Float)

# source://faye-1.4.0/lib/faye/engines/proxy.rb:5
Faye::Engine::MAX_DELAY = T.let(T.unsafe(nil), Float)

# source://faye-1.4.0/lib/faye/engines/proxy.rb:4
Faye::Engine::METHODS = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/engines/memory.rb:4
class Faye::Engine::Memory
  include ::Faye::Timeouts

  # @return [Memory] a new instance of Memory
  #
  # source://faye-1.4.0/lib/faye/engines/memory.rb:11
  def initialize(server, options); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:53
  def client_exists(client_id, &callback); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:29
  def create_client(&callback); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:37
  def destroy_client(client_id, &callback); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:17
  def disconnect; end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:113
  def empty_queue(client_id); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:57
  def ping(client_id); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:93
  def publish(message, channels); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:22
  def reset; end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:65
  def subscribe(client_id, channel, &callback); end

  # source://faye-1.4.0/lib/faye/engines/memory.rb:77
  def unsubscribe(client_id, channel, &callback); end

  class << self
    # source://faye-1.4.0/lib/faye/engines/memory.rb:7
    def create(server, options); end
  end
end

# source://faye-1.4.0/lib/faye/engines/proxy.rb:30
class Faye::Engine::Proxy
  include ::WebSocket::Driver::EventEmitter
  include ::Faye::Publisher
  include ::Faye::Logging
  extend ::Forwardable

  # @return [Proxy] a new instance of Proxy
  #
  # source://faye-1.4.0/lib/faye/engines/proxy.rb:39
  def initialize(options); end

  # source://RUBY_ROOT/forwardable.rb:226
  def client_exists(*args, &block); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:110
  def close; end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:77
  def close_connection(client_id); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:57
  def connect(client_id, options = T.unsafe(nil), &callback); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:69
  def connection(client_id, create); end

  # source://RUBY_ROOT/forwardable.rb:226
  def create_client(*args, &block); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:90
  def deliver(client_id, messages); end

  # source://RUBY_ROOT/forwardable.rb:226
  def destroy_client(*args, &block); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:115
  def disconnect; end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:101
  def flush_connection(client_id, close = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:97
  def generate_id; end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/engines/proxy.rb:65
  def has_connection?(client_id); end

  # Returns the value of attribute interval.
  #
  # source://faye-1.4.0/lib/faye/engines/proxy.rb:34
  def interval; end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:85
  def open_socket(client_id, socket); end

  # source://RUBY_ROOT/forwardable.rb:226
  def ping(*args, &block); end

  # source://faye-1.4.0/lib/faye/engines/proxy.rb:119
  def publish(message); end

  # source://RUBY_ROOT/forwardable.rb:226
  def subscribe(*args, &block); end

  # Returns the value of attribute timeout.
  #
  # source://faye-1.4.0/lib/faye/engines/proxy.rb:34
  def timeout; end

  # source://RUBY_ROOT/forwardable.rb:226
  def unsubscribe(*args, &block); end
end

# source://faye-1.4.0/lib/faye/engines/proxy.rb:7
Faye::Engine::TIMEOUT = T.let(T.unsafe(nil), Float)

# source://faye-1.4.0/lib/faye/error.rb:2
class Faye::Error
  # @return [Error] a new instance of Error
  #
  # source://faye-1.4.0/lib/faye/error.rb:23
  def initialize(code, params, message); end

  # Returns the value of attribute code.
  #
  # source://faye-1.4.0/lib/faye/error.rb:21
  def code; end

  # Returns the value of attribute message.
  #
  # source://faye-1.4.0/lib/faye/error.rb:21
  def message; end

  # Returns the value of attribute params.
  #
  # source://faye-1.4.0/lib/faye/error.rb:21
  def params; end

  # source://faye-1.4.0/lib/faye/error.rb:29
  def to_s; end

  class << self
    # source://faye-1.4.0/lib/faye/error.rb:4
    def method_missing(type, *args); end

    # source://faye-1.4.0/lib/faye/error.rb:9
    def parse(message); end
  end
end

# source://faye-1.4.0/lib/faye/error.rb:37
Faye::Error::BAD_REQUEST = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:40
Faye::Error::CHANNEL_FORBIDDEN = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:42
Faye::Error::CHANNEL_INVALID = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:41
Faye::Error::CHANNEL_UNKNOWN = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:38
Faye::Error::CLIENT_UNKNOWN = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:35
Faye::Error::CONNTYPE_MISMATCH = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:36
Faye::Error::EXT_MISMATCH = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:43
Faye::Error::EXT_UNKNOWN = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:39
Faye::Error::PARAMETER_MISSING = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:44
Faye::Error::PUBLISH_FAILED = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/error.rb:45
Faye::Error::SERVER_ERROR = T.let(T.unsafe(nil), Array)

# http://code.google.com/p/cometd/wiki/BayeuxCodes
#
# source://faye-1.4.0/lib/faye/error.rb:34
Faye::Error::VERSION_MISMATCH = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/protocol/extensible.rb:2
module Faye::Extensible
  include ::Faye::Logging

  # source://faye-1.4.0/lib/faye/protocol/extensible.rb:5
  def add_extension(extension); end

  # source://faye-1.4.0/lib/faye/protocol/extensible.rb:20
  def pipe_through_extensions(stage, message, env, &callback); end

  # source://faye-1.4.0/lib/faye/protocol/extensible.rb:11
  def remove_extension(extension); end
end

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:2
module Faye::Grammar
  class << self
    # source://faye-1.4.0/lib/faye/protocol/grammar.rb:9
    def choice(*list); end

    # source://faye-1.4.0/lib/faye/protocol/grammar.rb:17
    def oneormore(*pattern); end

    # source://faye-1.4.0/lib/faye/protocol/grammar.rb:13
    def repeat(*pattern); end

    # source://faye-1.4.0/lib/faye/protocol/grammar.rb:4
    def rule(&block); end

    # source://faye-1.4.0/lib/faye/protocol/grammar.rb:21
    def string(item); end
  end
end

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:28
Faye::Grammar::ALPHA = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:30
Faye::Grammar::ALPHANUM = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:38
Faye::Grammar::CHANNEL_NAME = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:41
Faye::Grammar::CHANNEL_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:36
Faye::Grammar::CHANNEL_SEGMENT = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:37
Faye::Grammar::CHANNEL_SEGMENTS = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:46
Faye::Grammar::CLIENT_ID = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:29
Faye::Grammar::DIGIT = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:53
Faye::Grammar::ERROR = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:51
Faye::Grammar::ERROR_ARGS = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:52
Faye::Grammar::ERROR_CODE = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:50
Faye::Grammar::ERROR_MESSAGE = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:48
Faye::Grammar::ID = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:34
Faye::Grammar::INTEGER = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:26
Faye::Grammar::LOWALPHA = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:31
Faye::Grammar::MARK = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:32
Faye::Grammar::STRING = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:33
Faye::Grammar::TOKEN = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:27
Faye::Grammar::UPALPHA = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:44
Faye::Grammar::VERSION = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:43
Faye::Grammar::VERSION_ELEMENT = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/grammar.rb:40
Faye::Grammar::WILD_CARD = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye.rb:47
Faye::JSONP_CALLBACK = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/mixins/logging.rb:2
module Faye::Logging
  # source://faye-1.4.0/lib/faye/mixins/logging.rb:13
  def debug(*args); end

  # source://faye-1.4.0/lib/faye/mixins/logging.rb:13
  def error(*args); end

  # source://faye-1.4.0/lib/faye/mixins/logging.rb:13
  def fatal(*args); end

  # source://faye-1.4.0/lib/faye/mixins/logging.rb:13
  def info(*args); end

  # source://faye-1.4.0/lib/faye/mixins/logging.rb:13
  def warn(*args); end

  private

  # source://faye-1.4.0/lib/faye/mixins/logging.rb:18
  def write_log(message_args, level); end
end

# source://faye-1.4.0/lib/faye/mixins/logging.rb:4
Faye::Logging::LOG_LEVELS = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye.rb:50
Faye::MANDATORY_CONNECTION_TYPES = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/util/namespace.rb:2
class Faye::Namespace
  extend ::Forwardable

  # @return [Namespace] a new instance of Namespace
  #
  # source://faye-1.4.0/lib/faye/util/namespace.rb:8
  def initialize; end

  # source://RUBY_ROOT/forwardable.rb:226
  def exists?(*args, &block); end

  # source://faye-1.4.0/lib/faye/util/namespace.rb:12
  def generate; end

  # source://RUBY_ROOT/forwardable.rb:226
  def release(*args, &block); end
end

# source://faye-1.4.0/lib/faye/protocol/publication.rb:2
class Faye::Publication
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable
end

# source://faye-1.4.0/lib/faye/mixins/publisher.rb:2
module Faye::Publisher
  include ::WebSocket::Driver::EventEmitter

  # source://websocket-driver-0.7.5/lib/websocket/driver/event_emitter.rb:9
  def bind(event, callable = T.unsafe(nil), &block); end

  # source://websocket-driver-0.7.5/lib/websocket/driver/event_emitter.rb:37
  def trigger(event, *args); end

  # source://faye-1.4.0/lib/faye/mixins/publisher.rb:9
  def unbind(event, &listener); end
end

# source://faye-1.4.0/lib/faye.rb:19
Faye::ROOT = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:2
class Faye::RackAdapter
  include ::Faye::Logging
  extend ::Forwardable

  # @return [RackAdapter] a new instance of RackAdapter
  #
  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:25
  def initialize(app = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:55
  def add_extension(extension); end

  # source://RUBY_ROOT/forwardable.rb:226
  def add_listener(*args, &block); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:63
  def add_websocket_extension(extension); end

  # source://RUBY_ROOT/forwardable.rb:226
  def bind(*args, &block); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:75
  def call(env); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:67
  def close; end

  # source://RUBY_ROOT/forwardable.rb:226
  def emit(*args, &block); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:71
  def get_client; end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:51
  def listen(*args); end

  # source://RUBY_ROOT/forwardable.rb:226
  def listener_count(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def listeners(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def on(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def remove_all_listeners(*args, &block); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:59
  def remove_extension(extension); end

  # source://RUBY_ROOT/forwardable.rb:226
  def remove_listener(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def trigger(*args, &block); end

  # source://RUBY_ROOT/forwardable.rb:226
  def unbind(*args, &block); end

  private

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:259
  def format_request(request); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:225
  def handle_eventsource(request); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:240
  def handle_options(request); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:100
  def handle_request(request); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:193
  def handle_websocket(request); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:172
  def jsonp_escape(json); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:156
  def message_from_request(request); end

  # @raise [ArgumentError]
  #
  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:253
  def parse_json(json); end

  # source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:176
  def send_response(response, hijack, callback); end
end

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:9
Faye::RackAdapter::ASYNC_RESPONSE = T.let(T.unsafe(nil), Array)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:11
Faye::RackAdapter::DEFAULT_ENDPOINT = T.let(T.unsafe(nil), String)

# This header is passed by Rack::Proxy during testing. Rack::Proxy seems to
# set content-length for you, and setting it in here really slows the tests
# down. Better suggestions welcome.
#
# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:23
Faye::RackAdapter::HTTP_X_NO_CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:12
Faye::RackAdapter::SCRIPT_PATH = T.let(T.unsafe(nil), String)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:14
Faye::RackAdapter::TYPE_JSON = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:15
Faye::RackAdapter::TYPE_SCRIPT = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:16
Faye::RackAdapter::TYPE_TEXT = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye/adapters/rack_adapter.rb:18
Faye::RackAdapter::VALID_JSONP_CALLBACK = T.let(T.unsafe(nil), Regexp)

# source://faye-1.4.0/lib/faye/protocol/scheduler.rb:2
class Faye::Scheduler
  # @return [Scheduler] a new instance of Scheduler
  #
  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:4
  def initialize(message, options); end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:39
  def abort!; end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:18
  def deliverable?; end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:36
  def fail!; end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:10
  def interval; end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:29
  def send!; end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:33
  def succeed!; end

  # source://faye-1.4.0/lib/faye/protocol/scheduler.rb:14
  def timeout; end
end

# source://faye-1.4.0/lib/faye/protocol/server.rb:2
class Faye::Server
  include ::Faye::Logging
  include ::Faye::Extensible

  # @return [Server] a new instance of Server
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:11
  def initialize(options = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:134
  def advize(response, connection_type); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:20
  def close; end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:29
  def close_socket(client_id, close = T.unsafe(nil)); end

  # MUST contain  * clientId
  #               * connectionType
  # MAY contain   * ext
  #               * id
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:190
  def connect(message, local = T.unsafe(nil), &callback); end

  # MUST contain  * clientId
  # MAY contain   * ext
  #               * id
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:226
  def disconnect(message, local = T.unsafe(nil), &callback); end

  # Returns the value of attribute engine.
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:9
  def engine; end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:82
  def handle(message, local = T.unsafe(nil), &callback); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:107
  def handle_meta(message, local, &callback); end

  # MUST contain  * version
  #               * supportedConnectionTypes
  # MAY contain   * minimumVersion
  #               * ext
  #               * id
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:160
  def handshake(message, local = T.unsafe(nil), &callback); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:70
  def make_response(message); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:124
  def method_for(message); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:24
  def open_socket(client_id, socket, env); end

  # source://faye-1.4.0/lib/faye/protocol/server.rb:33
  def process(messages, env, &callback); end

  # MUST contain  * clientId
  #               * subscription
  # MAY contain   * ext
  #               * id
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:246
  def subscribe(message, local = T.unsafe(nil), &callback); end

  # MUST contain  * clientId
  #               * subscription
  # MAY contain   * ext
  #               * id
  #
  # source://faye-1.4.0/lib/faye/protocol/server.rb:276
  def unsubscribe(message, local = T.unsafe(nil), &callback); end
end

# source://faye-1.4.0/lib/faye/protocol/socket.rb:4
class Faye::Server::Socket
  # @return [Socket] a new instance of Socket
  #
  # source://faye-1.4.0/lib/faye/protocol/socket.rb:5
  def initialize(server, socket, env); end

  # source://faye-1.4.0/lib/faye/protocol/socket.rb:17
  def close; end

  # source://faye-1.4.0/lib/faye/protocol/socket.rb:11
  def send(message); end
end

# source://faye-1.4.0/lib/faye/adapters/static_server.rb:2
class Faye::StaticServer
  # @return [StaticServer] a new instance of StaticServer
  #
  # source://faye-1.4.0/lib/faye/adapters/static_server.rb:4
  def initialize(directory, path_regex); end

  # source://faye-1.4.0/lib/faye/adapters/static_server.rb:15
  def =~(pathname); end

  # source://faye-1.4.0/lib/faye/adapters/static_server.rb:19
  def call(env); end

  # source://faye-1.4.0/lib/faye/adapters/static_server.rb:11
  def map(request_path, filename); end
end

# source://faye-1.4.0/lib/faye/protocol/subscription.rb:2
class Faye::Subscription
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable

  # @return [Subscription] a new instance of Subscription
  #
  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:5
  def initialize(client, channels, callback); end

  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:17
  def call(*args); end

  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:28
  def cancel; end

  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:24
  def to_proc; end

  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:34
  def unsubscribe; end

  # source://faye-1.4.0/lib/faye/protocol/subscription.rb:12
  def with_channel(&callback); end
end

# source://faye-1.4.0/lib/faye/mixins/timeouts.rb:2
module Faye::Timeouts
  # source://faye-1.4.0/lib/faye/mixins/timeouts.rb:3
  def add_timeout(name, delay, &block); end

  # source://faye-1.4.0/lib/faye/mixins/timeouts.rb:21
  def remove_all_timeouts; end

  # source://faye-1.4.0/lib/faye/mixins/timeouts.rb:13
  def remove_timeout(name); end
end

# source://faye-1.4.0/lib/faye/transport/transport.rb:2
class Faye::Transport
  include ::Faye::Logging
  include ::WebSocket::Driver::EventEmitter
  include ::Faye::Publisher
  include ::Faye::Timeouts

  # @return [Transport] a new instance of Transport
  #
  # source://faye-1.4.0/lib/faye/transport/transport.rb:12
  def initialize(dispatcher, endpoint); end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/transport/transport.rb:24
  def batching?; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:28
  def close; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:35
  def connection_type; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:31
  def encode(messages); end

  # Returns the value of attribute endpoint.
  #
  # source://faye-1.4.0/lib/faye/transport/transport.rb:10
  def endpoint; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:39
  def send_message(message); end

  private

  # source://faye-1.4.0/lib/faye/transport/transport.rb:75
  def flush; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:88
  def flush_large_batch; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:118
  def get_cookies; end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:110
  def handle_error(messages, immediate = T.unsafe(nil)); end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:64
  def publish(delay); end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:99
  def receive(replies); end

  # source://faye-1.4.0/lib/faye/transport/transport.rb:122
  def store_cookies(set_cookie); end

  class << self
    # Returns the value of attribute connection_type.
    #
    # source://faye-1.4.0/lib/faye/transport/transport.rb:131
    def connection_type; end

    # Sets the attribute connection_type
    #
    # @param value the value to set the attribute connection_type to.
    #
    # source://faye-1.4.0/lib/faye/transport/transport.rb:131
    def connection_type=(_arg0); end

    # source://faye-1.4.0/lib/faye/transport/transport.rb:167
    def connection_types; end

    # source://faye-1.4.0/lib/faye/transport/transport.rb:133
    def get(dispatcher, allowed, disabled, &callback); end

    # source://faye-1.4.0/lib/faye/transport/transport.rb:162
    def register(type, klass); end
  end
end

# source://faye-1.4.0/lib/faye/transport/transport.rb:8
Faye::Transport::DEFAULT_PORTS = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye/transport/http.rb:3
class Faye::Transport::Http < ::Faye::Transport
  # source://faye-1.4.0/lib/faye/transport/http.rb:8
  def encode(messages); end

  # source://faye-1.4.0/lib/faye/transport/http.rb:12
  def request(messages); end

  private

  # source://faye-1.4.0/lib/faye/transport/http.rb:31
  def build_params(content); end

  # source://faye-1.4.0/lib/faye/transport/http.rb:49
  def create_request(params); end

  # source://faye-1.4.0/lib/faye/transport/http.rb:67
  def handle_response(messages, response); end

  class << self
    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/transport/http.rb:4
    def usable?(dispatcher, endpoint, &callback); end
  end
end

# source://faye-1.4.0/lib/faye/transport/local.rb:3
class Faye::Transport::Local < ::Faye::Transport
  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/transport/local.rb:8
  def batching?; end

  # source://faye-1.4.0/lib/faye/transport/local.rb:12
  def request(messages); end

  class << self
    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/transport/local.rb:4
    def usable?(dispatcher, endpoint, &callback); end
  end
end

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:3
class Faye::Transport::WebSocket < ::Faye::Transport
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:32
  def batching?; end

  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:124
  def close; end

  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:58
  def connect; end

  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:42
  def request(messages); end

  # @return [Boolean]
  #
  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:36
  def usable?(&callback); end

  class << self
    # source://faye-1.4.0/lib/faye/transport/web_socket.rb:27
    def create(dispatcher, endpoint); end

    # @return [Boolean]
    #
    # source://faye-1.4.0/lib/faye/transport/web_socket.rb:23
    def usable?(dispatcher, endpoint, &callback); end
  end
end

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:6
Faye::Transport::WebSocket::CONNECTED = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:5
Faye::Transport::WebSocket::CONNECTING = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:8
Faye::Transport::WebSocket::PROTOCOLS = T.let(T.unsafe(nil), Hash)

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:15
class Faye::Transport::WebSocket::Request
  include ::EventMachine::Deferrable
  include ::Faye::Deferrable

  # source://faye-1.4.0/lib/faye/transport/web_socket.rb:18
  def close; end
end

# source://faye-1.4.0/lib/faye/transport/web_socket.rb:4
Faye::Transport::WebSocket::UNCONNECTED = T.let(T.unsafe(nil), Integer)

# source://faye-1.4.0/lib/faye.rb:17
Faye::VERSION = T.let(T.unsafe(nil), String)
