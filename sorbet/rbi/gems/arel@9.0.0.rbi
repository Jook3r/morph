# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `arel` gem.
# Please instead update this file by running `bin/tapioca gem arel`.

# source://arel-9.0.0/lib/arel/errors.rb:2
module Arel
  class << self
    # source://arel-9.0.0/lib/arel.rb:29
    def sql(raw_sql); end

    # source://arel-9.0.0/lib/arel.rb:33
    def star; end
  end
end

# source://arel-9.0.0/lib/arel/alias_predication.rb:3
module Arel::AliasPredication
  # source://arel-9.0.0/lib/arel/alias_predication.rb:4
  def as(other); end
end

# source://arel-9.0.0/lib/arel/errors.rb:3
class Arel::ArelError < ::StandardError; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:35
Arel::Attribute = Arel::Attributes::Attribute

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:3
module Arel::Attributes
  class << self
    # Factory method to wrap a raw database +column+ to an Arel Attribute.
    #
    # source://arel-9.0.0/lib/arel/attributes.rb:8
    def for(column); end
  end
end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:4
class Arel::Attributes::Attribute < ::Struct
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications
  include ::Arel::Math

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/attributes/attribute.rb:21
  def able_to_type_cast?; end

  # Create a node for lowering this attribute
  #
  # source://arel-9.0.0/lib/arel/attributes/attribute.rb:13
  def lower; end

  # source://arel-9.0.0/lib/arel/attributes/attribute.rb:17
  def type_cast_for_database(value); end
end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:28
class Arel::Attributes::Boolean < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:29
class Arel::Attributes::Decimal < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:30
class Arel::Attributes::Float < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:31
class Arel::Attributes::Integer < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:26
class Arel::Attributes::String < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:27
class Arel::Attributes::Time < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/attributes/attribute.rb:32
class Arel::Attributes::Undefined < ::Arel::Attributes::Attribute; end

# source://arel-9.0.0/lib/arel/collectors/plain_string.rb:3
module Arel::Collectors; end

# source://arel-9.0.0/lib/arel/collectors/bind.rb:5
class Arel::Collectors::Bind
  # @return [Bind] a new instance of Bind
  #
  # source://arel-9.0.0/lib/arel/collectors/bind.rb:6
  def initialize; end

  # source://arel-9.0.0/lib/arel/collectors/bind.rb:10
  def <<(str); end

  # source://arel-9.0.0/lib/arel/collectors/bind.rb:14
  def add_bind(bind); end

  # source://arel-9.0.0/lib/arel/collectors/bind.rb:19
  def value; end
end

# source://arel-9.0.0/lib/arel/collectors/composite.rb:5
class Arel::Collectors::Composite
  # @return [Composite] a new instance of Composite
  #
  # source://arel-9.0.0/lib/arel/collectors/composite.rb:6
  def initialize(left, right); end

  # source://arel-9.0.0/lib/arel/collectors/composite.rb:11
  def <<(str); end

  # source://arel-9.0.0/lib/arel/collectors/composite.rb:17
  def add_bind(bind, &block); end

  # source://arel-9.0.0/lib/arel/collectors/composite.rb:23
  def value; end

  protected

  # Returns the value of attribute left.
  #
  # source://arel-9.0.0/lib/arel/collectors/composite.rb:29
  def left; end

  # Returns the value of attribute right.
  #
  # source://arel-9.0.0/lib/arel/collectors/composite.rb:29
  def right; end
end

# source://arel-9.0.0/lib/arel/collectors/plain_string.rb:4
class Arel::Collectors::PlainString
  # @return [PlainString] a new instance of PlainString
  #
  # source://arel-9.0.0/lib/arel/collectors/plain_string.rb:5
  def initialize; end

  # source://arel-9.0.0/lib/arel/collectors/plain_string.rb:13
  def <<(str); end

  # source://arel-9.0.0/lib/arel/collectors/plain_string.rb:9
  def value; end
end

# source://arel-9.0.0/lib/arel/collectors/sql_string.rb:7
class Arel::Collectors::SQLString < ::Arel::Collectors::PlainString
  # @return [SQLString] a new instance of SQLString
  #
  # source://arel-9.0.0/lib/arel/collectors/sql_string.rb:8
  def initialize(*_arg0); end

  # source://arel-9.0.0/lib/arel/collectors/sql_string.rb:13
  def add_bind(bind); end

  # source://arel-9.0.0/lib/arel/collectors/sql_string.rb:19
  def compile(bvs); end
end

# source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:4
class Arel::Collectors::SubstituteBinds
  # @return [SubstituteBinds] a new instance of SubstituteBinds
  #
  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:5
  def initialize(quoter, delegate_collector); end

  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:10
  def <<(str); end

  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:15
  def add_bind(bind); end

  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:19
  def value; end

  protected

  # Returns the value of attribute delegate.
  #
  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:25
  def delegate; end

  # Returns the value of attribute quoter.
  #
  # source://arel-9.0.0/lib/arel/collectors/substitute_binds.rb:25
  def quoter; end
end

# source://arel-9.0.0/lib/arel/compatibility/wheres.rb:3
module Arel::Compatibility; end

# source://arel-9.0.0/lib/arel/compatibility/wheres.rb:4
class Arel::Compatibility::Wheres
  include ::Enumerable

  # @return [Wheres] a new instance of Wheres
  #
  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:18
  def initialize(engine, collection); end

  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:23
  def each; end
end

# source://arel-9.0.0/lib/arel/compatibility/wheres.rb:7
module Arel::Compatibility::Wheres::Value
  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:13
  def name; end

  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:9
  def value; end

  # Returns the value of attribute visitor.
  #
  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:8
  def visitor; end

  # Sets the attribute visitor
  #
  # @param value the value to set the attribute visitor to.
  #
  # source://arel-9.0.0/lib/arel/compatibility/wheres.rb:8
  def visitor=(_arg0); end
end

# FIXME hopefully we can remove this
#
# source://arel-9.0.0/lib/arel/crud.rb:5
module Arel::Crud
  # source://arel-9.0.0/lib/arel/crud.rb:33
  def compile_delete; end

  # source://arel-9.0.0/lib/arel/crud.rb:23
  def compile_insert(values); end

  # source://arel-9.0.0/lib/arel/crud.rb:6
  def compile_update(values, pk); end

  # source://arel-9.0.0/lib/arel/crud.rb:29
  def create_insert; end
end

# source://arel-9.0.0/lib/arel/delete_manager.rb:3
class Arel::DeleteManager < ::Arel::TreeManager
  # @return [DeleteManager] a new instance of DeleteManager
  #
  # source://arel-9.0.0/lib/arel/delete_manager.rb:4
  def initialize; end

  # source://arel-9.0.0/lib/arel/delete_manager.rb:10
  def from(relation); end

  # source://arel-9.0.0/lib/arel/delete_manager.rb:15
  def take(limit); end

  # source://arel-9.0.0/lib/arel/delete_manager.rb:20
  def wheres=(list); end
end

# source://arel-9.0.0/lib/arel/errors.rb:6
class Arel::EmptyJoinError < ::Arel::ArelError; end

# source://arel-9.0.0/lib/arel/expressions.rb:3
module Arel::Expressions
  # source://arel-9.0.0/lib/arel/expressions.rb:20
  def average; end

  # source://arel-9.0.0/lib/arel/expressions.rb:4
  def count(distinct = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/expressions.rb:24
  def extract(field); end

  # source://arel-9.0.0/lib/arel/expressions.rb:12
  def maximum; end

  # source://arel-9.0.0/lib/arel/expressions.rb:16
  def minimum; end

  # source://arel-9.0.0/lib/arel/expressions.rb:8
  def sum; end
end

# Methods for creating various nodes
#
# source://arel-9.0.0/lib/arel/factory_methods.rb:5
module Arel::FactoryMethods
  # source://arel-9.0.0/lib/arel/factory_methods.rb:26
  def create_and(clauses); end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:10
  def create_false; end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:18
  def create_join(to, constraint = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:30
  def create_on(expr); end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:22
  def create_string_join(to); end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:14
  def create_table_alias(relation, name); end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:6
  def create_true; end

  # source://arel-9.0.0/lib/arel/factory_methods.rb:34
  def grouping(expr); end

  # Create a LOWER() function
  #
  # source://arel-9.0.0/lib/arel/factory_methods.rb:40
  def lower(column); end
end

# source://arel-9.0.0/lib/arel/insert_manager.rb:3
class Arel::InsertManager < ::Arel::TreeManager
  # @return [InsertManager] a new instance of InsertManager
  #
  # source://arel-9.0.0/lib/arel/insert_manager.rb:4
  def initialize; end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:14
  def columns; end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:40
  def create_values(values, columns); end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:44
  def create_values_list(rows); end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:21
  def insert(fields); end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:9
  def into(table); end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:17
  def select(select); end

  # source://arel-9.0.0/lib/arel/insert_manager.rb:15
  def values=(val); end
end

# source://arel-9.0.0/lib/arel/math.rb:3
module Arel::Math
  # source://arel-9.0.0/lib/arel/math.rb:20
  def &(other); end

  # source://arel-9.0.0/lib/arel/math.rb:4
  def *(other); end

  # source://arel-9.0.0/lib/arel/math.rb:8
  def +(other); end

  # source://arel-9.0.0/lib/arel/math.rb:12
  def -(other); end

  # source://arel-9.0.0/lib/arel/math.rb:16
  def /(other); end

  # source://arel-9.0.0/lib/arel/math.rb:32
  def <<(other); end

  # source://arel-9.0.0/lib/arel/math.rb:36
  def >>(other); end

  # source://arel-9.0.0/lib/arel/math.rb:28
  def ^(other); end

  # source://arel-9.0.0/lib/arel/math.rb:24
  def |(other); end

  # source://arel-9.0.0/lib/arel/math.rb:40
  def ~; end
end

# Convenience Alias
#
# source://arel-9.0.0/lib/arel.rb:37
Arel::Node = Arel::Nodes::Node

# source://arel-9.0.0/lib/arel/nodes/node.rb:5
module Arel::Nodes
  class << self
    # source://arel-9.0.0/lib/arel/nodes/casted.rb:31
    def build_quoted(other, attribute = T.unsafe(nil)); end
  end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:32
class Arel::Nodes::Addition < ::Arel::Nodes::InfixOperation
  # @return [Addition] a new instance of Addition
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:33
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/and.rb:4
class Arel::Nodes::And < ::Arel::Nodes::Node
  # @return [And] a new instance of And
  #
  # source://arel-9.0.0/lib/arel/nodes/and.rb:7
  def initialize(children); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/and.rb:24
  def ==(other); end

  # Returns the value of attribute children.
  #
  # source://arel-9.0.0/lib/arel/nodes/and.rb:5
  def children; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/and.rb:24
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/and.rb:20
  def hash; end

  # source://arel-9.0.0/lib/arel/nodes/and.rb:12
  def left; end

  # source://arel-9.0.0/lib/arel/nodes/and.rb:16
  def right; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::As < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/ascending.rb:4
class Arel::Nodes::Ascending < ::Arel::Nodes::Ordering
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/ascending.rb:14
  def ascending?; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/ascending.rb:18
  def descending?; end

  # source://arel-9.0.0/lib/arel/nodes/ascending.rb:10
  def direction; end

  # source://arel-9.0.0/lib/arel/nodes/ascending.rb:6
  def reverse; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Assignment < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/function.rb:43
class Arel::Nodes::Avg < ::Arel::Nodes::Function; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Between < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Bin < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:4
class Arel::Nodes::Binary < ::Arel::Nodes::Node
  # @return [Binary] a new instance of Binary
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:7
  def initialize(left, right); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:23
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:23
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:19
  def hash; end

  # Returns the value of attribute left.
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def left; end

  # Sets the attribute left
  #
  # @param value the value to set the attribute left to.
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def left=(_arg0); end

  # Returns the value of attribute right.
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def right; end

  # Sets the attribute right
  #
  # @param value the value to set the attribute right to.
  #
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def right=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:13
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/bind_param.rb:4
class Arel::Nodes::BindParam < ::Arel::Nodes::Node
  # @return [BindParam] a new instance of BindParam
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:7
  def initialize(value); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:16
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:16
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:12
  def hash; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:22
  def nil?; end

  # Returns the value of attribute value.
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:5
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://arel-9.0.0/lib/arel/nodes/bind_param.rb:5
  def value=(_arg0); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:50
class Arel::Nodes::BitwiseAnd < ::Arel::Nodes::InfixOperation
  # @return [BitwiseAnd] a new instance of BitwiseAnd
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:51
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/unary_operation.rb:20
class Arel::Nodes::BitwiseNot < ::Arel::Nodes::UnaryOperation
  # @return [BitwiseNot] a new instance of BitwiseNot
  #
  # source://arel-9.0.0/lib/arel/nodes/unary_operation.rb:21
  def initialize(operand); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:56
class Arel::Nodes::BitwiseOr < ::Arel::Nodes::InfixOperation
  # @return [BitwiseOr] a new instance of BitwiseOr
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:57
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:68
class Arel::Nodes::BitwiseShiftLeft < ::Arel::Nodes::InfixOperation
  # @return [BitwiseShiftLeft] a new instance of BitwiseShiftLeft
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:69
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:74
class Arel::Nodes::BitwiseShiftRight < ::Arel::Nodes::InfixOperation
  # @return [BitwiseShiftRight] a new instance of BitwiseShiftRight
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:75
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:62
class Arel::Nodes::BitwiseXor < ::Arel::Nodes::InfixOperation
  # @return [BitwiseXor] a new instance of BitwiseXor
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:63
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/case.rb:4
class Arel::Nodes::Case < ::Arel::Nodes::Node
  include ::Arel::OrderPredications
  include ::Arel::Predications
  include ::Arel::AliasPredication

  # @return [Case] a new instance of Case
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:11
  def initialize(expression = T.unsafe(nil), default = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:43
  def ==(other); end

  # Returns the value of attribute case.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def case; end

  # Sets the attribute case
  #
  # @param value the value to set the attribute case to.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def case=(_arg0); end

  # Returns the value of attribute conditions.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def conditions; end

  # Sets the attribute conditions
  #
  # @param value the value to set the attribute conditions to.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def conditions=(_arg0); end

  # Returns the value of attribute default.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:9
  def default=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/case.rb:27
  def else(expression); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/case.rb:43
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/case.rb:39
  def hash; end

  # source://arel-9.0.0/lib/arel/nodes/case.rb:22
  def then(expression); end

  # source://arel-9.0.0/lib/arel/nodes/case.rb:17
  def when(condition, expression = T.unsafe(nil)); end

  private

  # source://arel-9.0.0/lib/arel/nodes/case.rb:32
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/casted.rb:4
class Arel::Nodes::Casted < ::Arel::Nodes::Node
  # @return [Casted] a new instance of Casted
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:6
  def initialize(val, attribute); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:18
  def ==(other); end

  # Returns the value of attribute attribute.
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:5
  def attribute; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:18
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/casted.rb:14
  def hash; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:12
  def nil?; end

  # Returns the value of attribute val.
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:5
  def val; end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:44
class Arel::Nodes::Concat < ::Arel::Nodes::InfixOperation
  # @return [Concat] a new instance of Concat
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:45
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/count.rb:4
class Arel::Nodes::Count < ::Arel::Nodes::Function
  include ::Arel::Math

  # @return [Count] a new instance of Count
  #
  # source://arel-9.0.0/lib/arel/nodes/count.rb:7
  def initialize(expr, distinct = T.unsafe(nil), aliaz = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Cube < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/window.rb:102
class Arel::Nodes::CurrentRow < ::Arel::Nodes::Node
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:107
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:107
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:103
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/delete_statement.rb:4
class Arel::Nodes::DeleteStatement < ::Arel::Nodes::Binary
  # @return [DeleteStatement] a new instance of DeleteStatement
  #
  # source://arel-9.0.0/lib/arel/nodes/delete_statement.rb:12
  def initialize(relation = T.unsafe(nil), wheres = T.unsafe(nil)); end

  # Returns the value of attribute limit.
  #
  # source://arel-9.0.0/lib/arel/nodes/delete_statement.rb:5
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://arel-9.0.0/lib/arel/nodes/delete_statement.rb:5
  def limit=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def relation; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def relation=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def wheres; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def wheres=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/delete_statement.rb:16
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/descending.rb:4
class Arel::Nodes::Descending < ::Arel::Nodes::Ordering
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/descending.rb:14
  def ascending?; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/descending.rb:18
  def descending?; end

  # source://arel-9.0.0/lib/arel/nodes/descending.rb:10
  def direction; end

  # source://arel-9.0.0/lib/arel/nodes/descending.rb:6
  def reverse; end
end

# source://arel-9.0.0/lib/arel/nodes/terminal.rb:4
class Arel::Nodes::Distinct < ::Arel::Nodes::Node
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/terminal.rb:9
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/terminal.rb:9
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/terminal.rb:5
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::DistinctOn < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:26
class Arel::Nodes::Division < ::Arel::Nodes::InfixOperation
  # @return [Division] a new instance of Division
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:27
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/matches.rb:15
class Arel::Nodes::DoesNotMatch < ::Arel::Nodes::Matches; end

# source://arel-9.0.0/lib/arel/nodes/case.rb:55
class Arel::Nodes::Else < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/equality.rb:4
class Arel::Nodes::Equality < ::Arel::Nodes::Binary
  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def operand1; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def operand2; end

  # source://arel-9.0.0/lib/arel/nodes/equality.rb:5
  def operator; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Except < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/function.rb:43
class Arel::Nodes::Exists < ::Arel::Nodes::Function; end

# source://arel-9.0.0/lib/arel/nodes/extract.rb:4
class Arel::Nodes::Extract < ::Arel::Nodes::Unary
  include ::Arel::AliasPredication
  include ::Arel::Predications

  # @return [Extract] a new instance of Extract
  #
  # source://arel-9.0.0/lib/arel/nodes/extract.rb:10
  def initialize(expr, field); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/extract.rb:19
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/extract.rb:19
  def eql?(other); end

  # Returns the value of attribute field.
  #
  # source://arel-9.0.0/lib/arel/nodes/extract.rb:8
  def field; end

  # Sets the attribute field
  #
  # @param value the value to set the attribute field to.
  #
  # source://arel-9.0.0/lib/arel/nodes/extract.rb:8
  def field=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/extract.rb:15
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/false.rb:4
class Arel::Nodes::False < ::Arel::Nodes::Node
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/false.rb:9
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/false.rb:9
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/false.rb:5
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/window.rb:119
class Arel::Nodes::Following < ::Arel::Nodes::Unary
  # @return [Following] a new instance of Following
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:120
  def initialize(expr = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/full_outer_join.rb:4
class Arel::Nodes::FullOuterJoin < ::Arel::Nodes::Join; end

# source://arel-9.0.0/lib/arel/nodes/function.rb:4
class Arel::Nodes::Function < ::Arel::Nodes::Node
  include ::Arel::Predications
  include ::Arel::WindowPredications
  include ::Arel::OrderPredications

  # @return [Function] a new instance of Function
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:10
  def initialize(expr, aliaz = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:26
  def ==(other); end

  # Returns the value of attribute alias.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def alias; end

  # Sets the attribute alias
  #
  # @param value the value to set the attribute alias to.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def alias=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/function.rb:17
  def as(aliaz); end

  # Returns the value of attribute distinct.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def distinct; end

  # Sets the attribute distinct
  #
  # @param value the value to set the attribute distinct to.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def distinct=(_arg0); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:26
  def eql?(other); end

  # Returns the value of attribute expressions.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def expressions; end

  # Sets the attribute expressions
  #
  # @param value the value to set the attribute expressions to.
  #
  # source://arel-9.0.0/lib/arel/nodes/function.rb:8
  def expressions=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/function.rb:22
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::GreaterThan < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::GreaterThanOrEqual < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Group < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/grouping.rb:4
class Arel::Nodes::Grouping < ::Arel::Nodes::Unary
  include ::Arel::Predications
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::GroupingElement < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::GroupingSet < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/in.rb:4
class Arel::Nodes::In < ::Arel::Nodes::Equality; end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:5
class Arel::Nodes::InfixOperation < ::Arel::Nodes::Binary
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::OrderPredications
  include ::Arel::AliasPredication
  include ::Arel::Math

  # @return [InfixOperation] a new instance of InfixOperation
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:14
  def initialize(operator, left, right); end

  # Returns the value of attribute operator.
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:12
  def operator; end
end

# source://arel-9.0.0/lib/arel/nodes/inner_join.rb:4
class Arel::Nodes::InnerJoin < ::Arel::Nodes::Join; end

# source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:4
class Arel::Nodes::InsertStatement < ::Arel::Nodes::Node
  # @return [InsertStatement] a new instance of InsertStatement
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:7
  def initialize; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:26
  def ==(other); end

  # Returns the value of attribute columns.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def columns; end

  # Sets the attribute columns
  #
  # @param value the value to set the attribute columns to.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def columns=(_arg0); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:26
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:22
  def hash; end

  # Returns the value of attribute relation.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def relation; end

  # Sets the attribute relation
  #
  # @param value the value to set the attribute relation to.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def relation=(_arg0); end

  # Returns the value of attribute select.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def select; end

  # Sets the attribute select
  #
  # @param value the value to set the attribute select to.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def select=(_arg0); end

  # Returns the value of attribute values.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:5
  def values=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/insert_statement.rb:15
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Intersect < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Join < ::Arel::Nodes::Binary; end

# Class that represents a join source
#
#   http://www.sqlite.org/syntaxdiagrams.html#join-source
#
# source://arel-9.0.0/lib/arel/nodes/join_source.rb:9
class Arel::Nodes::JoinSource < ::Arel::Nodes::Binary
  # @return [JoinSource] a new instance of JoinSource
  #
  # source://arel-9.0.0/lib/arel/nodes/join_source.rb:10
  def initialize(single_source, joinop = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/join_source.rb:14
  def empty?; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::LessThan < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::LessThanOrEqual < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Limit < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Lock < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/matches.rb:4
class Arel::Nodes::Matches < ::Arel::Nodes::Binary
  # @return [Matches] a new instance of Matches
  #
  # source://arel-9.0.0/lib/arel/nodes/matches.rb:8
  def initialize(left, right, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # Returns the value of attribute case_sensitive.
  #
  # source://arel-9.0.0/lib/arel/nodes/matches.rb:6
  def case_sensitive; end

  # Sets the attribute case_sensitive
  #
  # @param value the value to set the attribute case_sensitive to.
  #
  # source://arel-9.0.0/lib/arel/nodes/matches.rb:6
  def case_sensitive=(_arg0); end

  # Returns the value of attribute escape.
  #
  # source://arel-9.0.0/lib/arel/nodes/matches.rb:5
  def escape; end
end

# source://arel-9.0.0/lib/arel/nodes/function.rb:43
class Arel::Nodes::Max < ::Arel::Nodes::Function; end

# source://arel-9.0.0/lib/arel/nodes/function.rb:43
class Arel::Nodes::Min < ::Arel::Nodes::Function; end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:20
class Arel::Nodes::Multiplication < ::Arel::Nodes::InfixOperation
  # @return [Multiplication] a new instance of Multiplication
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:21
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/named_function.rb:4
class Arel::Nodes::NamedFunction < ::Arel::Nodes::Function
  # @return [NamedFunction] a new instance of NamedFunction
  #
  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:7
  def initialize(name, expr, aliaz = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:16
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:16
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:12
  def hash; end

  # Returns the value of attribute name.
  #
  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:5
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://arel-9.0.0/lib/arel/nodes/named_function.rb:5
  def name=(_arg0); end
end

# source://arel-9.0.0/lib/arel/nodes/window.rb:67
class Arel::Nodes::NamedWindow < ::Arel::Nodes::Window
  # @return [NamedWindow] a new instance of NamedWindow
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:70
  def initialize(name); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:84
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:84
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:80
  def hash; end

  # Returns the value of attribute name.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:68
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:68
  def name=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/window.rb:75
  def initialize_copy(other); end
end

# Abstract base class for all AST nodes
#
# source://arel-9.0.0/lib/arel/nodes/node.rb:8
class Arel::Nodes::Node
  include ::Arel::FactoryMethods
  include ::Enumerable

  # Factory method to create an Nodes::And node.
  #
  # source://arel-9.0.0/lib/arel/nodes/node.rb:38
  def and(right); end

  # Iterate through AST, nodes will be yielded depth-first
  #
  # source://arel-9.0.0/lib/arel/nodes/node.rb:54
  def each(&block); end

  # Factory method to create a Nodes::Not node that has the recipient of
  # the caller as a child.
  #
  # source://arel-9.0.0/lib/arel/nodes/node.rb:25
  def not; end

  # Factory method to create a Nodes::Grouping node that has an Nodes::Or
  # node as a child.
  #
  # source://arel-9.0.0/lib/arel/nodes/node.rb:32
  def or(right); end

  # FIXME: this method should go away.  I don't like people calling
  # to_sql on non-head nodes.  This forces us to walk the AST until we
  # can find a node that has a "relation" member.
  #
  # Maybe we should just use `Table.engine`?  :'(
  #
  # source://arel-9.0.0/lib/arel/nodes/node.rb:47
  def to_sql(engine = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Not < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::NotEqual < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::NotIn < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/regexp.rb:13
class Arel::Nodes::NotRegexp < ::Arel::Nodes::Regexp; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Offset < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::On < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Or < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Ordering < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/outer_join.rb:4
class Arel::Nodes::OuterJoin < ::Arel::Nodes::Join; end

# source://arel-9.0.0/lib/arel/nodes/over.rb:5
class Arel::Nodes::Over < ::Arel::Nodes::Binary
  include ::Arel::AliasPredication

  # @return [Over] a new instance of Over
  #
  # source://arel-9.0.0/lib/arel/nodes/over.rb:8
  def initialize(left, right = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/nodes/over.rb:12
  def operator; end
end

# source://arel-9.0.0/lib/arel/nodes/window.rb:113
class Arel::Nodes::Preceding < ::Arel::Nodes::Unary
  # @return [Preceding] a new instance of Preceding
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:114
  def initialize(expr = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/casted.rb:26
class Arel::Nodes::Quoted < ::Arel::Nodes::Unary
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/casted.rb:28
  def nil?; end

  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def val; end
end

# source://arel-9.0.0/lib/arel/nodes/window.rb:96
class Arel::Nodes::Range < ::Arel::Nodes::Unary
  # @return [Range] a new instance of Range
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:97
  def initialize(expr = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/regexp.rb:4
class Arel::Nodes::Regexp < ::Arel::Nodes::Binary
  # @return [Regexp] a new instance of Regexp
  #
  # source://arel-9.0.0/lib/arel/nodes/regexp.rb:7
  def initialize(left, right, case_sensitive = T.unsafe(nil)); end

  # Returns the value of attribute case_sensitive.
  #
  # source://arel-9.0.0/lib/arel/nodes/regexp.rb:5
  def case_sensitive; end

  # Sets the attribute case_sensitive
  #
  # @param value the value to set the attribute case_sensitive to.
  #
  # source://arel-9.0.0/lib/arel/nodes/regexp.rb:5
  def case_sensitive=(_arg0); end
end

# source://arel-9.0.0/lib/arel/nodes/right_outer_join.rb:4
class Arel::Nodes::RightOuterJoin < ::Arel::Nodes::Join; end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::RollUp < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/window.rb:90
class Arel::Nodes::Rows < ::Arel::Nodes::Unary
  # @return [Rows] a new instance of Rows
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:91
  def initialize(expr = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/select_core.rb:4
class Arel::Nodes::SelectCore < ::Arel::Nodes::Node
  # @return [SelectCore] a new instance of SelectCore
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:8
  def initialize; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:50
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:50
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:22
  def from; end

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:26
  def from=(value); end

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:22
  def froms; end

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:26
  def froms=(value); end

  # Returns the value of attribute groups.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def groups; end

  # Sets the attribute groups
  #
  # @param value the value to set the attribute groups to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def groups=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:43
  def hash; end

  # Returns the value of attribute havings.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def havings; end

  # Sets the attribute havings
  #
  # @param value the value to set the attribute havings to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def havings=(_arg0); end

  # Returns the value of attribute projections.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def projections; end

  # Sets the attribute projections
  #
  # @param value the value to set the attribute projections to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def projections=(_arg0); end

  # Returns the value of attribute set_quantifier.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def set_quantifier; end

  # Sets the attribute set_quantifier
  #
  # @param value the value to set the attribute set_quantifier to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def set_quantifier=(_arg0); end

  # Returns the value of attribute source.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:6
  def source=(_arg0); end

  # Returns the value of attribute top.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def top; end

  # Sets the attribute top
  #
  # @param value the value to set the attribute top to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def top=(_arg0); end

  # Returns the value of attribute wheres.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def wheres; end

  # Sets the attribute wheres
  #
  # @param value the value to set the attribute wheres to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def wheres=(_arg0); end

  # Returns the value of attribute windows.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def windows; end

  # Sets the attribute windows
  #
  # @param value the value to set the attribute windows to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:5
  def windows=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/select_core.rb:33
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/select_statement.rb:4
class Arel::Nodes::SelectStatement < ::Arel::Nodes::Node
  # @return [SelectStatement] a new instance of SelectStatement
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:8
  def initialize(cores = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:28
  def ==(other); end

  # Returns the value of attribute cores.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:5
  def cores; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:28
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:24
  def hash; end

  # Returns the value of attribute limit.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def limit=(_arg0); end

  # Returns the value of attribute lock.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def lock; end

  # Sets the attribute lock
  #
  # @param value the value to set the attribute lock to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def lock=(_arg0); end

  # Returns the value of attribute offset.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def offset; end

  # Sets the attribute offset
  #
  # @param value the value to set the attribute offset to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def offset=(_arg0); end

  # Returns the value of attribute orders.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def orders=(_arg0); end

  # Returns the value of attribute with.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def with; end

  # Sets the attribute with
  #
  # @param value the value to set the attribute with to.
  #
  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:6
  def with=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/select_statement.rb:18
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/sql_literal.rb:4
class Arel::Nodes::SqlLiteral < ::String
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::AliasPredication
  include ::Arel::OrderPredications

  # source://arel-9.0.0/lib/arel/nodes/sql_literal.rb:10
  def encode_with(coder); end
end

# source://arel-9.0.0/lib/arel/nodes/string_join.rb:4
class Arel::Nodes::StringJoin < ::Arel::Nodes::Join
  # @return [StringJoin] a new instance of StringJoin
  #
  # source://arel-9.0.0/lib/arel/nodes/string_join.rb:5
  def initialize(left, right = T.unsafe(nil)); end
end

# source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:38
class Arel::Nodes::Subtraction < ::Arel::Nodes::InfixOperation
  # @return [Subtraction] a new instance of Subtraction
  #
  # source://arel-9.0.0/lib/arel/nodes/infix_operation.rb:39
  def initialize(left, right); end
end

# source://arel-9.0.0/lib/arel/nodes/function.rb:43
class Arel::Nodes::Sum < ::Arel::Nodes::Function; end

# source://arel-9.0.0/lib/arel/nodes/table_alias.rb:4
class Arel::Nodes::TableAlias < ::Arel::Nodes::Binary
  # source://arel-9.0.0/lib/arel/nodes/table_alias.rb:9
  def [](name); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/table_alias.rb:21
  def able_to_type_cast?; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def name; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def relation; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def table_alias; end

  # source://arel-9.0.0/lib/arel/nodes/table_alias.rb:13
  def table_name; end

  # source://arel-9.0.0/lib/arel/nodes/table_alias.rb:17
  def type_cast_for_database(*args); end
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:40
class Arel::Nodes::Top < ::Arel::Nodes::Unary; end

# source://arel-9.0.0/lib/arel/nodes/true.rb:4
class Arel::Nodes::True < ::Arel::Nodes::Node
  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/true.rb:9
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/true.rb:9
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/true.rb:5
  def hash; end
end

# source://arel-9.0.0/lib/arel/nodes/unary.rb:4
class Arel::Nodes::Unary < ::Arel::Nodes::Node
  # @return [Unary] a new instance of Unary
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:8
  def initialize(expr); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:17
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:17
  def eql?(other); end

  # Returns the value of attribute expr.
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def expr; end

  # Sets the attribute expr
  #
  # @param value the value to set the attribute expr to.
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def expr=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/unary.rb:13
  def hash; end

  # Returns the value of attribute expr.
  #
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def value; end
end

# source://arel-9.0.0/lib/arel/nodes/unary_operation.rb:5
class Arel::Nodes::UnaryOperation < ::Arel::Nodes::Unary
  include ::Arel::Expressions
  include ::Arel::Predications
  include ::Arel::OrderPredications
  include ::Arel::AliasPredication
  include ::Arel::Math

  # @return [UnaryOperation] a new instance of UnaryOperation
  #
  # source://arel-9.0.0/lib/arel/nodes/unary_operation.rb:14
  def initialize(operator, operand); end

  # Returns the value of attribute operator.
  #
  # source://arel-9.0.0/lib/arel/nodes/unary_operation.rb:12
  def operator; end
end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::Union < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/binary.rb:48
class Arel::Nodes::UnionAll < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/unqualified_column.rb:4
class Arel::Nodes::UnqualifiedColumn < ::Arel::Nodes::Unary
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def attribute; end

  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def attribute=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/unqualified_column.rb:12
  def column; end

  # source://arel-9.0.0/lib/arel/nodes/unqualified_column.rb:16
  def name; end

  # source://arel-9.0.0/lib/arel/nodes/unqualified_column.rb:8
  def relation; end
end

# source://arel-9.0.0/lib/arel/nodes/update_statement.rb:4
class Arel::Nodes::UpdateStatement < ::Arel::Nodes::Node
  # @return [UpdateStatement] a new instance of UpdateStatement
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:8
  def initialize; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:27
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:27
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:23
  def hash; end

  # Returns the value of attribute key.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:6
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:6
  def key=(_arg0); end

  # Returns the value of attribute limit.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def limit=(_arg0); end

  # Returns the value of attribute orders.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def orders=(_arg0); end

  # Returns the value of attribute relation.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def relation; end

  # Sets the attribute relation
  #
  # @param value the value to set the attribute relation to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def relation=(_arg0); end

  # Returns the value of attribute values.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def values=(_arg0); end

  # Returns the value of attribute wheres.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def wheres; end

  # Sets the attribute wheres
  #
  # @param value the value to set the attribute wheres to.
  #
  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:5
  def wheres=(_arg0); end

  private

  # source://arel-9.0.0/lib/arel/nodes/update_statement.rb:17
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/values.rb:4
class Arel::Nodes::Values < ::Arel::Nodes::Binary
  # @return [Values] a new instance of Values
  #
  # source://arel-9.0.0/lib/arel/nodes/values.rb:10
  def initialize(exprs, columns = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def columns; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def columns=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def expressions; end

  # source://arel-9.0.0/lib/arel/nodes/binary.rb:5
  def expressions=(_arg0); end
end

# source://arel-9.0.0/lib/arel/nodes/values_list.rb:4
class Arel::Nodes::ValuesList < ::Arel::Nodes::Node
  # @return [ValuesList] a new instance of ValuesList
  #
  # source://arel-9.0.0/lib/arel/nodes/values_list.rb:7
  def initialize(rows); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/values_list.rb:16
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/values_list.rb:16
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/values_list.rb:12
  def hash; end

  # Returns the value of attribute rows.
  #
  # source://arel-9.0.0/lib/arel/nodes/values_list.rb:5
  def rows; end
end

# source://arel-9.0.0/lib/arel/nodes/case.rb:52
class Arel::Nodes::When < ::Arel::Nodes::Binary; end

# source://arel-9.0.0/lib/arel/nodes/window.rb:4
class Arel::Nodes::Window < ::Arel::Nodes::Node
  # @return [Window] a new instance of Window
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:7
  def initialize; end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:58
  def ==(other); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:58
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:29
  def frame(expr); end

  # Returns the value of attribute framing.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def framing; end

  # Sets the attribute framing
  #
  # @param value the value to set the attribute framing to.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def framing=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:54
  def hash; end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:13
  def order(*expr); end

  # Returns the value of attribute orders.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def orders; end

  # Sets the attribute orders
  #
  # @param value the value to set the attribute orders to.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def orders=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:21
  def partition(*expr); end

  # Returns the value of attribute partitions.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def partitions; end

  # Sets the attribute partitions
  #
  # @param value the value to set the attribute partitions to.
  #
  # source://arel-9.0.0/lib/arel/nodes/window.rb:5
  def partitions=(_arg0); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:41
  def range(expr = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/nodes/window.rb:33
  def rows(expr = T.unsafe(nil)); end

  private

  # source://arel-9.0.0/lib/arel/nodes/window.rb:49
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/nodes/with.rb:4
class Arel::Nodes::With < ::Arel::Nodes::Unary
  # source://arel-9.0.0/lib/arel/nodes/unary.rb:5
  def children; end
end

# source://arel-9.0.0/lib/arel/nodes/with.rb:8
class Arel::Nodes::WithRecursive < ::Arel::Nodes::With; end

# source://arel-9.0.0/lib/arel/order_predications.rb:3
module Arel::OrderPredications
  # source://arel-9.0.0/lib/arel/order_predications.rb:5
  def asc; end

  # source://arel-9.0.0/lib/arel/order_predications.rb:9
  def desc; end
end

# source://arel-9.0.0/lib/arel/predications.rb:3
module Arel::Predications
  # source://arel-9.0.0/lib/arel/predications.rb:28
  def between(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:206
  def concat(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:138
  def does_not_match(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:150
  def does_not_match_all(others, escape = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:146
  def does_not_match_any(others, escape = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:142
  def does_not_match_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:16
  def eq(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:24
  def eq_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:20
  def eq_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:166
  def gt(right); end

  # source://arel-9.0.0/lib/arel/predications.rb:174
  def gt_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:170
  def gt_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:154
  def gteq(right); end

  # source://arel-9.0.0/lib/arel/predications.rb:162
  def gteq_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:158
  def gteq_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:48
  def in(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:70
  def in_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:66
  def in_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:178
  def lt(right); end

  # source://arel-9.0.0/lib/arel/predications.rb:186
  def lt_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:182
  def lt_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:190
  def lteq(right); end

  # source://arel-9.0.0/lib/arel/predications.rb:198
  def lteq_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:194
  def lteq_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:122
  def matches(other, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:134
  def matches_all(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:130
  def matches_any(others, escape = T.unsafe(nil), case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:126
  def matches_regexp(other, case_sensitive = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/predications.rb:74
  def not_between(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:4
  def not_eq(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:12
  def not_eq_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:8
  def not_eq_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:96
  def not_in(other); end

  # source://arel-9.0.0/lib/arel/predications.rb:118
  def not_in_all(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:114
  def not_in_any(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:202
  def when(right); end

  private

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/predications.rb:232
  def equals_quoted?(maybe_quoted, value); end

  # source://arel-9.0.0/lib/arel/predications.rb:219
  def grouping_all(method_id, others, *extras); end

  # source://arel-9.0.0/lib/arel/predications.rb:212
  def grouping_any(method_id, others, *extras); end

  # source://arel-9.0.0/lib/arel/predications.rb:228
  def quoted_array(others); end

  # source://arel-9.0.0/lib/arel/predications.rb:224
  def quoted_node(other); end
end

# source://arel-9.0.0/lib/arel/select_manager.rb:5
class Arel::SelectManager < ::Arel::TreeManager
  include ::Arel::Crud

  # @return [SelectManager] a new instance of SelectManager
  #
  # source://arel-9.0.0/lib/arel/select_manager.rb:10
  def initialize(table = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:51
  def as(other); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:27
  def constraints; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:150
  def distinct(value = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:159
  def distinct_on(value); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:202
  def except(other); end

  # Produces an Arel::Nodes::Exists node
  #
  # source://arel-9.0.0/lib/arel/select_manager.rb:47
  def exists; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:88
  def from(table); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:101
  def froms; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:77
  def group(*columns); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:122
  def having(expr); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:198
  def intersect(other); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:105
  def join(relation, klass = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:230
  def join_sources; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:22
  def limit; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:218
  def limit=(limit); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:55
  def lock(locking = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:68
  def locked; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:202
  def minus(other); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:31
  def offset; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:35
  def offset=(amount); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:72
  def on(*exprs); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:168
  def order(*expr); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:176
  def orders; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:118
  def outer_join(relation); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:133
  def project(*projections); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:142
  def projections; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:146
  def projections=(projections); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:35
  def skip(amount); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:234
  def source; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:218
  def take(limit); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:22
  def taken; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:187
  def union(operation, other = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:180
  def where_sql(engine = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:127
  def window(name); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:207
  def with(*subqueries); end

  private

  # source://arel-9.0.0/lib/arel/select_manager.rb:251
  def collapse(exprs, existing = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/select_manager.rb:17
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/select_manager.rb:238
class Arel::SelectManager::Row < ::Struct
  # source://arel-9.0.0/lib/arel/select_manager.rb:239
  def id; end

  # source://arel-9.0.0/lib/arel/select_manager.rb:243
  def method_missing(name, *args); end
end

# source://arel-9.0.0/lib/arel/select_manager.rb:8
Arel::SelectManager::STRING_OR_SYMBOL_CLASS = T.let(T.unsafe(nil), Array)

# source://arel-9.0.0/lib/arel/table.rb:3
class Arel::Table
  include ::Arel::Crud
  include ::Arel::FactoryMethods

  # @return [Table] a new instance of Table
  #
  # source://arel-9.0.0/lib/arel/table.rb:15
  def initialize(name, as: T.unsafe(nil), type_caster: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/table.rb:91
  def ==(other); end

  # source://arel-9.0.0/lib/arel/table.rb:80
  def [](name); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/table.rb:102
  def able_to_type_cast?; end

  # source://arel-9.0.0/lib/arel/table.rb:28
  def alias(name = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/table.rb:91
  def eql?(other); end

  # source://arel-9.0.0/lib/arel/table.rb:32
  def from; end

  # source://arel-9.0.0/lib/arel/table.rb:52
  def group(*columns); end

  # source://arel-9.0.0/lib/arel/table.rb:84
  def hash; end

  # source://arel-9.0.0/lib/arel/table.rb:76
  def having(expr); end

  # source://arel-9.0.0/lib/arel/table.rb:36
  def join(relation, klass = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://arel-9.0.0/lib/arel/table.rb:10
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://arel-9.0.0/lib/arel/table.rb:10
  def name=(_arg0); end

  # source://arel-9.0.0/lib/arel/table.rb:56
  def order(*expr); end

  # source://arel-9.0.0/lib/arel/table.rb:48
  def outer_join(relation); end

  # source://arel-9.0.0/lib/arel/table.rb:64
  def project(*things); end

  # source://arel-9.0.0/lib/arel/table.rb:72
  def skip(amount); end

  # Returns the value of attribute table_alias.
  #
  # source://arel-9.0.0/lib/arel/table.rb:10
  def table_alias; end

  # Sets the attribute table_alias
  #
  # @param value the value to set the attribute table_alias to.
  #
  # source://arel-9.0.0/lib/arel/table.rb:10
  def table_alias=(_arg0); end

  # Returns the value of attribute name.
  # TableAlias and Table both have a #table_name which is the name of the underlying table
  #
  # source://arel-9.0.0/lib/arel/table.rb:10
  def table_name; end

  # source://arel-9.0.0/lib/arel/table.rb:68
  def take(amount); end

  # source://arel-9.0.0/lib/arel/table.rb:98
  def type_cast_for_database(attribute_name, value); end

  # source://arel-9.0.0/lib/arel/table.rb:60
  def where(condition); end

  protected

  # Returns the value of attribute type_caster.
  #
  # source://arel-9.0.0/lib/arel/table.rb:108
  def type_caster; end

  class << self
    # Returns the value of attribute engine.
    #
    # source://arel-9.0.0/lib/arel/table.rb:8
    def engine; end

    # Sets the attribute engine
    #
    # @param value the value to set the attribute engine to.
    #
    # source://arel-9.0.0/lib/arel/table.rb:8
    def engine=(_arg0); end
  end
end

# source://arel-9.0.0/lib/arel/tree_manager.rb:5
class Arel::TreeManager
  include ::Arel::FactoryMethods

  # @return [TreeManager] a new instance of TreeManager
  #
  # source://arel-9.0.0/lib/arel/tree_manager.rb:10
  def initialize; end

  # Returns the value of attribute ast.
  #
  # source://arel-9.0.0/lib/arel/tree_manager.rb:8
  def ast; end

  # source://arel-9.0.0/lib/arel/tree_manager.rb:14
  def to_dot; end

  # source://arel-9.0.0/lib/arel/tree_manager.rb:20
  def to_sql(engine = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/tree_manager.rb:31
  def where(expr); end

  private

  # source://arel-9.0.0/lib/arel/tree_manager.rb:26
  def initialize_copy(other); end
end

# source://arel-9.0.0/lib/arel/update_manager.rb:3
class Arel::UpdateManager < ::Arel::TreeManager
  # @return [UpdateManager] a new instance of UpdateManager
  #
  # source://arel-9.0.0/lib/arel/update_manager.rb:4
  def initialize; end

  # source://arel-9.0.0/lib/arel/update_manager.rb:19
  def key; end

  # source://arel-9.0.0/lib/arel/update_manager.rb:15
  def key=(key); end

  # source://arel-9.0.0/lib/arel/update_manager.rb:23
  def order(*expr); end

  # source://arel-9.0.0/lib/arel/update_manager.rb:44
  def set(values); end

  # UPDATE +table+
  #
  # source://arel-9.0.0/lib/arel/update_manager.rb:30
  def table(table); end

  # source://arel-9.0.0/lib/arel/update_manager.rb:10
  def take(limit); end

  # source://arel-9.0.0/lib/arel/update_manager.rb:39
  def where(expr); end

  # source://arel-9.0.0/lib/arel/update_manager.rb:35
  def wheres=(exprs); end
end

# source://arel-9.0.0/lib/arel.rb:27
Arel::VERSION = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/visitor.rb:3
module Arel::Visitors; end

# source://arel-9.0.0/lib/arel/visitors/depth_first.rb:4
class Arel::Visitors::DepthFirst < ::Arel::Visitors::Visitor
  # @return [DepthFirst] a new instance of DepthFirst
  #
  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:5
  def initialize(block = T.unsafe(nil)); end

  private

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def binary(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def function(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:193
  def get_dispatch_cache; end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:68
  def nary(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def terminal(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def unary(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:12
  def visit(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_ActiveSupport_Multibyte_Chars(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_ActiveSupport_StringInquirer(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attribute(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Attribute(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Boolean(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Decimal(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Float(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Integer(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_String(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:109
  def visit_Arel_Attributes_Time(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:68
  def visit_Arel_Nodes_And(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_As(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Ascending(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Assignment(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def visit_Arel_Nodes_Avg(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Between(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_BindParam(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:62
  def visit_Arel_Nodes_Case(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Concat(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:56
  def visit_Arel_Nodes_Count(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Cube(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_DeleteStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Descending(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_DoesNotMatch(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Else(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Equality(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def visit_Arel_Nodes_Exists(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_False(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_FullOuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_GreaterThan(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Group(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Grouping(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_GroupingElement(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_GroupingSet(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Having(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_In(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_InfixOperation(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_InnerJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:151
  def visit_Arel_Nodes_InsertStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_JoinSource(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_LessThan(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_LessThanOrEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Limit(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_Lock(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Matches(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def visit_Arel_Nodes_Max(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def visit_Arel_Nodes_Min(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:49
  def visit_Arel_Nodes_NamedFunction(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_Node(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Not(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_NotEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_NotIn(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_NotRegexp(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Offset(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_On(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Or(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Ordering(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_OuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Regexp(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_RightOuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_RollUp(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:157
  def visit_Arel_Nodes_SelectCore(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:166
  def visit_Arel_Nodes_SelectStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_SqlLiteral(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:105
  def visit_Arel_Nodes_StringJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:38
  def visit_Arel_Nodes_Sum(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_TableAlias(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_Top(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_True(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:17
  def visit_Arel_Nodes_UnqualifiedColumn(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:174
  def visit_Arel_Nodes_UpdateStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_Values(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:73
  def visit_Arel_Nodes_When(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Arel_Nodes_Window(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:121
  def visit_Arel_Table(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:182
  def visit_Array(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_BigDecimal(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Bignum(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Class(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Date(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_DateTime(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_FalseClass(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Fixnum(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Float(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:187
  def visit_Hash(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Integer(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_NilClass(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:182
  def visit_Set(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_String(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Symbol(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_Time(o); end

  # source://arel-9.0.0/lib/arel/visitors/depth_first.rb:125
  def visit_TrueClass(o); end
end

# source://arel-9.0.0/lib/arel/visitors/depth_first.rb:191
Arel::Visitors::DepthFirst::DISPATCH = T.let(T.unsafe(nil), Hash)

# source://arel-9.0.0/lib/arel/visitors/dot.rb:4
class Arel::Visitors::Dot < ::Arel::Visitors::Visitor
  # @return [Dot] a new instance of Dot
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:18
  def initialize; end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:27
  def accept(object, collector); end

  private

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def binary(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:253
  def edge(name); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:116
  def extract(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def function(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:97
  def named_window(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:175
  def nary(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:271
  def quote(string); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:275
  def to_dot; end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def unary(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:239
  def visit(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attribute(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_Attribute(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_Boolean(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_Float(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_Integer(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_String(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:164
  def visit_Arel_Attributes_Time(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:175
  def visit_Arel_Nodes_And(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_As(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Assignment(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def visit_Arel_Nodes_Avg(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Between(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:220
  def visit_Arel_Nodes_BindParam(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:159
  def visit_Arel_Nodes_Casted(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Concat(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:43
  def visit_Arel_Nodes_Count(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Cube(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:64
  def visit_Arel_Nodes_DeleteStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_DoesNotMatch(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Equality(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def visit_Arel_Nodes_Exists(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:116
  def visit_Arel_Nodes_Extract(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Following(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:56
  def visit_Arel_Nodes_FullOuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_GreaterThan(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_GreaterThanOrEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Group(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Grouping(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_GroupingElement(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_GroupingSet(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Having(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_In(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:56
  def visit_Arel_Nodes_InnerJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:129
  def visit_Arel_Nodes_InsertStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_JoinSource(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_LessThan(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_LessThanOrEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Limit(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Matches(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def visit_Arel_Nodes_Max(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def visit_Arel_Nodes_Min(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:122
  def visit_Arel_Nodes_NamedFunction(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:97
  def visit_Arel_Nodes_NamedWindow(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Not(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_NotEqual(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_NotIn(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Offset(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_On(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Or(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:34
  def visit_Arel_Nodes_Ordering(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:56
  def visit_Arel_Nodes_OuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:182
  def visit_Arel_Nodes_Over(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Preceding(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Range(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:56
  def visit_Arel_Nodes_RightOuterJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_RollUp(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Rows(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:135
  def visit_Arel_Nodes_SelectCore(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:142
  def visit_Arel_Nodes_SelectStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Arel_Nodes_SqlLiteral(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:52
  def visit_Arel_Nodes_StringJoin(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:105
  def visit_Arel_Nodes_Sum(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:38
  def visit_Arel_Nodes_TableAlias(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_Top(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:69
  def visit_Arel_Nodes_UnqualifiedColumn(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:149
  def visit_Arel_Nodes_UpdateStatement(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:48
  def visit_Arel_Nodes_Values(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:90
  def visit_Arel_Nodes_Window(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:155
  def visit_Arel_Table(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:228
  def visit_Array(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_BigDecimal(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Date(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_DateTime(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_FalseClass(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Fixnum(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Float(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:222
  def visit_Hash(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Integer(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_NilClass(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:228
  def visit_Set(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_String(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Symbol(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_Time(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:204
  def visit_TrueClass(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:235
  def visit_edge(o, method); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:90
  def window(o); end

  # source://arel-9.0.0/lib/arel/visitors/dot.rb:261
  def with_node(node); end
end

# source://arel-9.0.0/lib/arel/visitors/dot.rb:15
class Arel::Visitors::Dot::Edge < ::Struct; end

# source://arel-9.0.0/lib/arel/visitors/dot.rb:5
class Arel::Visitors::Dot::Node
  # @return [Node] a new instance of Node
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:8
  def initialize(name, id, fields = T.unsafe(nil)); end

  # Returns the value of attribute fields.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def fields; end

  # Sets the attribute fields
  #
  # @param value the value to set the attribute fields to.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def fields=(_arg0); end

  # Returns the value of attribute id.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def id=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://arel-9.0.0/lib/arel/visitors/dot.rb:6
  def name=(_arg0); end
end

# source://arel-9.0.0/lib/arel/visitors/ibm_db.rb:4
class Arel::Visitors::IBM_DB < ::Arel::Visitors::ToSql
  private

  # source://arel-9.0.0/lib/arel/visitors/ibm_db.rb:7
  def visit_Arel_Nodes_Limit(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/informix.rb:4
class Arel::Visitors::Informix < ::Arel::Visitors::ToSql
  private

  # source://arel-9.0.0/lib/arel/visitors/informix.rb:47
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/informix.rb:43
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/informix.rb:19
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/informix.rb:6
  def visit_Arel_Nodes_SelectStatement(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/mssql.rb:4
class Arel::Visitors::MSSQL < ::Arel::Visitors::ToSql
  # @return [MSSQL] a new instance of MSSQL
  #
  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:7
  def initialize(*_arg0); end

  private

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:87
  def determine_order_by(orders, x); end

  # FIXME raise exception of there is no pk?
  #
  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:107
  def find_left_table_pk(o); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:115
  def find_primary_key(o); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:60
  def get_offset_limit_clause(o); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:98
  def row_num_literal(order_by); end

  # @return [Boolean]
  #
  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:102
  def select_count?(x); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:70
  def visit_Arel_Nodes_DeleteStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:26
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # `top` wouldn't really work here. I.e. User.select("distinct first_name").limit(10) would generate
  # "select top 10 distinct first_name from users", which is invalid query! it should be
  # "select distinct top 10 first_name from users"
  #
  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:17
  def visit_Arel_Nodes_Top(o); end

  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:21
  def visit_Arel_Visitors_MSSQL_RowNumber(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/mssql.rb:5
class Arel::Visitors::MSSQL::RowNumber < ::Struct
  # Returns the value of attribute children
  #
  # @return [Object] the current value of children
  def children; end

  # Sets the attribute children
  #
  # @param value [Object] the value to set the attribute children to.
  # @return [Object] the newly set value
  #
  # source://arel-9.0.0/lib/arel/visitors/mssql.rb:5
  def children=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://arel-9.0.0/lib/arel/visitors/mysql.rb:4
class Arel::Visitors::MySQL < ::Arel::Visitors::ToSql
  private

  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:34
  def visit_Arel_Nodes_Bin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:76
  def visit_Arel_Nodes_Concat(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:49
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # :'(
  # http://dev.mysql.com/doc/refman/5.0/en/select.html#id3482214
  #
  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:42
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:6
  def visit_Arel_Nodes_Union(o, collector, suppress_parens = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/visitors/mysql.rb:54
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/oracle.rb:4
class Arel::Visitors::Oracle < ::Arel::Visitors::ToSql
  private

  # Hacks for the order clauses specific to Oracle
  #
  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:103
  def order_hacks(o); end

  # Split string by commas but count opening and closing brackets
  # and ignore commas inside brackets.
  #
  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:132
  def split_order_string(string); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:147
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:83
  def visit_Arel_Nodes_Except(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:74
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:78
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:7
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle.rb:89
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/oracle12.rb:4
class Arel::Visitors::Oracle12 < ::Arel::Visitors::ToSql
  private

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:55
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:37
  def visit_Arel_Nodes_Except(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:25
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:31
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:19
  def visit_Arel_Nodes_SelectOptions(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:7
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/oracle12.rb:43
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/postgresql.rb:4
class Arel::Visitors::PostgreSQL < ::Arel::Visitors::ToSql
  private

  # Utilized by GroupingSet, Cube & RollUp visitors to
  # handle grouping aggregation semantics
  #
  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:74
  def grouping_array_or_grouping_element(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:48
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:57
  def visit_Arel_Nodes_Cube(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:43
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:22
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:52
  def visit_Arel_Nodes_GroupingElement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:67
  def visit_Arel_Nodes_GroupingSet(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:11
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:38
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:33
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/postgresql.rb:62
  def visit_Arel_Nodes_RollUp(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/postgresql.rb:5
Arel::Visitors::PostgreSQL::CUBE = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/postgresql.rb:7
Arel::Visitors::PostgreSQL::GROUPING_SET = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/postgresql.rb:6
Arel::Visitors::PostgreSQL::ROLLUP = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/reduce.rb:6
class Arel::Visitors::Reduce < ::Arel::Visitors::Visitor
  # source://arel-9.0.0/lib/arel/visitors/reduce.rb:7
  def accept(object, collector); end

  private

  # source://arel-9.0.0/lib/arel/visitors/reduce.rb:13
  def visit(object, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/sqlite.rb:4
class Arel::Visitors::SQLite < ::Arel::Visitors::ToSql
  private

  # source://arel-9.0.0/lib/arel/visitors/sqlite.rb:21
  def visit_Arel_Nodes_False(o, collector); end

  # Locks are not supported in SQLite
  #
  # source://arel-9.0.0/lib/arel/visitors/sqlite.rb:8
  def visit_Arel_Nodes_Lock(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/sqlite.rb:12
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/sqlite.rb:17
  def visit_Arel_Nodes_True(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:56
class Arel::Visitors::ToSql < ::Arel::Visitors::Reduce
  # @return [ToSql] a new instance of ToSql
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:68
  def initialize(connection); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:73
  def compile(node, &block); end

  private

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:835
  def aggregate(name, o, collector); end

  # FIXME: we should probably have a 2-pass visitor for this
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:91
  def build_subselect(key, o); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:265
  def collect_nodes_for(nodes, collector, spacer, connector = T.unsafe(nil)); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:829
  def infix_value(o, collector, value); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:818
  def inject_join(list, collector, join_str); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:738
  def literal(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:812
  def maybe_visit(thing, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:797
  def quote(value); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:807
  def quote_column_name(name); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:802
  def quote_table_name(name); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:749
  def quoted(o, a); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def unsupported(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_ActiveSupport_StringInquirer(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Attribute(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Boolean(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Decimal(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Float(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Integer(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_String(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:727
  def visit_Arel_Attributes_Time(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:776
  def visit_Arel_Nodes_Addition(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:638
  def visit_Arel_Nodes_And(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:687
  def visit_Arel_Nodes_As(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:434
  def visit_Arel_Nodes_Ascending(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:648
  def visit_Arel_Nodes_Assignment(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:480
  def visit_Arel_Nodes_Avg(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:490
  def visit_Arel_Nodes_Between(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:276
  def visit_Arel_Nodes_Bin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:740
  def visit_Arel_Nodes_BindParam(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:693
  def visit_Arel_Nodes_Case(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:153
  def visit_Arel_Nodes_Casted(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:464
  def visit_Arel_Nodes_Count(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:384
  def visit_Arel_Nodes_CurrentRow(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:79
  def visit_Arel_Nodes_DeleteStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:438
  def visit_Arel_Nodes_Descending(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:280
  def visit_Arel_Nodes_Distinct(o, collector); end

  # @raise [NotImplementedError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:284
  def visit_Arel_Nodes_DistinctOn(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:776
  def visit_Arel_Nodes_Division(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:532
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:717
  def visit_Arel_Nodes_Else(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:661
  def visit_Arel_Nodes_Equality(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:313
  def visit_Arel_Nodes_Except(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:142
  def visit_Arel_Nodes_Exists(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:459
  def visit_Arel_Nodes_Extract(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:165
  def visit_Arel_Nodes_False(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:374
  def visit_Arel_Nodes_Following(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:567
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:502
  def visit_Arel_Nodes_GreaterThan(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:496
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:442
  def visit_Arel_Nodes_Group(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:420
  def visit_Arel_Nodes_Grouping(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:617
  def visit_Arel_Nodes_In(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:776
  def visit_Arel_Nodes_InfixOperation(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:588
  def visit_Arel_Nodes_InnerJoin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:124
  def visit_Arel_Nodes_InsertStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:308
  def visit_Arel_Nodes_Intersect(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:544
  def visit_Arel_Nodes_JoinSource(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:514
  def visit_Arel_Nodes_LessThan(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:508
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:406
  def visit_Arel_Nodes_Limit(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:416
  def visit_Arel_Nodes_Lock(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:520
  def visit_Arel_Nodes_Matches(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:472
  def visit_Arel_Nodes_Max(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:476
  def visit_Arel_Nodes_Min(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:776
  def visit_Arel_Nodes_Multiplication(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:446
  def visit_Arel_Nodes_NamedFunction(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:318
  def visit_Arel_Nodes_NamedWindow(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:604
  def visit_Arel_Nodes_Not(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:674
  def visit_Arel_Nodes_NotEqual(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:627
  def visit_Arel_Nodes_NotIn(o, collector); end

  # @raise [NotImplementedError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:559
  def visit_Arel_Nodes_NotRegexp(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:401
  def visit_Arel_Nodes_Offset(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:599
  def visit_Arel_Nodes_On(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:642
  def visit_Arel_Nodes_Or(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:574
  def visit_Arel_Nodes_OuterJoin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:388
  def visit_Arel_Nodes_Over(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:364
  def visit_Arel_Nodes_Preceding(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:157
  def visit_Arel_Nodes_Quoted(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:355
  def visit_Arel_Nodes_Range(o, collector); end

  # @raise [NotImplementedError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:555
  def visit_Arel_Nodes_Regexp(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:581
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:346
  def visit_Arel_Nodes_Rows(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:240
  def visit_Arel_Nodes_SelectCore(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:234
  def visit_Arel_Nodes_SelectOptions(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:210
  def visit_Arel_Nodes_SelectStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:738
  def visit_Arel_Nodes_SqlLiteral(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:563
  def visit_Arel_Nodes_StringJoin(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:776
  def visit_Arel_Nodes_Subtraction(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:468
  def visit_Arel_Nodes_Sum(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:484
  def visit_Arel_Nodes_TableAlias(o, collector); end

  # FIXME: this does nothing on most databases, but does on MSSQL
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:412
  def visit_Arel_Nodes_Top(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:161
  def visit_Arel_Nodes_True(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:787
  def visit_Arel_Nodes_UnaryOperation(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:298
  def visit_Arel_Nodes_Union(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:303
  def visit_Arel_Nodes_UnionAll(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:722
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:102
  def visit_Arel_Nodes_UpdateStatement(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:191
  def visit_Arel_Nodes_Values(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:169
  def visit_Arel_Nodes_ValuesList(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:710
  def visit_Arel_Nodes_When(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:324
  def visit_Arel_Nodes_Window(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:288
  def visit_Arel_Nodes_With(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:293
  def visit_Arel_Nodes_WithRecursive(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:429
  def visit_Arel_SelectManager(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:609
  def visit_Arel_Table(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:792
  def visit_Array(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_BigDecimal(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:738
  def visit_Bignum(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Class(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Date(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_DateTime(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_FalseClass(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:738
  def visit_Fixnum(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Float(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Hash(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:738
  def visit_Integer(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_NilClass(o, collector); end

  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:792
  def visit_Set(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_String(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Symbol(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_Time(o, collector); end

  # @raise [UnsupportedVisitError]
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:757
  def visit_TrueClass(o, collector); end
end

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:64
Arel::Visitors::ToSql::AND = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:60
Arel::Visitors::ToSql::COMMA = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:66
Arel::Visitors::ToSql::DISTINCT = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:61
Arel::Visitors::ToSql::GROUP_BY = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:62
Arel::Visitors::ToSql::ORDER_BY = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:59
Arel::Visitors::ToSql::SPACE = T.let(T.unsafe(nil), String)

# This is some roflscale crazy stuff.  I'm roflscaling this because
# building SQL queries is a hotspot.  I will explain the roflscale so that
# others will not rm this code.
#
# In YARV, string literals in a method body will get duped when the byte
# code is executed.  Let's take a look:
#
# > puts RubyVM::InstructionSequence.new('def foo; "bar"; end').disasm
#
#   == disasm: <RubyVM::InstructionSequence:foo@<compiled>>=====
#    0000 trace            8
#    0002 trace            1
#    0004 putstring        "bar"
#    0006 trace            16
#    0008 leave
#
# The `putstring` bytecode will dup the string and push it on the stack.
# In many cases in our SQL visitor, that string is never mutated, so there
# is no need to dup the literal.
#
# If we change to a constant lookup, the string will not be duped, and we
# can reduce the objects in our system:
#
# > puts RubyVM::InstructionSequence.new('BAR = "bar"; def foo; BAR; end').disasm
#
#  == disasm: <RubyVM::InstructionSequence:foo@<compiled>>========
#  0000 trace            8
#  0002 trace            1
#  0004 getinlinecache   11, <ic:0>
#  0007 getconstant      :BAR
#  0009 setinlinecache   <ic:0>
#  0011 trace            16
#  0013 leave
#
# `getconstant` should be a hash lookup, and no object is duped when the
# value of the constant is pushed on the stack.  Hence the crazy
# constants below.
#
# `matches` and `doesNotMatch` operate case-insensitively via Visitor subclasses
# specialized for specific databases when necessary.
#
# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:58
Arel::Visitors::ToSql::WHERE = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:63
Arel::Visitors::ToSql::WINDOW = T.let(T.unsafe(nil), String)

# source://arel-9.0.0/lib/arel/visitors/to_sql.rb:8
class Arel::Visitors::UnsupportedVisitError < ::StandardError
  # @return [UnsupportedVisitError] a new instance of UnsupportedVisitError
  #
  # source://arel-9.0.0/lib/arel/visitors/to_sql.rb:9
  def initialize(object); end
end

# source://arel-9.0.0/lib/arel/visitors/visitor.rb:4
class Arel::Visitors::Visitor
  # @return [Visitor] a new instance of Visitor
  #
  # source://arel-9.0.0/lib/arel/visitors/visitor.rb:5
  def initialize; end

  # source://arel-9.0.0/lib/arel/visitors/visitor.rb:9
  def accept(object); end

  private

  # source://arel-9.0.0/lib/arel/visitors/visitor.rb:25
  def dispatch; end

  # source://arel-9.0.0/lib/arel/visitors/visitor.rb:21
  def get_dispatch_cache; end

  # source://arel-9.0.0/lib/arel/visitors/visitor.rb:29
  def visit(object); end

  class << self
    # source://arel-9.0.0/lib/arel/visitors/visitor.rb:15
    def dispatch_cache; end
  end
end

# source://arel-9.0.0/lib/arel/visitors/where_sql.rb:4
class Arel::Visitors::WhereSql < ::Arel::Visitors::ToSql
  # @return [WhereSql] a new instance of WhereSql
  #
  # source://arel-9.0.0/lib/arel/visitors/where_sql.rb:5
  def initialize(inner_visitor, *args, &block); end

  private

  # source://arel-9.0.0/lib/arel/visitors/where_sql.rb:12
  def visit_Arel_Nodes_SelectCore(o, collector); end
end

# source://arel-9.0.0/lib/arel/window_predications.rb:3
module Arel::WindowPredications
  # source://arel-9.0.0/lib/arel/window_predications.rb:5
  def over(expr = T.unsafe(nil)); end
end
