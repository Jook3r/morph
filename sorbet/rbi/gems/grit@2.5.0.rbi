# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `grit` gem.
# Please instead update this file by running `bin/tapioca gem grit`.

# have to do this so it doesn't interfere with Grit::Diff
#
# source://grit-2.5.0/lib/grit/git-ruby/repository.rb:21
module Difference
  include ::Diff
end

# converted from the gitrb project
#
# authors:
#    Matthias Lederhofer <matled@gmx.net>
#    Simon 'corecode' Schubert <corecode@fs.ei.tum.de>
#    Scott Chacon <schacon@gmail.com>
#
# provides native ruby access to git objects and pack files
#
# source://grit-2.5.0/lib/grit/errors.rb:1
module Grit
  class << self
    # Set +debug+ to true to log all git calls and responses
    #
    # source://grit-2.5.0/lib/grit.rb:56
    def debug; end

    # Set +debug+ to true to log all git calls and responses
    #
    # source://grit-2.5.0/lib/grit.rb:56
    def debug=(_arg0); end

    # source://grit-2.5.0/lib/grit.rb:62
    def log(str); end

    # The standard +logger+ for debugging git calls - this defaults to a plain STDOUT logger
    #
    # source://grit-2.5.0/lib/grit.rb:61
    def logger; end

    # The standard +logger+ for debugging git calls - this defaults to a plain STDOUT logger
    #
    # source://grit-2.5.0/lib/grit.rb:61
    def logger=(_arg0); end

    # Returns the value of attribute no_quote.
    #
    # source://grit-2.5.0/lib/grit.rb:58
    def no_quote; end

    # Sets the attribute no_quote
    #
    # @param value the value to set the attribute no_quote to.
    #
    # source://grit-2.5.0/lib/grit.rb:58
    def no_quote=(_arg0); end

    # Returns the value of attribute use_git_ruby.
    #
    # source://grit-2.5.0/lib/grit.rb:57
    def use_git_ruby; end

    # Sets the attribute use_git_ruby
    #
    # @param value the value to set the attribute use_git_ruby to.
    #
    # source://grit-2.5.0/lib/grit.rb:57
    def use_git_ruby=(_arg0); end

    # source://grit-2.5.0/lib/grit.rb:72
    def version; end
  end
end

# source://grit-2.5.0/lib/grit/actor.rb:3
class Grit::Actor
  # @return [Actor] a new instance of Actor
  #
  # source://grit-2.5.0/lib/grit/actor.rb:7
  def initialize(name, email); end

  # Returns the value of attribute email.
  #
  # source://grit-2.5.0/lib/grit/actor.rb:5
  def email; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/actor.rb:47
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/actor.rb:4
  def name; end

  # Outputs an actor string for Git commits.
  #
  #   actor = Actor.new('bob', 'bob@email.com')
  #   actor.output(time) # => "bob <bob@email.com> UNIX_TIME +0700"
  #
  # time - The Time the commit was authored or committed.
  #
  # Returns a String.
  #
  # source://grit-2.5.0/lib/grit/actor.rb:36
  def output(time); end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/actor.rb:4
  def to_s; end

  class << self
    # Create an Actor from a string.
    #
    # str - The String in this format: 'John Doe <jdoe@example.com>'
    #
    # Returns Git::Actor.
    #
    # source://grit-2.5.0/lib/grit/actor.rb:18
    def from_string(str); end
  end
end

# source://grit-2.5.0/lib/grit/blame.rb:3
class Grit::Blame
  # @return [Blame] a new instance of Blame
  #
  # source://grit-2.5.0/lib/grit/blame.rb:7
  def initialize(repo, file, commit, lines = T.unsafe(nil)); end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/blame.rb:54
  def inspect; end

  # Returns the value of attribute lines.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:5
  def lines; end

  # source://grit-2.5.0/lib/grit/blame.rb:19
  def load_blame; end

  # source://grit-2.5.0/lib/grit/blame.rb:24
  def process_raw_blame(output); end
end

# source://grit-2.5.0/lib/grit/blame.rb:58
class Grit::Blame::BlameLine
  # @return [BlameLine] a new instance of BlameLine
  #
  # source://grit-2.5.0/lib/grit/blame.rb:60
  def initialize(lineno, oldlineno, commit, line); end

  # Returns the value of attribute commit.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def commit; end

  # Sets the attribute commit
  #
  # @param value the value to set the attribute commit to.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def commit=(_arg0); end

  # Returns the value of attribute line.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def line; end

  # Sets the attribute line
  #
  # @param value the value to set the attribute line to.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def line=(_arg0); end

  # Returns the value of attribute lineno.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def lineno=(_arg0); end

  # Returns the value of attribute oldlineno.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def oldlineno; end

  # Sets the attribute oldlineno
  #
  # @param value the value to set the attribute oldlineno to.
  #
  # source://grit-2.5.0/lib/grit/blame.rb:59
  def oldlineno=(_arg0); end
end

# source://grit-2.5.0/lib/grit/blob.rb:3
class Grit::Blob
  # Compares blobs by name
  #
  # source://grit-2.5.0/lib/grit/blob.rb:121
  def <=>(other); end

  # source://grit-2.5.0/lib/grit/blob.rb:111
  def basename; end

  # Initializer for Blob.create
  #   +repo+ is the Repo
  #   +atts+ is a Hash of instance variable data
  #
  # Returns Grit::Blob (unbaked)
  #
  # source://grit-2.5.0/lib/grit/blob.rb:24
  def create_initialize(repo, atts); end

  # The binary contents of this blob.
  #
  # Returns String
  #
  # source://grit-2.5.0/lib/grit/blob.rb:42
  def data; end

  # Returns the value of attribute id.
  #
  # source://grit-2.5.0/lib/grit/blob.rb:6
  def id; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/blob.rb:116
  def inspect; end

  # The mime type of this file (based on the filename)
  #
  # Returns String
  #
  # source://grit-2.5.0/lib/grit/blob.rb:49
  def mime_type; end

  # Returns the value of attribute mode.
  #
  # source://grit-2.5.0/lib/grit/blob.rb:7
  def mode; end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/blob.rb:8
  def name; end

  # The size of this blob in bytes
  #
  # Returns Integer
  #
  # source://grit-2.5.0/lib/grit/blob.rb:35
  def size; end

  class << self
    # The blame information for the given file at the given commit
    #
    # Returns Array: [Grit::Commit, Array: [<line>]]
    #
    # source://grit-2.5.0/lib/grit/blob.rb:57
    def blame(repo, commit, file); end

    # Create an unbaked Blob containing just the specified attributes
    #   +repo+ is the Repo
    #   +atts+ is a Hash of instance variable data
    #
    # Returns Grit::Blob (unbaked)
    #
    # source://grit-2.5.0/lib/grit/blob.rb:15
    def create(repo, atts); end
  end
end

# source://grit-2.5.0/lib/grit/blob.rb:4
Grit::Blob::DEFAULT_MIME_TYPE = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/commit.rb:3
class Grit::Commit
  extend ::Lazy

  # Instantiate a new Commit
  #   +id+ is the id of the commit
  #   +parents+ is an array of commit ids (will be converted into Commit instances)
  #   +tree+ is the correspdonding tree id (will be converted into a Tree object)
  #   +author+ is the author string
  #   +authored_date+ is the authored Time
  #   +committer+ is the committer string
  #   +committed_date+ is the committed Time
  #   +message+ is an array of commit message lines
  #
  # Returns Grit::Commit (baked)
  #
  # @return [Commit] a new instance of Commit
  #
  # source://grit-2.5.0/lib/grit/commit.rb:53
  def initialize(repo, id, parents, tree, author, authored_date, committer, committed_date, message); end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def author; end

  # source://grit-2.5.0/lib/grit/commit.rb:289
  def author_string; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def authored_date; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def committed_date; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def committer; end

  # Initializer for Commit.create
  #   +repo+ is the Repo
  #   +atts+ is a Hash of instance variable data
  #
  # Returns Grit::Commit (unbaked)
  #
  # source://grit-2.5.0/lib/grit/commit.rb:84
  def create_initialize(repo, atts); end

  # source://grit-2.5.0/lib/grit/commit.rb:240
  def date; end

  # Shows diffs between the commit's parent and the commit.
  #
  # options - An optional Hash of options, passed to Grit::Commit.diff.
  #
  # Returns Grit::Diff[] (baked)
  #
  # source://grit-2.5.0/lib/grit/commit.rb:219
  def diffs(options = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://grit-2.5.0/lib/grit/commit.rb:6
  def id; end

  # source://grit-2.5.0/lib/grit/commit.rb:66
  def id_abbrev; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/commit.rb:275
  def inspect; end

  # source://grit-2.5.0/lib/grit/commit.rb:92
  def lazy_source; end

  # source://grit-2.5.0/lib/grit/lazy.rb:20
  def lazy_source=(_arg0); end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def message; end

  # source://grit-2.5.0/lib/grit/commit.rb:248
  def notes; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def parents; end

  # Calculates the commit's Patch ID. The Patch ID is essentially the SHA1
  # of the diff that the commit is introducing.
  #
  # Returns the 40 character hex String if a patch-id could be calculated
  #   or nil otherwise.
  #
  # source://grit-2.5.0/lib/grit/commit.rb:264
  def patch_id; end

  # Returns the value of attribute repo.
  #
  # source://grit-2.5.0/lib/grit/commit.rb:7
  def repo; end

  # source://grit-2.5.0/lib/grit/commit.rb:236
  def sha; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def short_message; end

  # source://grit-2.5.0/lib/grit/commit.rb:199
  def show; end

  # source://grit-2.5.0/lib/grit/commit.rb:227
  def stats; end

  # source://grit-2.5.0/lib/grit/commit.rb:293
  def to_hash; end

  # source://grit-2.5.0/lib/grit/commit.rb:244
  def to_patch; end

  # Convert this Commit to a String which is just the SHA1 id
  #
  # source://grit-2.5.0/lib/grit/commit.rb:232
  def to_s; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def tree; end

  class << self
    # Parse out the actor (author or committer) info
    #
    # Returns [String (actor name and email), Time (acted at time)]
    #
    # source://grit-2.5.0/lib/grit/commit.rb:284
    def actor(line); end

    # Count the number of commits reachable from this ref
    #   +repo+ is the Repo
    #   +ref+ is the ref from which to begin (SHA1 or name)
    #
    # Returns Integer
    #
    # source://grit-2.5.0/lib/grit/commit.rb:101
    def count(repo, ref); end

    # Create an unbaked Commit containing just the specified attributes
    #   +repo+ is the Repo
    #   +atts+ is a Hash of instance variable data
    #
    # Returns Grit::Commit (unbaked)
    #
    # source://grit-2.5.0/lib/grit/commit.rb:75
    def create(repo, atts); end

    # Show diffs between two trees.
    #
    # repo    - The current Grit::Repo instance.
    # a       - A String named commit.
    # b       - An optional String named commit.  Passing an array assumes you
    #           wish to omit the second named commit and limit the diff to the
    #           given paths.
    # paths   - An optional Array of paths to limit the diff.
    # options - An optional Hash of options.  Merged into {:full_index => true}.
    #
    # Returns Grit::Diff[] (baked)
    #
    # source://grit-2.5.0/lib/grit/commit.rb:186
    def diff(repo, a, b = T.unsafe(nil), paths = T.unsafe(nil), options = T.unsafe(nil)); end

    # Find all commits matching the given criteria.
    #   +repo+ is the Repo
    #   +ref+ is the ref from which to begin (SHA1 or name) or nil for --all
    #   +options+ is a Hash of optional arguments to git
    #     :max_count is the maximum number of commits to fetch
    #     :skip is the number of commits to skip
    #
    # Returns Grit::Commit[] (baked)
    #
    # source://grit-2.5.0/lib/grit/commit.rb:113
    def find_all(repo, ref, options = T.unsafe(nil)); end

    # Parse out commit information into an array of baked Commit objects
    #   +repo+ is the Repo
    #   +text+ is the text output from the git command (raw format)
    #
    # Returns Grit::Commit[] (baked)
    #
    # really should re-write this to be more accepting of non-standard commit messages
    # - it broke when 'encoding' was introduced - not sure what else might show up
    #
    # source://grit-2.5.0/lib/grit/commit.rb:139
    def list_from_string(repo, text); end

    # Parses output from the `git-cat-file --batch'.
    #
    # repo   - Grit::Repo instance.
    # sha    - String SHA of the Commit.
    # size   - Fixnum size of the object.
    # object - Parsed String output from `git cat-file --batch`.
    #
    # Returns an Array of Grit::Commit objects.
    #
    # source://grit-2.5.0/lib/grit/commit.rb:25
    def parse_batch(repo, sha, size, object); end
  end
end

# source://grit-2.5.0/lib/grit/commit_stats.rb:3
class Grit::CommitStats
  # Instantiate a new CommitStats
  #   +id+ is the id of the commit
  #   +files+ is an array of :
  #     [ [filename, adds, deletes, total],
  #       [filename, adds, deletes, total],
  #       [filename, adds, deletes, total] ]
  #
  # Returns Grit::CommitStats (baked)
  #
  # @return [CommitStats] a new instance of CommitStats
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:15
  def initialize(repo, id, files); end

  # Returns the value of attribute additions.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:5
  def additions; end

  # Returns the value of attribute deletions.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:5
  def deletions; end

  # Returns the value of attribute files.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:5
  def files; end

  # Returns the value of attribute id.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:5
  def id; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:87
  def inspect; end

  # Convert to an easy-to-traverse structure
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:92
  def to_diffstat; end

  # private
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:100
  def to_hash; end

  # Returns the value of attribute total.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:5
  def total; end

  class << self
    # Find all commit stats matching the given criteria.
    #   +repo+ is the Repo
    #   +ref+ is the ref from which to begin (SHA1 or name) or nil for --all
    #   +options+ is a Hash of optional arguments to git
    #     :max_count is the maximum number of commits to fetch
    #     :skip is the number of commits to skip
    #
    # Returns assoc array [sha, Grit::Commit[] (baked)]
    #
    # source://grit-2.5.0/lib/grit/commit_stats.rb:32
    def find_all(repo, ref, options = T.unsafe(nil)); end

    # Parse out commit information into an array of baked Commit objects
    #   +repo+ is the Repo
    #   +text+ is the text output from the git command (raw format)
    #
    # Returns assoc array [sha, Grit::Commit[] (baked)]
    #
    # source://grit-2.5.0/lib/grit/commit_stats.rb:52
    def list_from_string(repo, text); end
  end
end

# source://grit-2.5.0/lib/grit/config.rb:3
class Grit::Config
  # @return [Config] a new instance of Config
  #
  # source://grit-2.5.0/lib/grit/config.rb:4
  def initialize(repo); end

  # source://grit-2.5.0/lib/grit/config.rb:13
  def [](key); end

  # source://grit-2.5.0/lib/grit/config.rb:8
  def []=(key, value); end

  # source://grit-2.5.0/lib/grit/config.rb:17
  def fetch(key, default = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/config.rb:21
  def keys; end

  protected

  # source://grit-2.5.0/lib/grit/config.rb:39
  def config_lines; end

  # source://grit-2.5.0/lib/grit/config.rb:26
  def data; end

  # source://grit-2.5.0/lib/grit/config.rb:30
  def load_config; end
end

# source://grit-2.5.0/lib/grit/diff.rb:3
class Grit::Diff
  # @return [Diff] a new instance of Diff
  #
  # source://grit-2.5.0/lib/grit/diff.rb:11
  def initialize(repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff, renamed_file = T.unsafe(nil), similarity_index = T.unsafe(nil)); end

  # Returns the value of attribute a_blob.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:5
  def a_blob; end

  # Returns the value of attribute a_mode.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:6
  def a_mode; end

  # Returns the value of attribute a_path.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:4
  def a_path; end

  # Returns the value of attribute b_blob.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:5
  def b_blob; end

  # Returns the value of attribute b_mode.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:6
  def b_mode; end

  # Returns the value of attribute b_path.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:4
  def b_path; end

  # Returns the value of attribute deleted_file.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:7
  def deleted_file; end

  # Returns the value of attribute diff.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:9
  def diff; end

  # Sets the attribute diff
  #
  # @param value the value to set the attribute diff to.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:9
  def diff=(_arg0); end

  # Returns the value of attribute new_file.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:7
  def new_file; end

  # Returns the value of attribute renamed_file.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:7
  def renamed_file; end

  # Returns the value of attribute similarity_index.
  #
  # source://grit-2.5.0/lib/grit/diff.rb:8
  def similarity_index; end

  class << self
    # source://grit-2.5.0/lib/grit/diff.rb:26
    def list_from_string(repo, text); end
  end
end

# CommitStats
#
# source://grit-2.5.0/lib/grit/commit_stats.rb:112
class Grit::DiffStat
  # @return [DiffStat] a new instance of DiffStat
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:115
  def initialize(filename, additions, deletions, total = T.unsafe(nil)); end

  # Returns the value of attribute additions.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:113
  def additions; end

  # Returns the value of attribute deletions.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:113
  def deletions; end

  # Returns the value of attribute filename.
  #
  # source://grit-2.5.0/lib/grit/commit_stats.rb:113
  def filename; end

  # source://grit-2.5.0/lib/grit/commit_stats.rb:123
  def inspect; end

  # source://grit-2.5.0/lib/grit/commit_stats.rb:119
  def net; end
end

# source://grit-2.5.0/lib/grit/git.rb:5
class Grit::Git
  include ::POSIX::Spawn
  include ::Grit::GitRuby

  # @return [Git] a new instance of Git
  #
  # source://grit-2.5.0/lib/grit/git.rb:96
  def initialize(git_dir); end

  # Applies the given patch against the given SHA of the current repo.
  #
  # options  - grit command hash
  # head_sha - String SHA or ref to apply the patch to.
  # patch    - The String patch to apply.  Get this from #get_patch.
  #
  # Returns the String Tree SHA on a successful patch application, or false.
  #
  # source://grit-2.5.0/lib/grit/git.rb:252
  def apply_patch(options = T.unsafe(nil), head_sha = T.unsafe(nil), patch = T.unsafe(nil)); end

  # Returns the value of attribute bytes_read.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def bytes_read; end

  # Sets the attribute bytes_read
  #
  # @param value the value to set the attribute bytes_read to.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def bytes_read=(_arg0); end

  # Checks if the patch of a commit can be applied to the given head.
  #
  # options     - grit command options hash
  # head_sha    - String SHA or ref to check the patch against.
  # applies_sha - String SHA of the patch.  The patch itself is retrieved
  #               with #get_patch.
  #
  # Returns 0 if the patch applies cleanly (according to `git apply`), or
  # an Integer that is the sum of the failed exit statuses.
  #
  # source://grit-2.5.0/lib/grit/git.rb:207
  def check_applies(options = T.unsafe(nil), head_sha = T.unsafe(nil), applies_sha = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git.rb:185
  def commit_from_sha(id); end

  # source://grit-2.5.0/lib/grit/git.rb:179
  def create_tempfile(seed, unlink = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git.rb:102
  def e(str); end

  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git.rb:47
  def exist?; end

  # Chmod the the file or dir and everything beneath
  #   +file+ is the relative path from the Git dir
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/git.rb:165
  def fs_chmod(mode, file = T.unsafe(nil)); end

  # Delete a normal file from the filesystem
  #   +file+ is the relative path from the Git dir
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/git.rb:140
  def fs_delete(file); end

  # Check if a normal file exists on the filesystem
  #   +file+ is the relative path from the Git dir
  #
  # Returns Boolean
  #
  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git.rb:111
  def fs_exist?(file); end

  # Make a directory
  #   +dir+ is the relative path to the directory to create
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/git.rb:157
  def fs_mkdir(dir); end

  # Move a normal file
  #   +from+ is the relative path to the current file
  #   +to+ is the relative path to the destination file
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/git.rb:149
  def fs_move(from, to); end

  # Read a normal file from the filesystem.
  #   +file+ is the relative path from the Git dir
  #
  # Returns the String contents of the file
  #
  # source://grit-2.5.0/lib/grit/git.rb:119
  def fs_read(file); end

  # Write a normal file to the filesystem.
  #   +file+ is the relative path from the Git dir
  #   +contents+ is the String content to be written
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/git.rb:128
  def fs_write(file, contents); end

  # source://grit-2.5.0/lib/grit/git.rb:59
  def get_git_object(object_id); end

  # Gets a patch for a given SHA using `git diff`.
  #
  # options     - grit command options hash
  # applies_sha - String SHA to get the patch from, using this command:
  #               `git diff #{applies_sha}^ #{applies_sha}`
  #
  # Returns the String patch from `git diff`.
  #
  # source://grit-2.5.0/lib/grit/git.rb:234
  def get_patch(options = T.unsafe(nil), applies_sha = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git.rb:55
  def get_raw_object(object_id); end

  # Returns the value of attribute git_dir.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def git_dir; end

  # Sets the attribute git_dir
  #
  # @param value the value to set the attribute git_dir to.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def git_dir=(_arg0); end

  # source://grit-2.5.0/lib/grit/git.rb:169
  def list_remotes; end

  # Methods not defined by a library implementation execute the git command
  # using #native, passing the method name as the git command name.
  #
  # Examples:
  #   git.rev_list({:max_count => 10, :header => true}, "master")
  #
  # source://grit-2.5.0/lib/grit/git.rb:371
  def method_missing(cmd, options = T.unsafe(nil), *args, &block); end

  # Execute a git command, bypassing any library implementation.
  #
  # cmd - The name of the git command as a Symbol. Underscores are
  #   converted to dashes as in :rev_parse => 'rev-parse'.
  # options - Command line option arguments passed to the git command.
  #   Single char keys are converted to short options (:a => -a).
  #   Multi-char keys are converted to long options (:arg => '--arg').
  #   Underscores in keys are converted to dashes. These special options
  #   are used to control command execution and are not passed in command
  #   invocation:
  #     :timeout - Maximum amount of time the command can run for before
  #       being aborted. When true, use Grit::Git.git_timeout; when numeric,
  #       use that number of seconds; when false or 0, disable timeout.
  #     :base - Set false to avoid passing the --git-dir argument when
  #       invoking the git command.
  #     :env - Hash of environment variable key/values that are set on the
  #       child process.
  #     :raise - When set true, commands that exit with a non-zero status
  #       raise a CommandFailed exception. This option is available only on
  #       platforms that support fork(2).
  #     :process_info - By default, a single string with output written to
  #       the process's stdout is returned. Setting this option to true
  #       results in a [exitstatus, out, err] tuple being returned instead.
  # args - Non-option arguments passed on the command line.
  #
  # Optionally yields to the block an IO object attached to the child
  # process's STDIN.
  #
  # Examples
  #   git.native(:rev_list, {:max_count => 10, :header => true}, "master")
  #
  # Returns a String with all output written to the child process's stdout
  #   when the :process_info option is not set.
  # Returns a [exitstatus, out, err] tuple when the :process_info option is
  #   set. The exitstatus is an small integer that was the process's exit
  #   status. The out and err elements are the data written to stdout and
  #   stderr as Strings.
  # Raises Grit::Git::GitTimeout when the timeout is exceeded or when more
  #   than Grit::Git.git_max_size bytes are output.
  # Raises Grit::Git::CommandFailed when the :raise option is set true and the
  #   git command exits with a non-zero exit status. The CommandFailed's #command,
  #   #exitstatus, and #err attributes can be used to retrieve additional
  #   detail about the error.
  #
  # source://grit-2.5.0/lib/grit/git.rb:313
  def native(cmd, options = T.unsafe(nil), *args, &block); end

  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git.rb:63
  def object_exists?(object_id); end

  # Transform a ruby-style options hash to command-line arguments sutiable for
  # use with Kernel::exec. No shell escaping is performed.
  #
  # Returns an Array of String option arguments.
  #
  # source://grit-2.5.0/lib/grit/git.rb:379
  def options_to_argv(options); end

  # source://grit-2.5.0/lib/grit/git.rb:51
  def put_raw_object(content, type); end

  # DEPRECATED OPEN3-BASED COMMAND EXECUTION
  #
  # source://grit-2.5.0/lib/grit/git.rb:422
  def run(prefix, cmd, postfix, options, args, &block); end

  # source://grit-2.5.0/lib/grit/git.rb:67
  def select_existing_objects(object_ids); end

  # source://grit-2.5.0/lib/grit/git.rb:452
  def sh(command, &block); end

  # source://grit-2.5.0/lib/grit/git.rb:102
  def shell_escape(str); end

  # Simple wrapper around Timeout::timeout.
  #
  # seconds - Float number of seconds before a Timeout::Error is raised. When
  #   true, the Grit::Git.git_timeout value is used. When the timeout is less
  #   than or equal to 0, no timeout is established.
  #
  # Raises Timeout::Error when the timeout has elapsed.
  #
  # source://grit-2.5.0/lib/grit/git.rb:411
  def timeout_after(seconds); end

  # Transform Ruby style options into git command line options
  #   +options+ is a hash of Ruby style options
  #
  # Returns String[]
  #   e.g. ["--max-count=10", "--header"]
  #
  # source://grit-2.5.0/lib/grit/git.rb:474
  def transform_options(options); end

  # source://grit-2.5.0/lib/grit/git.rb:464
  def wild_sh(command, &block); end

  # Returns the value of attribute work_tree.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def work_tree; end

  # Sets the attribute work_tree
  #
  # @param value the value to set the attribute work_tree to.
  #
  # source://grit-2.5.0/lib/grit/git.rb:94
  def work_tree=(_arg0); end

  class << self
    # source://grit-2.5.0/lib/grit/git.rb:75
    def git_binary; end

    # Sets the attribute git_binary
    #
    # @param value the value to set the attribute git_binary to.
    #
    # source://grit-2.5.0/lib/grit/git.rb:81
    def git_binary=(_arg0); end

    # Returns the value of attribute git_max_size.
    #
    # source://grit-2.5.0/lib/grit/git.rb:74
    def git_max_size; end

    # Sets the attribute git_max_size
    #
    # @param value the value to set the attribute git_max_size to.
    #
    # source://grit-2.5.0/lib/grit/git.rb:74
    def git_max_size=(_arg0); end

    # Returns the value of attribute git_timeout.
    #
    # source://grit-2.5.0/lib/grit/git.rb:74
    def git_timeout; end

    # Sets the attribute git_timeout
    #
    # @param value the value to set the attribute git_timeout to.
    #
    # source://grit-2.5.0/lib/grit/git.rb:74
    def git_timeout=(_arg0); end

    # source://grit-2.5.0/lib/grit/git.rb:87
    def with_timeout(timeout = T.unsafe(nil)); end
  end
end

# Raised when a native git command exits with non-zero.
#
# source://grit-2.5.0/lib/grit/git.rb:20
class Grit::Git::CommandFailed < ::StandardError
  # @return [CommandFailed] a new instance of CommandFailed
  #
  # source://grit-2.5.0/lib/grit/git.rb:29
  def initialize(command, exitstatus = T.unsafe(nil), err = T.unsafe(nil)); end

  # The full git command that failed as a String.
  #
  # source://grit-2.5.0/lib/grit/git.rb:21
  def command; end

  # Everything output on the command's stderr as a String.
  #
  # source://grit-2.5.0/lib/grit/git.rb:27
  def err; end

  # The integer exit status.
  #
  # source://grit-2.5.0/lib/grit/git.rb:24
  def exitstatus; end
end

# source://grit-2.5.0/lib/grit/git.rb:8
class Grit::Git::GitTimeout < ::RuntimeError
  # @return [GitTimeout] a new instance of GitTimeout
  #
  # source://grit-2.5.0/lib/grit/git.rb:12
  def initialize(command = T.unsafe(nil), bytes_read = T.unsafe(nil)); end

  # Returns the value of attribute bytes_read.
  #
  # source://grit-2.5.0/lib/grit/git.rb:10
  def bytes_read; end

  # Sets the attribute bytes_read
  #
  # @param value the value to set the attribute bytes_read to.
  #
  # source://grit-2.5.0/lib/grit/git.rb:10
  def bytes_read=(_arg0); end

  # Returns the value of attribute command.
  #
  # source://grit-2.5.0/lib/grit/git.rb:9
  def command; end

  # Sets the attribute command
  #
  # @param value the value to set the attribute command to.
  #
  # source://grit-2.5.0/lib/grit/git.rb:9
  def command=(_arg0); end
end

# the functions in this module intercept the calls to git binary
# made buy the grit objects and attempts to run them in pure ruby
# if it will be faster, or if the git binary is not available (!!TODO!!)
#
# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:14
module Grit::GitRuby
  # source://grit-2.5.0/lib/grit/git-ruby.rb:20
  def cat_file(options, sha); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:32
  def cat_ref(options, ref); end

  # git diff --full-index 'ec037431382e83c3e95d4f2b3d145afbac8ea55d' 'f1ec1aea10986159456846b8a05615b87828d6c6'
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:46
  def diff(options, sha1, sha2 = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:194
  def file_size(ref); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:198
  def file_type(ref); end

  # Returns the value of attribute git_file_index.
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:10
  def git_file_index; end

  # Sets the attribute git_file_index
  #
  # @param value the value to set the attribute git_file_index to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:10
  def git_file_index=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:12
  def init(options, *args); end

  # lib/grit/tree.rb:16:      output = repo.git.ls_tree({}, treeish, *paths)
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:38
  def ls_tree(options, treeish, *paths); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:113
  def refs(options, prefix); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:50
  def rev_list(options, *refs); end

  # @raise [RuntimeError]
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:75
  def rev_parse(options, string); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:202
  def ruby_git; end

  # Returns the value of attribute ruby_git_repo.
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:10
  def ruby_git_repo; end

  # Sets the attribute ruby_git_repo
  #
  # @param value the value to set the attribute ruby_git_repo to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby.rb:10
  def ruby_git_repo=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:145
  def tags(options, prefix); end

  private

  # source://grit-2.5.0/lib/grit/git-ruby.rb:244
  def clean_paths(commit_array); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:228
  def looking_for(commit, path = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby.rb:208
  def try_run; end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:181
    def read_bytes_until(io, char); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:88
class Grit::GitRuby::Blob < ::Grit::GitRuby::GitObject
  # @return [Blob] a new instance of Blob
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:95
  def initialize(content, repository = T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:89
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:89
  def content=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:104
  def raw_content; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:100
  def type; end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:91
    def from_raw(rawobject, repository); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:234
class Grit::GitRuby::Commit < ::Grit::GitRuby::GitObject
  # @return [Commit] a new instance of Commit
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:264
  def initialize(tree, parent, author, committer, message, headers, repository = T.unsafe(nil)); end

  # Returns the value of attribute author.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def author; end

  # Sets the attribute author
  #
  # @param value the value to set the attribute author to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def author=(_arg0); end

  # Returns the value of attribute committer.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def committer; end

  # Sets the attribute committer
  #
  # @param value the value to set the attribute committer to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def committer=(_arg0); end

  # Returns the value of attribute headers.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def headers=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def message=(_arg0); end

  # Returns the value of attribute parent.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def parent=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:278
  def raw_content; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:285
  def raw_log(sha); end

  # Returns the value of attribute tree.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def tree; end

  # Sets the attribute tree
  #
  # @param value the value to set the attribute tree to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:235
  def tree=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:274
  def type; end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:237
    def from_raw(rawobject, repository = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:109
class Grit::GitRuby::DirectoryEntry
  # @return [DirectoryEntry] a new instance of DirectoryEntry
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:116
  def initialize(mode, filename, sha1o); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:171
  def format_mode; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:158
  def format_type; end

  # Returns the value of attribute mode.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def mode; end

  # Sets the attribute mode
  #
  # @param value the value to set the attribute mode to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def mode=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def name=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:175
  def raw; end

  # Returns the value of attribute sha1.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def sha1; end

  # Sets the attribute sha1
  #
  # @param value the value to set the attribute sha1 to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:115
  def sha1=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:128
  def type; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:143
  def type=(type); end
end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:113
Grit::GitRuby::DirectoryEntry::S_IFDIR = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:114
Grit::GitRuby::DirectoryEntry::S_IFGITLINK = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:111
Grit::GitRuby::DirectoryEntry::S_IFLNK = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:110
Grit::GitRuby::DirectoryEntry::S_IFMT = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:112
Grit::GitRuby::DirectoryEntry::S_IFREG = T.let(T.unsafe(nil), Integer)

# base class for all git objects (blob, tree, commit, tag)
#
# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:50
class Grit::GitRuby::GitObject
  # @raise [NotImplemented]
  # @return [GitObject] a new instance of GitObject
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:69
  def initialize; end

  # @raise [NotImplemented]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:77
  def raw_content; end

  # Returns the value of attribute repository.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:51
  def repository; end

  # Sets the attribute repository
  #
  # @param value the value to set the attribute repository to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:51
  def repository=(_arg0); end

  # Returns the value of attribute sha.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:52
  def sha; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:81
  def sha1; end

  # Sets the attribute sha
  #
  # @param value the value to set the attribute sha to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:52
  def sha=(_arg0); end

  # @raise [NotImplemented]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:73
  def type; end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:54
    def from_raw(rawobject, repository = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:15
module Grit::GitRuby::Internal; end

# source://grit-2.5.0/lib/grit/git-ruby/internal/file_window.rb:15
class Grit::GitRuby::Internal::FileWindow
  # @return [FileWindow] a new instance of FileWindow
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/file_window.rb:16
  def initialize(file, version = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/file_window.rb:30
  def [](*idx); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/file_window.rb:26
  def unmap; end
end

# source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:19
class Grit::GitRuby::Internal::LooseObjectError < ::StandardError; end

# source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:22
class Grit::GitRuby::Internal::LooseStorage
  # @return [LooseStorage] a new instance of LooseStorage
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:23
  def initialize(directory); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:27
  def [](sha1); end

  # @raise [LooseObjectError]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:38
  def get_raw_object(buf); end

  # currently, I'm using the legacy format because it's easier to do
  # this function takes content and a type and writes out the loose object and returns a sha
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:65
  def put_raw_object(content, type); end

  private

  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:129
  def legacy_loose_object?(buf); end

  # private
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:103
  def unpack_object_header_gently(buf); end

  class << self
    # simply figure out the sha
    #
    # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:87
    def calculate_sha(content, type); end

    # source://grit-2.5.0/lib/grit/git-ruby/internal/loose.rb:96
    def verify_header(type, size); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:19
Grit::GitRuby::Internal::OBJ_BLOB = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:17
Grit::GitRuby::Internal::OBJ_COMMIT = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:16
Grit::GitRuby::Internal::OBJ_NONE = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:20
Grit::GitRuby::Internal::OBJ_TAG = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:18
Grit::GitRuby::Internal::OBJ_TREE = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:22
Grit::GitRuby::Internal::OBJ_TYPES = T.let(T.unsafe(nil), Array)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:22
class Grit::GitRuby::Internal::PackFormatError < ::StandardError; end

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:25
class Grit::GitRuby::Internal::PackStorage
  # @return [PackStorage] a new instance of PackStorage
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:40
  def initialize(file); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:118
  def [](sha1); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:91
  def cache_objects; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:107
  def close; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:143
  def each_entry; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:183
  def each_sha1; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:201
  def find_object_in_index(idx, sha1); end

  # given an index file, list out the shas that it's packfile contains
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:112
  def get_shas; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:129
  def init_pack; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:103
  def name; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:49
  def with_idx(index_file = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:79
  def with_packfile; end

  protected

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:253
  def parse_object(offset); end

  private

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:244
  def find_object(sha1); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:345
  def patch_delta(base, delta); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:380
  def patch_delta_header_size(delta, pos); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:162
  def read_data_v2(idx); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:324
  def unpack_compressed(offset, destsize); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:294
  def unpack_deltified(packfile, type, offset, obj_offset, size, options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:263
  def unpack_object(packfile, offset, options = T.unsafe(nil)); end
end

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:34
Grit::GitRuby::Internal::PackStorage::CrcSize = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:37
Grit::GitRuby::Internal::PackStorage::EntrySize = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:38
Grit::GitRuby::Internal::PackStorage::EntrySizeV2 = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:33
Grit::GitRuby::Internal::PackStorage::ExtendedOffsetSize = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:29
Grit::GitRuby::Internal::PackStorage::FanOutCount = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:31
Grit::GitRuby::Internal::PackStorage::IdxOffsetSize = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:26
Grit::GitRuby::Internal::PackStorage::OBJ_OFS_DELTA = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:27
Grit::GitRuby::Internal::PackStorage::OBJ_REF_DELTA = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:32
Grit::GitRuby::Internal::PackStorage::OffsetSize = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:35
Grit::GitRuby::Internal::PackStorage::OffsetStart = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:30
Grit::GitRuby::Internal::PackStorage::SHA1Size = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:36
Grit::GitRuby::Internal::PackStorage::SHA1Start = T.let(T.unsafe(nil), Integer)

# source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:24
class Grit::GitRuby::Internal::RawObject
  # @return [RawObject] a new instance of RawObject
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:26
  def initialize(type, content); end

  # Returns the value of attribute content.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:25
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:25
  def content=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:31
  def sha1; end

  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:35
  def to_hash; end

  # Returns the value of attribute type.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:25
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/internal/raw_object.rb:25
  def type=(_arg0); end
end

# source://grit-2.5.0/lib/grit/git-ruby/repository.rb:27
class Grit::GitRuby::Repository
  # @return [Repository] a new instance of Repository
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:37
  def initialize(git_dir, options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:567
  def blame_tree(commit_sha, path); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:99
  def cached(key, object, do_cache = T.unsafe(nil)); end

  # returns the raw file contents of this sha
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:154
  def cat_file(sha); end

  # returns the file size (as an int) of this sha
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:149
  def cat_file_size(sha); end

  # returns the file type (as a symbol) of this sha
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:144
  def cat_file_type(sha); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:682
  def close; end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:395
  def diff(commit1, commit2, options = T.unsafe(nil)); end

  # returns true if the files in path_limiter were changed, or no path limiter
  # used by the log() function when passed with a path_limiter
  #
  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:535
  def files_changed?(tree_sha1, tree_sha2, path_limiter = T.unsafe(nil)); end

  # returns GitRuby object of any type given a SHA1
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:104
  def get_object_by_sha1(sha1); end

  # returns a raw object given a SHA1
  #
  # @raise [NoSuchShaFound]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:72
  def get_raw_object_by_sha1(sha1o); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:186
  def get_raw_tree(sha, recursive = T.unsafe(nil)); end

  # Grabs tree contents recursively,
  #   e.g. `git ls-tree -r sha`
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:204
  def get_raw_trees(sha, path = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:549
  def get_subtree(commit_sha, path); end

  # Returns the value of attribute git_dir.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:35
  def git_dir; end

  # Sets the attribute git_dir
  #
  # @param value the value to set the attribute git_dir to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:35
  def git_dir=(_arg0); end

  # returns true if the hex-packed sha is in the loose objects
  #
  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:135
  def in_loose?(sha_hex); end

  # returns true if the hex-packed sha is in the packfiles
  #
  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:126
  def in_packs?(sha_hex); end

  # returns a 2-d hash of the tree
  # ['blob']['FILENAME'] = {:mode => '100644', :sha => SHA}
  # ['tree']['DIRNAME'] = {:mode => '040000', :sha => SHA}
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:161
  def list_tree(sha); end

  # returns an array of GitRuby Commit objects
  # [ [sha, raw_output], [sha, raw_output], [sha, raw_output] ... ]
  #
  # takes the following options:
  #  :since - Time object specifying that you don't want commits BEFORE this
  #  :until - Time object specifying that you don't want commit AFTER this
  #  :first_parent - tells log to only walk first parent
  #  :path_limiter - string or array of strings to limit path
  #  :max_count - number to limit the output
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:285
  def log(sha, options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:589
  def look_for_commits(commit_sha, path, looking_for, options = T.unsafe(nil)); end

  # returns the loose objects object lazily
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:44
  def loose; end

  # returns the raw (cat-file) output for a tree
  # if given a commit sha, it will print the tree of that commit
  # if given a path limiter array, it will limit the output to those
  # if asked for recrusive trees, will traverse trees
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:173
  def ls_tree(sha, paths = T.unsafe(nil), recursive = T.unsafe(nil)); end

  # return array of tree entries
  # TODO : refactor this to remove the fugly
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:224
  def ls_tree_path(sha, path, append = T.unsafe(nil)); end

  # returns true or false if that sha exists in the db
  #
  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:116
  def object_exists?(sha1); end

  # Returns the value of attribute options.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:35
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:35
  def options=(_arg0); end

  # returns the array of pack list objects
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:49
  def packs; end

  # writes a raw object into the git repo
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:111
  def put_raw_object(content, type); end

  # takes 2 tree shas and recursively walks them to find out what
  # files or directories have been modified in them and returns an
  # array of changes
  # [ [full_path, 'added', tree1_hash, nil],
  #   [full_path, 'removed', nil, tree2_hash],
  #   [full_path, 'modified', tree1_hash, tree2_hash]
  #  ]
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:477
  def quick_diff(tree1, tree2, path = T.unsafe(nil), recurse = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:301
  def rev_list(sha, options); end

  # prints out the type, shas and content of all of the pack files
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:55
  def show; end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:290
  def truncate_arr(arr, sha); end

  # called by log() to recursively walk the tree
  #
  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:328
  def walk_log(sha, opts, total_size = T.unsafe(nil)); end

  protected

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:690
  def git_path(path); end

  private

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:704
  def each_alternate_path(path); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:696
  def initloose; end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:739
  def initpacks; end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:723
  def load_alternate_loose(pathname); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:748
  def load_alternate_packs(pathname); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:733
  def load_loose(path); end

  # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:757
  def load_packs(path); end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:676
    def add_file(name, contents); end

    # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:670
    def create_initial_config(bare = T.unsafe(nil)); end

    # initialize a git repository
    #
    # source://grit-2.5.0/lib/grit/git-ruby/repository.rb:636
    def init(dir, bare = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/repository.rb:32
class Grit::GitRuby::Repository::NoSuchPath < ::StandardError; end

# source://grit-2.5.0/lib/grit/git-ruby/repository.rb:29
class Grit::GitRuby::Repository::NoSuchShaFound < ::StandardError; end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:293
class Grit::GitRuby::Tag < ::Grit::GitRuby::GitObject
  # @return [Tag] a new instance of Tag
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:332
  def initialize(object, type, tag, tagger, message, repository = T.unsafe(nil)); end

  # Returns the value of attribute message.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def message=(_arg0); end

  # Returns the value of attribute object.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def object; end

  # Sets the attribute object
  #
  # @param value the value to set the attribute object to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def object=(_arg0); end

  # Returns the value of attribute object_type.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def object_type; end

  # Sets the attribute object_type
  #
  # @param value the value to set the attribute object_type to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def object_type=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:342
  def raw_content; end

  # Returns the value of attribute tag.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def tag; end

  # Sets the attribute tag
  #
  # @param value the value to set the attribute tag to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def tag=(_arg0); end

  # Returns the value of attribute tagger.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def tagger; end

  # Sets the attribute tagger
  #
  # @param value the value to set the attribute tagger to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:294
  def tagger=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:347
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:295
  def type=(_arg0); end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:297
    def from_raw(rawobject, repository = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:196
class Grit::GitRuby::Tree < ::Grit::GitRuby::GitObject
  # @return [Tree] a new instance of Tree
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:214
  def initialize(entries = T.unsafe(nil), repository = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:229
  def actual_raw; end

  # Returns the value of attribute entry.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:197
  def entry; end

  # Sets the attribute entry
  #
  # @param value the value to set the attribute entry to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:197
  def entry=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:223
  def raw_content; end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:219
  def type; end

  class << self
    # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:199
    def from_raw(rawobject, repository = T.unsafe(nil)); end
  end
end

# class for author/committer/tagger lines
#
# source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:20
class Grit::GitRuby::UserInfo
  # @return [UserInfo] a new instance of UserInfo
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:23
  def initialize(str); end

  # Returns the value of attribute date.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def date; end

  # Sets the attribute date
  #
  # @param value the value to set the attribute date to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def date=(_arg0); end

  # Returns the value of attribute email.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def email; end

  # Sets the attribute email
  #
  # @param value the value to set the attribute email to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def email=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def name=(_arg0); end

  # Returns the value of attribute offset.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def offset; end

  # Sets the attribute offset
  #
  # @param value the value to set the attribute offset to.
  #
  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:21
  def offset=(_arg0); end

  # source://grit-2.5.0/lib/grit/git-ruby/git_object.rb:44
  def to_s; end
end

# A Head is a named reference to a Commit. Every Head instance contains a name
# and a Commit object.
#
#   r = Grit::Repo.new("/path/to/repo")
#   h = r.heads.first
#   h.name       # => "master"
#   h.commit     # => #<Grit::Commit "1c09f116cbc2cb4100fb6935bb162daa4723f455">
#   h.commit.id  # => "1c09f116cbc2cb4100fb6935bb162daa4723f455"
#
# source://grit-2.5.0/lib/grit/ref.rb:56
class Grit::Head < ::Grit::Ref
  class << self
    # Get the HEAD revision of the repo.
    #   +repo+ is the Repo
    #   +options+ is a Hash of options
    #
    # Returns Grit::Head (baked)
    #
    # source://grit-2.5.0/lib/grit/ref.rb:63
    def current(repo, options = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/index.rb:3
class Grit::Index
  # Initialize a new Index object.
  #
  # repo - The Grit::Repo to which the index belongs.
  #
  # Returns the newly initialized Grit::Index.
  #
  # @return [Index] a new instance of Index
  #
  # source://grit-2.5.0/lib/grit/index.rb:24
  def initialize(repo); end

  # Public: Add a file to the index.
  #
  # path - The String file path including filename (no slash prefix).
  # data - The String binary contents of the file.
  #
  # Returns nothing.
  #
  # source://grit-2.5.0/lib/grit/index.rb:36
  def add(path, data); end

  # Public: Commit the contents of the index.  This method supports two
  # formats for arguments:
  #
  # message - The String commit message.
  # options - An optional Hash of index options.
  #           :parents        - Array of String commit SHA1s or Grit::Commit
  #                             objects to attach this commit to to form a
  #                             new head (default: nil).
  #           :actor          - The Grit::Actor details of the user making
  #                             the commit (default: nil).
  #           :last_tree      - The String SHA1 of a tree to compare with
  #                             in order to avoid making empty commits
  #                             (default: nil).
  #           :head           - The String branch name to write this head to
  #                             (default: nil).
  #           :committed_date - The Time that the commit was made.
  #                             (Default: Time.now)
  #           :authored_date  - The Time that the commit was authored.
  #                             (Default: committed_date)
  #
  # The legacy argument style looks like:
  #
  # message   - The String commit message.
  # parents   - Array of String commit SHA1s or Grit::Commit objects to
  #             attach this commit to to form a new head (default: nil).
  # actor     - The Grit::Actor details of the user making the commit
  #             (default: nil).
  # last_tree - The String SHA1 of a tree to compare with in order to avoid
  #             making empty commits (default: nil).
  # head      - The String branch name to write this head to
  #             (default: "master").
  #
  # Returns a String of the SHA1 of the new commit.
  #
  # source://grit-2.5.0/lib/grit/index.rb:103
  def commit(message, parents = T.unsafe(nil), actor = T.unsafe(nil), last_tree = T.unsafe(nil), head = T.unsafe(nil)); end

  # Public: Gets/Sets the Grit::Tree object representing the tree upon
  # which the next commit will be based.
  #
  # source://grit-2.5.0/lib/grit/index.rb:13
  def current_tree; end

  # Public: Gets/Sets the Grit::Tree object representing the tree upon
  # which the next commit will be based.
  #
  # source://grit-2.5.0/lib/grit/index.rb:13
  def current_tree=(_arg0); end

  # Public: Delete the given file from the index.
  #
  # path - The String file path including filename (no slash prefix).
  #
  # Returns nothing.
  #
  # source://grit-2.5.0/lib/grit/index.rb:56
  def delete(path); end

  # Returns the value of attribute last_commit_size.
  #
  # source://grit-2.5.0/lib/grit/index.rb:17
  def last_commit_size; end

  # Public: if a tree or commit is written, this stores the size of that object
  #
  # source://grit-2.5.0/lib/grit/index.rb:16
  def last_tree_size; end

  # Public: Read the contents of the given Tree into the index to use as a
  # starting point for the index.
  #
  # tree - The String branch/tag/sha of the Git tree object.
  #
  # Returns nothing.
  #
  # source://grit-2.5.0/lib/grit/index.rb:66
  def read_tree(tree); end

  # Public: Gets/Sets the Grit::Repo to which this index belongs.
  #
  # source://grit-2.5.0/lib/grit/index.rb:5
  def repo; end

  # Public: Gets/Sets the Grit::Repo to which this index belongs.
  #
  # source://grit-2.5.0/lib/grit/index.rb:5
  def repo=(_arg0); end

  # Public: Gets/Sets the Hash tree map that holds the changes to be made
  # in the next commit.
  #
  # source://grit-2.5.0/lib/grit/index.rb:9
  def tree; end

  # Public: Gets/Sets the Hash tree map that holds the changes to be made
  # in the next commit.
  #
  # source://grit-2.5.0/lib/grit/index.rb:9
  def tree=(_arg0); end

  # Write a blob to the index.
  #
  # data - The String data to write.
  #
  # Returns the String SHA1 of the new blob.
  #
  # source://grit-2.5.0/lib/grit/index.rb:217
  def write_blob(data); end

  # Recursively write a tree to the index.
  #
  # tree -     The Hash tree map:
  #            key - The String directory or filename.
  #            val - The Hash submap or the String contents of the file.
  # now_tree - The Grit::Tree representing the a previous tree upon which
  #            this tree will be based (default: nil).
  #
  # Returns the String SHA1 String of the tree.
  #
  # source://grit-2.5.0/lib/grit/index.rb:165
  def write_tree(tree = T.unsafe(nil), now_tree = T.unsafe(nil)); end
end

# source://grit-2.5.0/lib/grit/errors.rb:2
class Grit::InvalidGitRepositoryError < ::StandardError; end

# source://grit-2.5.0/lib/grit/errors.rb:8
class Grit::InvalidObjectType < ::StandardError; end

# source://grit-2.5.0/lib/grit/merge.rb:3
class Grit::Merge
  # @return [Merge] a new instance of Merge
  #
  # source://grit-2.5.0/lib/grit/merge.rb:11
  def initialize(str); end

  # Returns the value of attribute conflicts.
  #
  # source://grit-2.5.0/lib/grit/merge.rb:9
  def conflicts; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/merge.rb:40
  def inspect; end

  # Returns the value of attribute sections.
  #
  # source://grit-2.5.0/lib/grit/merge.rb:9
  def sections; end

  # Returns the value of attribute text.
  #
  # source://grit-2.5.0/lib/grit/merge.rb:9
  def text; end
end

# source://grit-2.5.0/lib/grit/merge.rb:5
Grit::Merge::STATUS_BOTH = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/merge.rb:6
Grit::Merge::STATUS_OURS = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/merge.rb:7
Grit::Merge::STATUS_THEIRS = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/errors.rb:5
class Grit::NoSuchPathError < ::StandardError; end

# source://grit-2.5.0/lib/grit/ref.rb:76
class Grit::Note < ::Grit::Ref; end

# source://grit-2.5.0/lib/grit/ref.rb:3
class Grit::Ref
  # Instantiate a new Head
  #   +name+ is the name of the head
  #   +commit+ is the Commit that the head points to
  #
  # Returns Grit::Head (baked)
  #
  # @return [Ref] a new instance of Ref
  #
  # source://grit-2.5.0/lib/grit/ref.rb:37
  def initialize(name, commit); end

  # Returns the value of attribute commit.
  #
  # source://grit-2.5.0/lib/grit/ref.rb:30
  def commit; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/ref.rb:43
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/ref.rb:29
  def name; end

  class << self
    # Find all Refs
    #   +repo+ is the Repo
    #   +options+ is a Hash of options
    #
    # Returns Grit::Ref[] (baked)
    #
    # source://grit-2.5.0/lib/grit/ref.rb:12
    def find_all(repo, options = T.unsafe(nil)); end

    protected

    # source://grit-2.5.0/lib/grit/ref.rb:23
    def prefix; end
  end
end

# Head
#
# source://grit-2.5.0/lib/grit/ref.rb:74
class Grit::Remote < ::Grit::Ref; end

# source://grit-2.5.0/lib/grit/repo.rb:3
class Grit::Repo
  # Public: Create a new Repo instance.
  #
  # path    - The String path to either the root git directory or the bare
  #           git repo. Bare repos are expected to end with ".git".
  # options - A Hash of options (default: {}):
  #           :is_bare - Boolean whether to consider the repo as bare even
  #                      if the repo name does not end with ".git".
  #
  # Examples
  #
  #   r = Repo.new("/Users/tom/dev/normal")
  #   r = Repo.new("/Users/tom/public/bare.git")
  #   r = Repo.new("/Users/tom/public/bare", {:is_bare => true})
  #
  # Returns a newly initialized Grit::Repo.
  # Raises Grit::InvalidGitRepositoryError if the path exists but is not
  #   a Git repository.
  # Raises Grit::NoSuchPathError if the path does not exist.
  #
  # @return [Repo] a new instance of Repo
  #
  # source://grit-2.5.0/lib/grit/repo.rb:40
  def initialize(path, options = T.unsafe(nil)); end

  # Adds files to the index
  #
  # source://grit-2.5.0/lib/grit/repo.rb:249
  def add(*files); end

  # The list of alternates for this repo
  #
  # Returns Array[String] (pathnames of alternates)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:652
  def alternates; end

  # Sets the alternates
  #   +alts+ is the Array of String paths representing the alternates
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/repo.rb:663
  def alternates=(alts); end

  # Archive the given treeish
  #   +treeish+ is the treeish name/id (default 'master')
  #   +prefix+ is the optional prefix
  #
  # Examples
  #   repo.archive_tar
  #   # => <String containing tar archive>
  #
  #   repo.archive_tar('a87ff14')
  #   # => <String containing tar archive for commit a87ff14>
  #
  #   repo.archive_tar('master', 'myproject/')
  #   # => <String containing tar archive and prefixed with 'myproject/'>
  #
  # Returns String (containing tar archive)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:587
  def archive_tar(treeish = T.unsafe(nil), prefix = T.unsafe(nil)); end

  # Archive and gzip the given treeish
  #   +treeish+ is the treeish name/id (default 'master')
  #   +prefix+ is the optional prefix
  #
  # Examples
  #   repo.archive_tar_gz
  #   # => <String containing tar.gz archive>
  #
  #   repo.archive_tar_gz('a87ff14')
  #   # => <String containing tar.gz archive for commit a87ff14>
  #
  #   repo.archive_tar_gz('master', 'myproject/')
  #   # => <String containing tar.gz archive and prefixed with 'myproject/'>
  #
  # Returns String (containing tar.gz archive)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:608
  def archive_tar_gz(treeish = T.unsafe(nil), prefix = T.unsafe(nil)); end

  # Write an archive directly to a file
  #   +treeish+ is the treeish name/id (default 'master')
  #   +prefix+ is the optional prefix (default nil)
  #   +filename+ is the name of the file (default 'archive.tar.gz')
  #   +format+ is the optional format (default nil)
  #   +pipe+ is the command to run the output through (default 'gzip')
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/repo.rb:622
  def archive_to_file(treeish = T.unsafe(nil), prefix = T.unsafe(nil), filename = T.unsafe(nil), format = T.unsafe(nil), pipe = T.unsafe(nil)); end

  # Public: The Boolean of whether or not the repo is bare.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:17
  def bare; end

  # Public: Return the full Git objects from the given SHAs.  Only Commit
  # objects are parsed for now.
  #
  # *shas - Array of String SHAs.
  #
  # Returns an Array of Grit objects (Grit::Commit).
  #
  # source://grit-2.5.0/lib/grit/repo.rb:168
  def batch(*shas); end

  # source://grit-2.5.0/lib/grit/repo.rb:204
  def blame(file, commit = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/repo.rb:259
  def blame_tree(commit, path = T.unsafe(nil)); end

  # The Blob object for the given id
  #   +id+ is the SHA1 id of the blob
  #
  # Returns Grit::Blob (unbaked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:534
  def blob(id); end

  # An array of Head objects representing the branch heads in
  # this repo
  #
  # Returns Grit::Head[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:212
  def branches; end

  # The Commit object for the specified id
  #   +id+ is the SHA1 identifier of the commit
  #
  # Returns Grit::Commit (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:424
  def commit(id); end

  # Commits all tracked and modified files
  #
  # Returns true/false if commit worked
  #
  # source://grit-2.5.0/lib/grit/repo.rb:244
  def commit_all(message); end

  # The number of commits reachable by the given branch/commit
  #   +start+ is the branch/commit name (default 'master')
  #
  # Returns Integer
  #
  # source://grit-2.5.0/lib/grit/repo.rb:416
  def commit_count(start = T.unsafe(nil)); end

  # Returns a list of commits that is in +other_repo+ but not in self
  #
  # Returns Grit::Commit[]
  #
  # source://grit-2.5.0/lib/grit/repo.rb:433
  def commit_deltas_from(other_repo, ref = T.unsafe(nil), other_ref = T.unsafe(nil)); end

  # The commit diff for the given commit
  #   +commit+ is the commit name/id
  #
  # Returns Grit::Diff[]
  #
  # source://grit-2.5.0/lib/grit/repo.rb:568
  def commit_diff(commit); end

  # Commits current index
  #
  # Returns true/false if commit worked
  #
  # source://grit-2.5.0/lib/grit/repo.rb:237
  def commit_index(message); end

  # source://grit-2.5.0/lib/grit/repo.rb:450
  def commit_objects(refs); end

  # source://grit-2.5.0/lib/grit/repo.rb:364
  def commit_stats(start = T.unsafe(nil), max_count = T.unsafe(nil), skip = T.unsafe(nil)); end

  # An array of Commit objects representing the history of a given ref/commit
  #   +start+ is the branch/commit name (default 'master')
  #   +max_count+ is the maximum number of commits to return (default 10, use +false+ for all)
  #   +skip+ is the number of commits to skip (default 0)
  #
  # Returns Grit::Commit[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:377
  def commits(start = T.unsafe(nil), max_count = T.unsafe(nil), skip = T.unsafe(nil)); end

  # The Commits objects that are reachable via +to+ but not via +from+
  # Commits are returned in chronological order.
  #   +from+ is the branch/commit name of the younger item
  #   +to+ is the branch/commit name of the older item
  #
  # Returns Grit::Commit[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:390
  def commits_between(from, to); end

  # The Commits objects that are newer than the specified date.
  # Commits are returned in chronological order.
  #   +start+ is the branch/commit name (default 'master')
  #   +since+ is a string represeting a date/time
  #   +extra_options+ is a hash of extra options
  #
  # Returns Grit::Commit[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:406
  def commits_since(start = T.unsafe(nil), since = T.unsafe(nil), extra_options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/repo.rb:677
  def config; end

  # source://grit-2.5.0/lib/grit/repo.rb:360
  def delete_ref(ref); end

  # The project's description. Taken verbatim from GIT_REPO/description
  #
  # Returns String
  #
  # source://grit-2.5.0/lib/grit/repo.rb:200
  def description; end

  # The diff from commit +a+ to commit +b+, optionally restricted to the given file(s)
  #   +a+ is the base commit
  #   +b+ is the other commit
  #   +paths+ is an optional list of file paths on which to restrict the diff
  #
  # source://grit-2.5.0/lib/grit/repo.rb:553
  def diff(a, b, *paths); end

  # source://grit-2.5.0/lib/grit/repo.rb:464
  def diff_objects(commit_sha, parents = T.unsafe(nil)); end

  # Disable git-daemon serving of this repository by ensuring there is no
  # git-daemon-export-ok file in its git directory
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/repo.rb:641
  def disable_daemon_serve; end

  # Enable git-daemon serving of this repository by writing the
  # git-daemon-export-ok file to its git directory
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/repo.rb:633
  def enable_daemon_serve; end

  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/repo.rb:394
  def fast_forwardable?(to, from); end

  # Public: Create a bare fork of this repository.
  #
  # path    - The String full path of where to create the new fork.
  #           Traditionally ends with "/<name>.git".
  # options - The Hash of additional options to the git clone command.
  #           These options will be merged on top of the default Hash:
  #           {:bare => true, :shared => true}.
  #
  # Returns the newly forked Grit::Repo.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:137
  def fork_bare(path, options = T.unsafe(nil)); end

  # Public: Fork a bare git repository from another repo.
  #
  # path    - The String full path of the repo from which to fork..
  #           Traditionally ends with "/<name>.git".
  # options - The Hash of additional options to the git clone command.
  #           These options will be merged on top of the default Hash:
  #           {:bare => true, :shared => true}.
  #
  # Returns the newly forked Grit::Repo.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:154
  def fork_bare_from(path, options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/repo.rb:645
  def gc_auto; end

  # source://grit-2.5.0/lib/grit/repo.rb:218
  def get_head(head_name); end

  # Public: The Grit::Git command line interface object.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:20
  def git; end

  # Public: The Grit::Git command line interface object.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:20
  def git=(_arg0); end

  # Object reprsenting the current repo head.
  #
  # Returns Grit::Head (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:229
  def head; end

  # An array of Head objects representing the branch heads in
  # this repo
  #
  # Returns Grit::Head[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:212
  def heads; end

  # source://grit-2.5.0/lib/grit/repo.rb:681
  def index; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/repo.rb:704
  def inspect; end

  # @return [Boolean]
  #
  # source://grit-2.5.0/lib/grit/repo.rb:222
  def is_head?(head_name); end

  # The commit log for a treeish
  #
  # Returns Grit::Commit[]
  #
  # source://grit-2.5.0/lib/grit/repo.rb:541
  def log(commit = T.unsafe(nil), path = T.unsafe(nil), options = T.unsafe(nil)); end

  # quick way to get a simple array of hashes of the entries
  # of a single tree or recursive tree listing from a given
  # sha or reference
  #   +treeish+ is the reference (default 'master')
  #   +options+ is a hash or options - currently only takes :recursive
  #
  # Examples
  #   repo.lstree('master', :recursive => true)
  #
  # Returns array of hashes - one per tree entry
  #
  # source://grit-2.5.0/lib/grit/repo.rb:503
  def lstree(treeish = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/repo.rb:522
  def object(sha); end

  # source://grit-2.5.0/lib/grit/repo.rb:444
  def objects(refs); end

  # source://grit-2.5.0/lib/grit/repo.rb:455
  def objects_between(ref1, ref2 = T.unsafe(nil)); end

  # Parses `git cat-file --batch` output, returning an array of Grit objects.
  #
  # text - Raw String output.
  #
  # Returns an Array of Grit objects (Grit::Commit).
  #
  # source://grit-2.5.0/lib/grit/repo.rb:179
  def parse_batch(text); end

  # Public: The String path of the Git repo.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:10
  def path; end

  # Public: The String path of the Git repo.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:10
  def path=(_arg0); end

  # Finds the most recent annotated tag name that is reachable from a commit.
  #
  #   @repo.recent_tag_name('master')
  #   # => "v1.0-0-abcdef"
  #
  # committish - optional commit SHA, branch, or tag name.
  # options    - optional hash of options to pass to git.
  #              Default: {:always => true}
  #              :tags => true      # use lightweight tags too.
  #              :abbrev => Integer # number of hex digits to form the unique
  #                name.  Defaults to 7.
  #              :long => true      # always output tag + commit sha
  #              # see `git describe` docs for more options.
  #
  # Returns the String tag name, or just the commit if no tag is
  # found.  If there have been updates since the tag was made, a
  # suffix is added with the number of commits since the tag, and
  # the abbreviated object name of the most recent commit.
  # Returns nil if the committish value is not found.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:300
  def recent_tag_name(committish = T.unsafe(nil), options = T.unsafe(nil)); end

  # An array of Ref objects representing the refs in
  # this repo
  #
  # Returns Grit::Ref[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:345
  def refs; end

  # returns an array of hashes representing all references
  #
  # source://grit-2.5.0/lib/grit/repo.rb:350
  def refs_list; end

  # source://grit-2.5.0/lib/grit/repo.rb:317
  def remote_add(name, url); end

  # source://grit-2.5.0/lib/grit/repo.rb:321
  def remote_fetch(name); end

  # source://grit-2.5.0/lib/grit/repo.rb:313
  def remote_list; end

  # An array of Remote objects representing the remote branches in
  # this repo
  #
  # Returns Grit::Remote[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:309
  def remotes; end

  # takes an array of remote names and last pushed dates
  # fetches from all of the remotes where the local fetch
  # date is earlier than the passed date, then records the
  # last fetched date
  #
  # { 'origin' => date,
  #   'peter => date,
  # }
  #
  # source://grit-2.5.0/lib/grit/repo.rb:333
  def remotes_fetch_needed(remotes); end

  # Remove files from the index
  #
  # source://grit-2.5.0/lib/grit/repo.rb:254
  def remove(*files); end

  # Rename the current repository directory.
  #   +name+ is the new name
  #
  # Returns nothing
  #
  # source://grit-2.5.0/lib/grit/repo.rb:695
  def rename(name); end

  # source://grit-2.5.0/lib/grit/repo.rb:269
  def status; end

  # An array of Tag objects that are available in this repo
  #
  # Returns Grit::Tag[] (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:277
  def tags; end

  # The Tree object for the given treeish reference
  #   +treeish+ is the reference (default 'master')
  #   +paths+ is an optional Array of directory paths to restrict the tree (default [])
  #
  # Examples
  #   repo.tree('master', ['lib/'])
  #
  # Returns Grit::Tree (baked)
  #
  # source://grit-2.5.0/lib/grit/repo.rb:489
  def tree(treeish = T.unsafe(nil), paths = T.unsafe(nil)); end

  # source://grit-2.5.0/lib/grit/repo.rb:685
  def update_ref(head, commit_sha); end

  # Public: The String path to the working directory of the repo, or nil if
  # there is no working directory.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:14
  def working_dir; end

  # Public: The String path to the working directory of the repo, or nil if
  # there is no working directory.
  #
  # source://grit-2.5.0/lib/grit/repo.rb:14
  def working_dir=(_arg0); end

  class << self
    # Public: Initialize a git repository (create it on the filesystem). By
    # default, the newly created repository will contain a working directory.
    # If you would like to create a bare repo, use Grit::Repo.init_bare.
    #
    # path         - The String full path to the repo. Traditionally ends with
    #                "/<name>.git".
    # git_options  - A Hash of additional options to the git init command
    #                (default: {}).
    # repo_options - A Hash of additional options to the Grit::Repo.new call
    #                (default: {}).
    #
    # Examples
    #
    #   Grit::Repo.init('/var/git/myrepo.git')
    #
    # Returns the newly created Grit::Repo.
    #
    # source://grit-2.5.0/lib/grit/repo.rb:75
    def init(path, git_options = T.unsafe(nil), repo_options = T.unsafe(nil)); end

    # Public: Initialize a bare git repository (create it on the filesystem).
    #
    # path         - The String full path to the repo. Traditionally ends with
    #                "/<name>.git".
    # git_options  - A Hash of additional options to the git init command
    #                (default: {}).
    # repo_options - A Hash of additional options to the Grit::Repo.new call
    #                (default: {}).
    #
    # Examples
    #
    #   Grit::Repo.init_bare('/var/git/myrepo.git')
    #
    # Returns the newly created Grit::Repo.
    #
    # source://grit-2.5.0/lib/grit/repo.rb:97
    def init_bare(path, git_options = T.unsafe(nil), repo_options = T.unsafe(nil)); end

    # Public: Initialize a bare Git repository (create it on the filesystem)
    # or, if the repo already exists, simply return it.
    #
    # path         - The String full path to the repo. Traditionally ends with
    #                "/<name>.git".
    # git_options  - A Hash of additional options to the git init command
    #                (default: {}).
    # repo_options - A Hash of additional options to the Grit::Repo.new call
    #                (default: {}).
    #
    # Returns the new or existing Grit::Repo.
    #
    # source://grit-2.5.0/lib/grit/repo.rb:117
    def init_bare_or_open(path, git_options = T.unsafe(nil), repo_options = T.unsafe(nil)); end
  end
end

# source://grit-2.5.0/lib/grit/repo.rb:5
Grit::Repo::BATCH_PARSERS = T.let(T.unsafe(nil), Hash)

# source://grit-2.5.0/lib/grit/repo.rb:4
Grit::Repo::DAEMON_EXPORT_FILE = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/status.rb:3
class Grit::Status
  include ::Enumerable

  # @return [Status] a new instance of Status
  #
  # source://grit-2.5.0/lib/grit/status.rb:11
  def initialize(base); end

  # enumerable method
  #
  # source://grit-2.5.0/lib/grit/status.rb:49
  def [](file); end

  # source://grit-2.5.0/lib/grit/status.rb:20
  def added; end

  # source://grit-2.5.0/lib/grit/status.rb:16
  def changed; end

  # source://grit-2.5.0/lib/grit/status.rb:24
  def deleted; end

  # source://grit-2.5.0/lib/grit/status.rb:53
  def each; end

  # Returns the value of attribute files.
  #
  # source://grit-2.5.0/lib/grit/status.rb:6
  def files; end

  # source://grit-2.5.0/lib/grit/status.rb:32
  def pretty; end

  # source://grit-2.5.0/lib/grit/status.rb:28
  def untracked; end

  private

  # source://grit-2.5.0/lib/grit/status.rb:90
  def construct_status; end

  # compares the index and the working directory
  #
  # source://grit-2.5.0/lib/grit/status.rb:118
  def diff_files; end

  # compares the index and the repository
  #
  # source://grit-2.5.0/lib/grit/status.rb:130
  def diff_index(treeish); end

  # source://grit-2.5.0/lib/grit/status.rb:141
  def ls_files; end
end

# source://grit-2.5.0/lib/grit/status.rb:59
class Grit::Status::StatusFile
  # @return [StatusFile] a new instance of StatusFile
  #
  # source://grit-2.5.0/lib/grit/status.rb:66
  def initialize(base, hash); end

  # source://grit-2.5.0/lib/grit/status.rb:78
  def blob(type = T.unsafe(nil)); end

  # Returns the value of attribute mode_index.
  #
  # source://grit-2.5.0/lib/grit/status.rb:61
  def mode_index; end

  # Sets the attribute mode_index
  #
  # @param value the value to set the attribute mode_index to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:61
  def mode_index=(_arg0); end

  # Returns the value of attribute mode_repo.
  #
  # source://grit-2.5.0/lib/grit/status.rb:61
  def mode_repo; end

  # Sets the attribute mode_repo
  #
  # @param value the value to set the attribute mode_repo to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:61
  def mode_repo=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def path=(_arg0); end

  # Returns the value of attribute sha_index.
  #
  # source://grit-2.5.0/lib/grit/status.rb:62
  def sha_index; end

  # Sets the attribute sha_index
  #
  # @param value the value to set the attribute sha_index to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:62
  def sha_index=(_arg0); end

  # Returns the value of attribute sha_repo.
  #
  # source://grit-2.5.0/lib/grit/status.rb:62
  def sha_repo; end

  # Sets the attribute sha_repo
  #
  # @param value the value to set the attribute sha_repo to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:62
  def sha_repo=(_arg0); end

  # Returns the value of attribute stage.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def stage; end

  # Sets the attribute stage
  #
  # @param value the value to set the attribute stage to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def stage=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def type=(_arg0); end

  # Returns the value of attribute untracked.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def untracked; end

  # Sets the attribute untracked
  #
  # @param value the value to set the attribute untracked to.
  #
  # source://grit-2.5.0/lib/grit/status.rb:60
  def untracked=(_arg0); end
end

# source://grit-2.5.0/lib/grit/submodule.rb:3
class Grit::Submodule
  # source://grit-2.5.0/lib/grit/submodule.rb:78
  def basename; end

  # Initializer for Submodule.create
  #   +repo+ is the Repo
  #   +atts+ is a Hash of instance variable data
  #
  # Returns Grit::Submodule
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:22
  def create_initialize(repo, atts); end

  # Returns the value of attribute id.
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:4
  def id; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:83
  def inspect; end

  # Returns the value of attribute mode.
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:5
  def mode; end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:6
  def name; end

  # The url of this submodule
  #   +ref+ is the committish that should be used to look up the url
  #
  # Returns String
  #
  # source://grit-2.5.0/lib/grit/submodule.rb:34
  def url(ref); end

  class << self
    # The configuration information for the given +repo+
    #   +repo+ is the Repo
    #   +ref+ is the committish (defaults to 'master')
    #
    # Returns a Hash of { <path:String> => { 'url' => <url:String>, 'id' => <id:String> } }
    # Returns {} if no .gitmodules file was found
    #
    # source://grit-2.5.0/lib/grit/submodule.rb:52
    def config(repo, ref = T.unsafe(nil)); end

    # Create a Submodule containing just the specified attributes
    #   +repo+ is the Repo
    #   +atts+ is a Hash of instance variable data
    #
    # Returns Grit::Submodule (unbaked)
    #
    # source://grit-2.5.0/lib/grit/submodule.rb:13
    def create(repo, atts); end
  end
end

# source://grit-2.5.0/lib/grit/tag.rb:3
class Grit::Tag < ::Grit::Ref
  extend ::Lazy

  # source://grit-2.5.0/lib/grit/tag.rb:86
  def lazy_source; end

  # source://grit-2.5.0/lib/grit/lazy.rb:20
  def lazy_source=(_arg0); end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def message; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def tag_date; end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def tagger; end

  class << self
    # Writes a new tag object from a hash
    #  +repo+ is a Grit repo
    #  +hash+ is the hash of tag values
    #
    # Returns a hash with +sha+ and +size+ of the created object
    #
    # source://grit-2.5.0/lib/grit/tag.rb:26
    def create_tag_object(repo, hash, default_actor = T.unsafe(nil)); end

    # source://grit-2.5.0/lib/grit/tag.rb:10
    def find_all(repo, options = T.unsafe(nil)); end

    # Parses the results from `cat-file -p`
    #
    # data - String tag object data.  Example:
    #          object 7bcc0ee821cdd133d8a53e8e7173a334fef448aa
    #          type commit
    #          tag v0.7.0
    #          tagger USER <EMAIL> DATE
    #
    #          v0.7.0
    #
    # Returns parsed Hash.  Example:
    #   {:message => "...", :tagger => "bob", :tag_date => ...}
    #
    # source://grit-2.5.0/lib/grit/tag.rb:59
    def parse_tag_data(data); end
  end
end

# source://grit-2.5.0/lib/grit/tree.rb:3
class Grit::Tree
  extend ::Lazy

  # Find the named object in this tree's contents
  #
  # Examples
  #   Repo.new('/path/to/grit').tree/'lib'
  #   # => #<Grit::Tree "6cc23ee138be09ff8c28b07162720018b244e95e">
  #   Repo.new('/path/to/grit').tree/'README.txt'
  #   # => #<Grit::Blob "8b1e02c0fb554eed2ce2ef737a68bb369d7527df">
  #
  # Returns Grit::Blob or Grit::Tree or nil if not found
  #
  # source://grit-2.5.0/lib/grit/tree.rb:92
  def /(file); end

  # Compares trees by name
  #
  # source://grit-2.5.0/lib/grit/tree.rb:120
  def <=>(other); end

  # source://grit-2.5.0/lib/grit/tree.rb:100
  def basename; end

  # Find only Blob objects from contents
  #
  # source://grit-2.5.0/lib/grit/tree.rb:115
  def blobs; end

  # source://grit-2.5.0/lib/grit/tree.rb:22
  def construct_initialize(repo, id, text); end

  # Parse a content item and create the appropriate object
  #   +repo+ is the Repo
  #   +text+ is the single line containing the items data in `git ls-tree` format
  #
  # Returns Grit::Blob or Grit::Tree
  #
  # source://grit-2.5.0/lib/grit/tree.rb:67
  def content_from_string(repo, text); end

  # source://grit-2.5.0/lib/grit/lazy.rb:26
  def contents; end

  # Initializer for Tree.create
  #   +repo+ is the Repo
  #   +atts+ is a Hash of instance variable data
  #
  # Returns Grit::Tree (unbaked)
  #
  # source://grit-2.5.0/lib/grit/tree.rb:53
  def create_initialize(repo, atts); end

  # Returns the value of attribute id.
  #
  # source://grit-2.5.0/lib/grit/tree.rb:7
  def id; end

  # Pretty object inspection
  #
  # source://grit-2.5.0/lib/grit/tree.rb:105
  def inspect; end

  # source://grit-2.5.0/lib/grit/tree.rb:35
  def lazy_source; end

  # source://grit-2.5.0/lib/grit/lazy.rb:20
  def lazy_source=(_arg0); end

  # Returns the value of attribute mode.
  #
  # source://grit-2.5.0/lib/grit/tree.rb:8
  def mode; end

  # Returns the value of attribute name.
  #
  # source://grit-2.5.0/lib/grit/tree.rb:9
  def name; end

  # Find only Tree objects from contents
  #
  # source://grit-2.5.0/lib/grit/tree.rb:110
  def trees; end

  class << self
    # Construct the contents of the tree
    #   +repo+ is the Repo
    #   +treeish+ is the reference
    #   +paths+ is an optional Array of directory paths to restrict the tree
    #
    # Returns Grit::Tree (baked)
    #
    # source://grit-2.5.0/lib/grit/tree.rb:17
    def construct(repo, treeish, paths = T.unsafe(nil)); end

    # Create an unbaked Tree containing just the specified attributes
    #   +repo+ is the Repo
    #   +atts+ is a Hash of instance variable data
    #
    # Returns Grit::Tree (unbaked)
    #
    # source://grit-2.5.0/lib/grit/tree.rb:44
    def create(repo, atts); end
  end
end

# source://grit-2.5.0/lib/grit.rb:52
Grit::VERSION = T.let(T.unsafe(nil), String)

# Allows attributes to be declared as lazy, meaning that they won't be
# computed until they are asked for.
#
# Works by delegating each lazy_reader to a cached lazy_source method.
#
# class Person
#   lazy_reader :eyes
#
#   def lazy_source
#     OpenStruct.new(:eyes => 2)
#   end
# end
#
# >> Person.new.eyes
# => 2
#
# source://grit-2.5.0/lib/grit/lazy.rb:18
module Lazy
  # source://grit-2.5.0/lib/grit/lazy.rb:23
  def lazy_reader(*args); end

  class << self
    # @private
    #
    # source://grit-2.5.0/lib/grit/lazy.rb:19
    def extended(klass); end
  end
end

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:17
PACK_IDX_SIGNATURE = T.let(T.unsafe(nil), String)

# source://grit-2.5.0/lib/grit/git-ruby/internal/pack.rb:16
PACK_SIGNATURE = T.let(T.unsafe(nil), String)

# Enhance the String class with a XML escaped character version of
# to_s.
#
# source://grit-2.5.0/lib/grit/ruby1.9.rb:1
class String
  include ::Comparable
end

# source://activesupport-5.2.8.1/lib/active_support/core_ext/object/blank.rb:105
String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

# source://activesupport-5.2.8.1/lib/active_support/core_ext/object/blank.rb:106
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
