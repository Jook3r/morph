# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activejob` gem.
# Please instead update this file by running `bin/tapioca gem activejob`.

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:3
module ActiveJob
  extend ::ActiveSupport::Autoload

  class << self
    # Returns the version of the currently loaded Active Job as a <tt>Gem::Version</tt>
    #
    # source://activejob-5.2.8.1/lib/active_job/gem_version.rb:5
    def gem_version; end

    # Returns the version of the currently loaded Active Job as a <tt>Gem::Version</tt>
    #
    # source://activejob-5.2.8.1/lib/active_job/version.rb:7
    def version; end
  end
end

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:24
module ActiveJob::Arguments
  extend ::ActiveJob::Arguments

  # Deserializes a set of arguments. Whitelisted types are returned
  # as-is. Arrays/Hashes are deserialized element by element.
  # All other types are deserialized using GlobalID.
  #
  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:40
  def deserialize(arguments); end

  # Serializes a set of arguments. Whitelisted types are returned
  # as-is. Arrays/Hashes are serialized element by element.
  # All other types are serialized using GlobalID.
  #
  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:33
  def serialize(arguments); end

  private

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:158
  def convert_to_global_id_hash(argument); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:77
  def deserialize_argument(argument); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:100
  def deserialize_global_id(hash); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:110
  def deserialize_hash(serialized_hash); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:55
  def serialize_argument(argument); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:104
  def serialize_hash(argument); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:128
  def serialize_hash_key(key); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:139
  def serialize_indifferent_hash(indifferent_hash); end

  # @return [Boolean]
  #
  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:96
  def serialized_global_id?(hash); end

  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:145
  def transform_symbol_keys(hash, symbol_keys); end
end

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:48
ActiveJob::Arguments::GLOBALID_KEY = T.let(T.unsafe(nil), String)

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:121
ActiveJob::Arguments::RESERVED_KEYS = T.let(T.unsafe(nil), Array)

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:50
ActiveJob::Arguments::SYMBOL_KEYS_KEY = T.let(T.unsafe(nil), String)

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:27
ActiveJob::Arguments::TYPE_WHITELIST = T.let(T.unsafe(nil), Array)

# source://activejob-5.2.8.1/lib/active_job/arguments.rb:52
ActiveJob::Arguments::WITH_INDIFFERENT_ACCESS_KEY = T.let(T.unsafe(nil), String)

# = Active Job
#
# Active Job objects can be configured to work with different backend
# queuing frameworks. To specify a queue adapter to use:
#
#   ActiveJob::Base.queue_adapter = :inline
#
# A list of supported adapters can be found in QueueAdapters.
#
# Active Job objects can be defined by creating a class that inherits
# from the ActiveJob::Base class. The only necessary method to
# implement is the "perform" method.
#
# To define an Active Job object:
#
#   class ProcessPhotoJob < ActiveJob::Base
#     def perform(photo)
#       photo.watermark!('Rails')
#       photo.rotate!(90.degrees)
#       photo.resize_to_fit!(300, 300)
#       photo.upload!
#     end
#   end
#
# Records that are passed in are serialized/deserialized using Global
# ID. More information can be found in Arguments.
#
# To enqueue a job to be performed as soon as the queueing system is free:
#
#   ProcessPhotoJob.perform_later(photo)
#
# To enqueue a job to be processed at some point in the future:
#
#   ProcessPhotoJob.set(wait_until: Date.tomorrow.noon).perform_later(photo)
#
# More information can be found in ActiveJob::Core::ClassMethods#set
#
# A job can also be processed immediately without sending to the queue:
#
#  ProcessPhotoJob.perform_now(photo)
#
# == Exceptions
#
# * DeserializationError - Error class for deserialization errors.
# * SerializationError - Error class for serialization errors.
#
# source://activejob-5.2.8.1/lib/active_job/base.rb:60
class ActiveJob::Base
  include ::ActiveJob::Core
  include ::ActiveJob::QueueAdapter
  include ::ActiveJob::QueueName
  include ::ActiveJob::QueuePriority
  include ::ActiveJob::Enqueuing
  include ::ActiveSupport::Rescuable
  include ::ActiveJob::Execution
  include ::ActiveSupport::Callbacks
  include ::ActiveJob::Callbacks
  include ::ActiveJob::Exceptions
  include ::ActiveJob::Logging
  include ::ActiveJob::Translation
  include ::ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveJob::Core::ClassMethods
  extend ::ActiveJob::QueueAdapter::ClassMethods
  extend ::ActiveJob::QueueName::ClassMethods
  extend ::ActiveJob::QueuePriority::ClassMethods
  extend ::ActiveJob::Enqueuing::ClassMethods
  extend ::ActiveSupport::Rescuable::ClassMethods
  extend ::ActiveJob::Execution::ClassMethods
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveJob::Callbacks::ClassMethods
  extend ::ActiveJob::Exceptions::ClassMethods
  extend ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:124
  def __callbacks; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:132
  def __callbacks?; end

  # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:827
  def _enqueue_callbacks; end

  # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:827
  def _perform_callbacks; end

  # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:815
  def _run_enqueue_callbacks(&block); end

  # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:815
  def _run_perform_callbacks(&block); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:11
  def arguments; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:11
  def arguments=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:30
  def executions; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:30
  def executions=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:18
  def job_id; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:18
  def job_id=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:33
  def locale; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:33
  def locale=(_arg0); end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:67
  def logger; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:134
  def logger=(obj); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:24
  def priority=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:27
  def provider_job_id; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:27
  def provider_job_id=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:21
  def queue_name=(_arg0); end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:124
  def rescue_handlers; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:136
  def rescue_handlers=(val); end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:132
  def rescue_handlers?; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:15
  def scheduled_at; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:15
  def scheduled_at=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:12
  def serialized_arguments=(_arg0); end

  class << self
    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def __callbacks; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def __callbacks=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:99
    def __callbacks?; end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:819
    def _enqueue_callbacks; end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:823
    def _enqueue_callbacks=(value); end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:819
    def _perform_callbacks; end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:823
    def _perform_callbacks=(value); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def _queue_adapter; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def _queue_adapter=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def _queue_adapter_name; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def _queue_adapter_name=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:96
    def _test_adapter; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def _test_adapter=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:60
    def logger; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:127
    def logger=(obj); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:96
    def priority; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def priority=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:99
    def priority?; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def queue_name; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def queue_name=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:99
    def queue_name?; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def queue_name_delimiter; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def queue_name_delimiter=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:99
    def queue_name_delimiter?; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:106
    def rescue_handlers; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:104
    def rescue_handlers=(val); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:99
    def rescue_handlers?; end
  end
end

# = Active Job Callbacks
#
# Active Job provides hooks during the life cycle of a job. Callbacks allow you
# to trigger logic during this cycle. Available callbacks are:
#
# * <tt>before_enqueue</tt>
# * <tt>around_enqueue</tt>
# * <tt>after_enqueue</tt>
# * <tt>before_perform</tt>
# * <tt>around_perform</tt>
# * <tt>after_perform</tt>
#
# NOTE: Calling the same callback multiple times will overwrite previous callback definitions.
#
# source://activejob-5.2.8.1/lib/active_job/callbacks.rb:20
module ActiveJob::Callbacks
  extend ::ActiveSupport::Concern
  extend ::ActiveSupport::Callbacks
  include GeneratedInstanceMethods
  include ::ActiveSupport::Callbacks

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Callbacks::ClassMethods
  mixes_in_class_methods ::ActiveSupport::DescendantsTracker
  mixes_in_class_methods ::ActiveJob::Callbacks::ClassMethods

  class << self
    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:111
    def __callbacks; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/class/attribute.rb:132
    def __callbacks?; end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:827
    def _execute_callbacks; end

    # source://activesupport-5.2.8.1/lib/active_support/callbacks.rb:815
    def _run_execute_callbacks(&block); end
  end

  module GeneratedClassMethods
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
  end

  module GeneratedInstanceMethods
    def __callbacks; end
    def __callbacks?; end
  end
end

# These methods will be included into any Active Job object, adding
# callbacks for +perform+ and +enqueue+ methods.
#
# source://activejob-5.2.8.1/lib/active_job/callbacks.rb:36
module ActiveJob::Callbacks::ClassMethods
  # Defines a callback that will get called right after the
  # job is enqueued.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     after_enqueue do |job|
  #       $statsd.increment "enqueue-video-job.success"
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:129
  def after_enqueue(*filters, &blk); end

  # Defines a callback that will get called right after the
  # job's perform method has finished.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     after_perform do |job|
  #       UserMailer.notify_video_processed(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:71
  def after_perform(*filters, &blk); end

  # Defines a callback that will get called around the enqueueing
  # of the job.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     around_enqueue do |job, block|
  #       $statsd.time "video-job.process" do
  #         block.call
  #       end
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:150
  def around_enqueue(*filters, &blk); end

  # Defines a callback that will get called around the job's perform method.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     around_perform do |job, block|
  #       UserMailer.notify_video_started_processing(job.arguments.first)
  #       block.call
  #       UserMailer.notify_video_processed(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:91
  def around_perform(*filters, &blk); end

  # Defines a callback that will get called right before the
  # job is enqueued.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     before_enqueue do |job|
  #       $statsd.increment "enqueue-video-job.try"
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:110
  def before_enqueue(*filters, &blk); end

  # Defines a callback that will get called right before the
  # job's perform method is executed.
  #
  #   class VideoProcessJob < ActiveJob::Base
  #     queue_as :default
  #
  #     before_perform do |job|
  #       UserMailer.notify_video_started_processing(job.arguments.first)
  #     end
  #
  #     def perform(video_id)
  #       Video.find(video_id).process
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/callbacks.rb:52
  def before_perform(*filters, &blk); end
end

# source://activejob-5.2.8.1/lib/active_job/configured_job.rb:4
class ActiveJob::ConfiguredJob
  # @return [ConfiguredJob] a new instance of ConfiguredJob
  #
  # source://activejob-5.2.8.1/lib/active_job/configured_job.rb:5
  def initialize(job_class, options = T.unsafe(nil)); end

  # source://activejob-5.2.8.1/lib/active_job/configured_job.rb:14
  def perform_later(*args); end

  # source://activejob-5.2.8.1/lib/active_job/configured_job.rb:10
  def perform_now(*args); end
end

# Provides general behavior that will be included into every Active Job
# object that inherits from ActiveJob::Base.
#
# source://activejob-5.2.8.1/lib/active_job/core.rb:6
module ActiveJob::Core
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Core::ClassMethods

  # Creates a new job instance. Takes the arguments that will be
  # passed to the perform method.
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:71
  def initialize(*arguments); end

  # Attaches the stored job data to the current instance. Receives a hash
  # returned from +serialize+
  #
  # ==== Examples
  #
  #    class DeliverWebhookJob < ActiveJob::Base
  #      attr_writer :attempt_number
  #
  #      def attempt_number
  #        @attempt_number ||= 0
  #      end
  #
  #      def serialize
  #        super.merge('attempt_number' => attempt_number + 1)
  #      end
  #
  #      def deserialize(job_data)
  #        super
  #        self.attempt_number = job_data['attempt_number']
  #      end
  #
  #      rescue_from(Timeout::Error) do |exception|
  #        raise exception if attempt_number > 5
  #        retry_job(wait: 10)
  #      end
  #    end
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:120
  def deserialize(job_data); end

  # Returns a hash with the job data that can safely be passed to the
  # queueing adapter.
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:81
  def serialize; end

  private

  # @return [Boolean]
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:154
  def arguments_serialized?; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:150
  def deserialize_arguments(serialized_args); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:139
  def deserialize_arguments_if_needed; end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:146
  def serialize_arguments(arguments); end

  # source://activejob-5.2.8.1/lib/active_job/core.rb:131
  def serialize_arguments_if_needed(arguments); end
end

# These methods will be included into any Active Job object, adding
# helpers for de/serialization and creation of job instances.
#
# source://activejob-5.2.8.1/lib/active_job/core.rb:38
module ActiveJob::Core::ClassMethods
  # Creates a new job instance from a hash created with +serialize+
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:40
  def deserialize(job_data); end

  # Creates a job preconfigured with the given options. You can call
  # perform_later with the job arguments to enqueue the job with the
  # preconfigured options
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #    VideoJob.set(queue: :some_queue).perform_later(Video.last)
  #    VideoJob.set(wait: 5.minutes).perform_later(Video.last)
  #    VideoJob.set(wait_until: Time.now.tomorrow).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait: 5.minutes).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait_until: Time.now.tomorrow).perform_later(Video.last)
  #    VideoJob.set(queue: :some_queue, wait: 5.minutes, priority: 10).perform_later(Video.last)
  #
  # source://activejob-5.2.8.1/lib/active_job/core.rb:64
  def set(options = T.unsafe(nil)); end
end

# Raised when an exception is raised during job arguments deserialization.
#
# Wraps the original exception raised as +cause+.
#
# source://activejob-5.2.8.1/lib/active_job/arguments.rb:9
class ActiveJob::DeserializationError < ::StandardError
  # @return [DeserializationError] a new instance of DeserializationError
  #
  # source://activejob-5.2.8.1/lib/active_job/arguments.rb:10
  def initialize; end
end

# Provides behavior for enqueuing jobs.
#
# source://activejob-5.2.8.1/lib/active_job/enqueuing.rb:7
module ActiveJob::Enqueuing
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Enqueuing::ClassMethods

  # Enqueues the job to be performed by the queue adapter.
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #    my_job_instance.enqueue
  #    my_job_instance.enqueue wait: 5.minutes
  #    my_job_instance.enqueue queue: :important
  #    my_job_instance.enqueue wait_until: Date.tomorrow.midnight
  #    my_job_instance.enqueue priority: 10
  #
  # source://activejob-5.2.8.1/lib/active_job/enqueuing.rb:44
  def enqueue(options = T.unsafe(nil)); end
end

# Includes the +perform_later+ method for job initialization.
#
# source://activejob-5.2.8.1/lib/active_job/enqueuing.rb:11
module ActiveJob::Enqueuing::ClassMethods
  # Push a job onto the queue. The arguments must be legal JSON types
  # (+string+, +int+, +float+, +nil+, +true+, +false+, +hash+ or +array+) or
  # GlobalID::Identification instances. Arbitrary Ruby objects
  # are not supported.
  #
  # Returns an instance of the job class queued with arguments available in
  # Job#arguments.
  #
  # source://activejob-5.2.8.1/lib/active_job/enqueuing.rb:19
  def perform_later(*args); end

  private

  # source://activejob-5.2.8.1/lib/active_job/enqueuing.rb:24
  def job_or_instantiate(*args); end
end

# Provides behavior for retrying and discarding jobs on exceptions.
#
# source://activejob-5.2.8.1/lib/active_job/exceptions.rb:7
module ActiveJob::Exceptions
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveJob::Exceptions::ClassMethods

  # Reschedules the job to be re-executed. This is useful in combination
  # with the +rescue_from+ option. When you rescue an exception from your job
  # you can ask Active Job to retry performing your job.
  #
  # ==== Options
  # * <tt>:wait</tt> - Enqueues the job with the specified delay in seconds
  # * <tt>:wait_until</tt> - Enqueues the job at the time specified
  # * <tt>:queue</tt> - Enqueues the job on the specified queue
  # * <tt>:priority</tt> - Enqueues the job with the specified priority
  #
  # ==== Examples
  #
  #  class SiteScraperJob < ActiveJob::Base
  #    rescue_from(ErrorLoadingSite) do
  #      retry_job queue: :low_priority
  #    end
  #
  #    def perform(*args)
  #      # raise ErrorLoadingSite if cannot scrape
  #    end
  #  end
  #
  # source://activejob-5.2.8.1/lib/active_job/exceptions.rb:111
  def retry_job(options = T.unsafe(nil)); end

  private

  # source://activejob-5.2.8.1/lib/active_job/exceptions.rb:116
  def determine_delay(seconds_or_duration_or_algorithm); end
end

# source://activejob-5.2.8.1/lib/active_job/exceptions.rb:10
module ActiveJob::Exceptions::ClassMethods
  # Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject of the job,
  # like an Active Record, is no longer available, and the job is thus no longer relevant.
  #
  # You can also pass a block that'll be invoked. This block is yielded with the job instance as the first and the error instance as the second parameter.
  #
  # ==== Example
  #
  #  class SearchIndexingJob < ActiveJob::Base
  #    discard_on ActiveJob::DeserializationError
  #    discard_on(CustomAppException) do |job, error|
  #      ExceptionNotifier.caught(error)
  #    end
  #
  #    def perform(record)
  #      # Will raise ActiveJob::DeserializationError if the record can't be deserialized
  #      # Might raise CustomAppException for something domain specific
  #    end
  #  end
  #
  # source://activejob-5.2.8.1/lib/active_job/exceptions.rb:79
  def discard_on(exception); end

  # Catch the exception and reschedule job for re-execution after so many seconds, for a specific number of attempts.
  # If the exception keeps getting raised beyond the specified number of attempts, the exception is allowed to
  # bubble up to the underlying queuing system, which may have its own retry mechanism or place it in a
  # holding queue for inspection.
  #
  # You can also pass a block that'll be invoked if the retry attempts fail for custom logic rather than letting
  # the exception bubble up. This block is yielded with the job instance as the first and the error instance as the second parameter.
  #
  # ==== Options
  # * <tt>:wait</tt> - Re-enqueues the job with a delay specified either in seconds (default: 3 seconds),
  #   as a computing proc that the number of executions so far as an argument, or as a symbol reference of
  #   <tt>:exponentially_longer</tt>, which applies the wait algorithm of <tt>(executions ** 4) + 2</tt>
  #   (first wait 3s, then 18s, then 83s, etc)
  # * <tt>:attempts</tt> - Re-enqueues the job the specified number of times (default: 5 attempts)
  # * <tt>:queue</tt> - Re-enqueues the job on a different queue
  # * <tt>:priority</tt> - Re-enqueues the job with a different priority
  #
  # ==== Examples
  #
  #  class RemoteServiceJob < ActiveJob::Base
  #    retry_on CustomAppException # defaults to 3s wait, 5 attempts
  #    retry_on AnotherCustomAppException, wait: ->(executions) { executions * 2 }
  #    retry_on(YetAnotherCustomAppException) do |job, error|
  #      ExceptionNotifier.caught(error)
  #    end
  #    retry_on ActiveRecord::Deadlocked, wait: 5.seconds, attempts: 3
  #    retry_on Net::OpenTimeout, wait: :exponentially_longer, attempts: 10
  #
  #    def perform(*args)
  #      # Might raise CustomAppException, AnotherCustomAppException, or YetAnotherCustomAppException for something domain specific
  #      # Might raise ActiveRecord::Deadlocked when a local db deadlock is detected
  #      # Might raise Net::OpenTimeout when the remote service is down
  #    end
  #  end
  #
  # source://activejob-5.2.8.1/lib/active_job/exceptions.rb:45
  def retry_on(exception, wait: T.unsafe(nil), attempts: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil)); end
end

# source://activejob-5.2.8.1/lib/active_job/execution.rb:7
module ActiveJob::Execution
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods
  include ::ActiveSupport::Rescuable

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveSupport::Rescuable::ClassMethods
  mixes_in_class_methods ::ActiveJob::Execution::ClassMethods

  # source://activejob-5.2.8.1/lib/active_job/execution.rb:45
  def perform(*_arg0); end

  # Performs the job immediately. The job is not sent to the queueing adapter
  # but directly executed by blocking the execution of others until it's finished.
  #
  #   MyJob.new(*args).perform_now
  #
  # source://activejob-5.2.8.1/lib/active_job/execution.rb:33
  def perform_now; end

  module GeneratedClassMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end

  module GeneratedInstanceMethods
    def rescue_handlers; end
    def rescue_handlers=(value); end
    def rescue_handlers?; end
  end
end

# Includes methods for executing and performing jobs instantly.
#
# source://activejob-5.2.8.1/lib/active_job/execution.rb:12
module ActiveJob::Execution::ClassMethods
  # source://activejob-5.2.8.1/lib/active_job/execution.rb:21
  def execute(job_data); end

  # Performs the job immediately.
  #
  #   MyJob.perform_now("mike")
  #
  # source://activejob-5.2.8.1/lib/active_job/execution.rb:17
  def perform_now(*args); end
end

# source://activejob-5.2.8.1/lib/active_job/logging.rb:9
module ActiveJob::Logging
  extend ::ActiveSupport::Concern

  private

  # @return [Boolean]
  #
  # source://activejob-5.2.8.1/lib/active_job/logging.rb:52
  def logger_tagged_by_active_job?; end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:43
  def tag_logger(*tags); end
end

# source://activejob-5.2.8.1/lib/active_job/logging.rb:56
class ActiveJob::Logging::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activejob-5.2.8.1/lib/active_job/logging.rb:57
  def enqueue(event); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:64
  def enqueue_at(event); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:78
  def perform(event); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:71
  def perform_start(event); end

  private

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:97
  def args_info(job); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:106
  def format(arg); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:123
  def logger; end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:93
  def queue_name(event); end

  # source://activejob-5.2.8.1/lib/active_job/logging.rb:119
  def scheduled_at(event); end
end

# The <tt>ActiveJob::QueueAdapter</tt> module is used to load the
# correct adapter. The default queue adapter is the +:async+ queue.
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:8
module ActiveJob::QueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _queue_adapter; end
    def _queue_adapter=(value); end
    def _queue_adapter_name; end
    def _queue_adapter_name=(value); end
  end

  module GeneratedInstanceMethods; end
end

# Includes the setter method for changing the active queue adapter.
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:18
module ActiveJob::QueueAdapter::ClassMethods
  # Returns the backend queue provider. The default queue adapter
  # is the +:async+ queue. See QueueAdapters for more information.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:21
  def queue_adapter; end

  # Specify the backend queue provider. The default queue adapter
  # is the +:async+ queue. See QueueAdapters for more
  # information.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:32
  def queue_adapter=(name_or_adapter); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:25
  def queue_adapter_name; end

  private

  # source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:48
  def assign_adapter(adapter_name, queue_adapter); end

  # @return [Boolean]
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:55
  def queue_adapter?(object); end
end

# source://activejob-5.2.8.1/lib/active_job/queue_adapter.rb:53
ActiveJob::QueueAdapter::ClassMethods::QUEUE_ADAPTER_METHODS = T.let(T.unsafe(nil), Array)

# == Active Job adapters
#
# Active Job has adapters for the following queueing backends:
#
# * {Backburner}[https://github.com/nesquena/backburner]
# * {Delayed Job}[https://github.com/collectiveidea/delayed_job]
# * {Qu}[https://github.com/bkeepers/qu]
# * {Que}[https://github.com/chanks/que]
# * {queue_classic}[https://github.com/QueueClassic/queue_classic]
# * {Resque}[https://github.com/resque/resque]
# * {Sidekiq}[http://sidekiq.org]
# * {Sneakers}[https://github.com/jondot/sneakers]
# * {Sucker Punch}[https://github.com/brandonhilkert/sucker_punch]
# * {Active Job Async Job}[http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/AsyncAdapter.html]
# * {Active Job Inline}[http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters/InlineAdapter.html]
#
# === Backends Features
#
#   |                   | Async | Queues | Delayed    | Priorities | Timeout | Retries |
#   |-------------------|-------|--------|------------|------------|---------|---------|
#   | Backburner        | Yes   | Yes    | Yes        | Yes        | Job     | Global  |
#   | Delayed Job       | Yes   | Yes    | Yes        | Job        | Global  | Global  |
#   | Qu                | Yes   | Yes    | No         | No         | No      | Global  |
#   | Que               | Yes   | Yes    | Yes        | Job        | No      | Job     |
#   | queue_classic     | Yes   | Yes    | Yes*       | No         | No      | No      |
#   | Resque            | Yes   | Yes    | Yes (Gem)  | Queue      | Global  | Yes     |
#   | Sidekiq           | Yes   | Yes    | Yes        | Queue      | No      | Job     |
#   | Sneakers          | Yes   | Yes    | No         | Queue      | Queue   | No      |
#   | Sucker Punch      | Yes   | Yes    | Yes        | No         | No      | No      |
#   | Active Job Async  | Yes   | Yes    | Yes        | No         | No      | No      |
#   | Active Job Inline | No    | Yes    | N/A        | N/A        | N/A     | N/A     |
#
# ==== Async
#
# Yes: The Queue Adapter has the ability to run the job in a non-blocking manner.
# It either runs on a separate or forked process, or on a different thread.
#
# No: The job is run in the same process.
#
# ==== Queues
#
# Yes: Jobs may set which queue they are run in with queue_as or by using the set
# method.
#
# ==== Delayed
#
# Yes: The adapter will run the job in the future through perform_later.
#
# (Gem): An additional gem is required to use perform_later with this adapter.
#
# No: The adapter will run jobs at the next opportunity and cannot use perform_later.
#
# N/A: The adapter does not support queueing.
#
# NOTE:
# queue_classic supports job scheduling since version 3.1.
# For older versions you can use the queue_classic-later gem.
#
# ==== Priorities
#
# The order in which jobs are processed can be configured differently depending
# on the adapter.
#
# Job: Any class inheriting from the adapter may set the priority on the job
# object relative to other jobs.
#
# Queue: The adapter can set the priority for job queues, when setting a queue
# with Active Job this will be respected.
#
# Yes: Allows the priority to be set on the job object, at the queue level or
# as default configuration option.
#
# No: Does not allow the priority of jobs to be configured.
#
# N/A: The adapter does not support queueing, and therefore sorting them.
#
# ==== Timeout
#
# When a job will stop after the allotted time.
#
# Job: The timeout can be set for each instance of the job class.
#
# Queue: The timeout is set for all jobs on the queue.
#
# Global: The adapter is configured that all jobs have a maximum run time.
#
# N/A: This adapter does not run in a separate process, and therefore timeout
# is unsupported.
#
# ==== Retries
#
# Job: The number of retries can be set per instance of the job class.
#
# Yes: The Number of retries can be configured globally, for each instance or
# on the queue. This adapter may also present failed instances of the job class
# that can be restarted.
#
# Global: The adapter has a global number of retries.
#
# N/A: The adapter does not run in a separate process, and therefore doesn't
# support retries.
#
# === Async and Inline Queue Adapters
#
# Active Job has two built-in queue adapters intended for development and
# testing: +:async+ and +:inline+.
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters.rb:110
module ActiveJob::QueueAdapters
  extend ::ActiveSupport::Autoload

  class << self
    # Returns adapter for specified name.
    #
    #   ActiveJob::QueueAdapters.lookup(:sidekiq)
    #   # => ActiveJob::QueueAdapters::SidekiqAdapter
    #
    # source://activejob-5.2.8.1/lib/active_job/queue_adapters.rb:134
    def lookup(name); end
  end
end

# source://activejob-5.2.8.1/lib/active_job/queue_adapters.rb:126
ActiveJob::QueueAdapters::ADAPTER = T.let(T.unsafe(nil), String)

# == Active Job Async adapter
#
# The Async adapter runs jobs with an in-process thread pool.
#
# This is the default queue adapter. It's well-suited for dev/test since
# it doesn't need an external infrastructure, but it's a poor fit for
# production since it drops pending jobs on restart.
#
# To use this adapter, set queue adapter to +:async+:
#
#   config.active_job.queue_adapter = :async
#
# To configure the adapter's thread pool, instantiate the adapter and
# pass your own config:
#
#   config.active_job.queue_adapter = ActiveJob::QueueAdapters::AsyncAdapter.new \
#     min_threads: 1,
#     max_threads: 2 * Concurrent.processor_count,
#     idletime: 600.seconds
#
# The adapter uses a {Concurrent Ruby}[https://github.com/ruby-concurrency/concurrent-ruby] thread pool to schedule and execute
# jobs. Since jobs share a single thread pool, long-running jobs will block
# short-lived jobs. Fine for dev/test; bad for production.
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:33
class ActiveJob::QueueAdapters::AsyncAdapter
  # See {Concurrent::ThreadPoolExecutor}[https://ruby-concurrency.github.io/concurrent-ruby/Concurrent/ThreadPoolExecutor.html] for executor options.
  #
  # @return [AsyncAdapter] a new instance of AsyncAdapter
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:35
  def initialize(**executor_options); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:39
  def enqueue(job); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:43
  def enqueue_at(job, timestamp); end

  # Used for our test suite.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:55
  def immediate=(immediate); end

  # Gracefully stop processing jobs. Finishes in-progress work and handles
  # any new jobs following the executor's fallback policy (`caller_runs`).
  # Waits for termination by default. Pass `wait: false` to continue.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:50
  def shutdown(wait: T.unsafe(nil)); end
end

# Note that we don't actually need to serialize the jobs since we're
# performing them in-process, but we do so anyway for parity with other
# adapters and deployment environments. Otherwise, serialization bugs
# may creep in undetected.
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:63
class ActiveJob::QueueAdapters::AsyncAdapter::JobWrapper
  # @return [JobWrapper] a new instance of JobWrapper
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:64
  def initialize(job); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:69
  def perform; end
end

# source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:74
class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  # @return [Scheduler] a new instance of Scheduler
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:86
  def initialize(**options); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:92
  def enqueue(job, queue_name:); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:96
  def enqueue_at(job, timestamp, queue_name:); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:110
  def executor; end

  # Returns the value of attribute immediate.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:84
  def immediate; end

  # Sets the attribute immediate
  #
  # @param value the value to set the attribute immediate to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:84
  def immediate=(_arg0); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:105
  def shutdown(wait: T.unsafe(nil)); end
end

# source://activejob-5.2.8.1/lib/active_job/queue_adapters/async_adapter.rb:75
ActiveJob::QueueAdapters::AsyncAdapter::Scheduler::DEFAULT_EXECUTOR_OPTIONS = T.let(T.unsafe(nil), Hash)

# == Active Job Inline adapter
#
# When enqueuing jobs with the Inline adapter the job will be executed
# immediately.
#
# To use the Inline set the queue_adapter config to +:inline+.
#
#   Rails.application.config.active_job.queue_adapter = :inline
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters/inline_adapter.rb:13
class ActiveJob::QueueAdapters::InlineAdapter
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/inline_adapter.rb:14
  def enqueue(job); end

  # @raise [NotImplementedError]
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/inline_adapter.rb:18
  def enqueue_at(*_arg0); end
end

# == Sidekiq adapter for Active Job
#
# Simple, efficient background processing for Ruby. Sidekiq uses threads to
# handle many jobs at the same time in the same process. It does not
# require Rails but will integrate tightly with it to make background
# processing dead simple.
#
# Read more about Sidekiq {here}[http://sidekiq.org].
#
# To use Sidekiq set the queue_adapter config to +:sidekiq+.
#
#   Rails.application.config.active_job.queue_adapter = :sidekiq
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters/sidekiq_adapter.rb:19
class ActiveJob::QueueAdapters::SidekiqAdapter
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/sidekiq_adapter.rb:20
  def enqueue(job); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/sidekiq_adapter.rb:29
  def enqueue_at(job, timestamp); end
end

# source://activejob-5.2.8.1/lib/active_job/queue_adapters/sidekiq_adapter.rb:38
class ActiveJob::QueueAdapters::SidekiqAdapter::JobWrapper
  include ::Sidekiq::Worker
  extend ::Sidekiq::Worker::ClassMethods

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/sidekiq_adapter.rb:41
  def perform(job_data); end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:201
  def sidekiq_options_hash; end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:213
  def sidekiq_options_hash=(_arg0); end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:201
  def sidekiq_retries_exhausted_block; end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:213
  def sidekiq_retries_exhausted_block=(_arg0); end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:201
  def sidekiq_retry_in_block; end

  # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:213
  def sidekiq_retry_in_block=(_arg0); end

  class << self
    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:168
    def sidekiq_options_hash; end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:176
    def sidekiq_options_hash=(val); end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:168
    def sidekiq_retries_exhausted_block; end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:176
    def sidekiq_retries_exhausted_block=(val); end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:168
    def sidekiq_retry_in_block; end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:176
    def sidekiq_retry_in_block=(val); end

    private

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:163
    def __synchronized_sidekiq_options_hash; end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:163
    def __synchronized_sidekiq_retries_exhausted_block; end

    # source://sidekiq-5.2.10/lib/sidekiq/worker.rb:163
    def __synchronized_sidekiq_retry_in_block; end
  end
end

# == Test adapter for Active Job
#
# The test adapter should be used only in testing. Along with
# <tt>ActiveJob::TestCase</tt> and <tt>ActiveJob::TestHelper</tt>
# it makes a great tool to test your Rails application.
#
# To use the test adapter set queue_adapter config to +:test+.
#
#   Rails.application.config.active_job.queue_adapter = :test
#
# source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:14
class ActiveJob::QueueAdapters::TestAdapter
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:28
  def enqueue(job); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:35
  def enqueue_at(job, timestamp); end

  # Provides a store of all the enqueued jobs with the TestAdapter so you can check them.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:19
  def enqueued_jobs; end

  # Sets the attribute enqueued_jobs
  #
  # @param value the value to set the attribute enqueued_jobs to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:16
  def enqueued_jobs=(_arg0); end

  # Returns the value of attribute filter.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def filter; end

  # Sets the attribute filter
  #
  # @param value the value to set the attribute filter to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def filter=(_arg0); end

  # Returns the value of attribute perform_enqueued_at_jobs.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def perform_enqueued_at_jobs; end

  # Sets the attribute perform_enqueued_at_jobs
  #
  # @param value the value to set the attribute perform_enqueued_at_jobs to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def perform_enqueued_at_jobs=(_arg0); end

  # Returns the value of attribute perform_enqueued_jobs.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def perform_enqueued_jobs; end

  # Sets the attribute perform_enqueued_jobs
  #
  # @param value the value to set the attribute perform_enqueued_jobs to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def perform_enqueued_jobs=(_arg0); end

  # Provides a store of all the performed jobs with the TestAdapter so you can check them.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:24
  def performed_jobs; end

  # Sets the attribute performed_jobs
  #
  # @param value the value to set the attribute performed_jobs to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:16
  def performed_jobs=(_arg0); end

  # Returns the value of attribute reject.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def reject; end

  # Sets the attribute reject
  #
  # @param value the value to set the attribute reject to.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:15
  def reject=(_arg0); end

  private

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:47
  def enqueue_or_perform(perform, job, job_data); end

  # @return [Boolean]
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:56
  def filtered?(job); end

  # source://activejob-5.2.8.1/lib/active_job/queue_adapters/test_adapter.rb:43
  def job_to_hash(job, extras = T.unsafe(nil)); end
end

# source://activejob-5.2.8.1/lib/active_job/queue_name.rb:4
module ActiveJob::QueueName
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueueName::ClassMethods

  # Returns the name of the queue the job will be run on.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_name.rb:42
  def queue_name; end

  module GeneratedClassMethods
    def queue_name; end
    def queue_name=(value); end
    def queue_name?; end
    def queue_name_delimiter; end
    def queue_name_delimiter=(value); end
    def queue_name_delimiter?; end
  end

  module GeneratedInstanceMethods; end
end

# Includes the ability to override the default queue name and prefix.
#
# source://activejob-5.2.8.1/lib/active_job/queue_name.rb:8
module ActiveJob::QueueName::ClassMethods
  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:67
  def default_queue_name; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:134
  def default_queue_name=(obj); end

  # Specifies the name of the queue to process the job on.
  #
  #   class PublishToFeedJob < ActiveJob::Base
  #     queue_as :feeds
  #
  #     def perform(post)
  #       post.to_feed!
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_name.rb:21
  def queue_as(part_name = T.unsafe(nil), &block); end

  # source://activejob-5.2.8.1/lib/active_job/queue_name.rb:29
  def queue_name_from_part(part_name); end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:67
  def queue_name_prefix; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:134
  def queue_name_prefix=(obj); end

  class << self
    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:60
    def default_queue_name; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:127
    def default_queue_name=(obj); end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:60
    def queue_name_prefix; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:127
    def queue_name_prefix=(obj); end
  end
end

# source://activejob-5.2.8.1/lib/active_job/queue_priority.rb:4
module ActiveJob::QueuePriority
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::QueuePriority::ClassMethods

  # Returns the priority that the job will be created with
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_priority.rb:36
  def priority; end

  module GeneratedClassMethods
    def priority; end
    def priority=(value); end
    def priority?; end
  end

  module GeneratedInstanceMethods; end
end

# Includes the ability to override the default queue priority.
#
# source://activejob-5.2.8.1/lib/active_job/queue_priority.rb:8
module ActiveJob::QueuePriority::ClassMethods
  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:67
  def default_priority; end

  # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:134
  def default_priority=(obj); end

  # Specifies the priority of the queue to create the job with.
  #
  #   class PublishToFeedJob < ActiveJob::Base
  #     queue_with_priority 50
  #
  #     def perform(post)
  #       post.to_feed!
  #     end
  #   end
  #
  # Specify either an argument or a block.
  #
  # source://activejob-5.2.8.1/lib/active_job/queue_priority.rb:22
  def queue_with_priority(priority = T.unsafe(nil), &block); end

  class << self
    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:60
    def default_priority; end

    # source://activesupport-5.2.8.1/lib/active_support/core_ext/module/attribute_accessors.rb:127
    def default_priority=(obj); end
  end
end

# = Active Job Railtie
#
# source://activejob-5.2.8.1/lib/active_job/railtie.rb:8
class ActiveJob::Railtie < ::Rails::Railtie; end

# Raised when an unsupported argument type is set as a job argument. We
# currently support NilClass, Integer, Fixnum, Float, String, TrueClass, FalseClass,
# Bignum, BigDecimal, and objects that can be represented as GlobalIDs (ex: Active Record).
# Raised if you set the key for a Hash something else than a string or
# a symbol. Also raised when trying to serialize an object which can't be
# identified with a Global ID - such as an unpersisted Active Record model.
#
# source://activejob-5.2.8.1/lib/active_job/arguments.rb:22
class ActiveJob::SerializationError < ::ArgumentError; end

# source://activejob-5.2.8.1/lib/active_job/test_case.rb:6
class ActiveJob::TestCase < ::ActiveSupport::TestCase
  include ::ActiveJob::TestHelper
end

# Provides helper methods for testing Active Job
#
# source://activejob-5.2.8.1/lib/active_job/test_helper.rb:8
module ActiveJob::TestHelper
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:49
  def after_teardown; end

  # Asserts that the number of enqueued jobs matches the given number.
  #
  #   def test_jobs
  #     assert_enqueued_jobs 0
  #     HelloJob.perform_later('david')
  #     assert_enqueued_jobs 1
  #     HelloJob.perform_later('abdelkader')
  #     assert_enqueued_jobs 2
  #   end
  #
  # If a block is passed, that block will cause the specified number of
  # jobs to be enqueued.
  #
  #   def test_jobs_again
  #     assert_enqueued_jobs 1 do
  #       HelloJob.perform_later('cristian')
  #     end
  #
  #     assert_enqueued_jobs 2 do
  #       HelloJob.perform_later('aaron')
  #       HelloJob.perform_later('rafael')
  #     end
  #   end
  #
  # The number of times a specific job was enqueued can be asserted.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 1, only: LoggingJob do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # The number of times a job except specific class was enqueued can be asserted.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 1, except: HelloJob do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # The number of times a job is enqueued to a specific queue can also be asserted.
  #
  #   def test_logging_job
  #     assert_enqueued_jobs 2, queue: 'default' do
  #       LoggingJob.perform_later
  #       HelloJob.perform_later('elfassy')
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:118
  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil)); end

  # Asserts that the job passed in the block has been enqueued with the given arguments.
  #
  #   def test_assert_enqueued_with
  #     assert_enqueued_with(job: MyJob, args: [1,2,3], queue: 'low') do
  #       MyJob.perform_later(1,2,3)
  #     end
  #
  #     assert_enqueued_with(job: MyJob, at: Date.tomorrow.noon) do
  #       MyJob.set(wait_until: Date.tomorrow.noon).perform_later
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:300
  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil)); end

  # Asserts that no jobs have been enqueued.
  #
  #   def test_jobs
  #     assert_no_enqueued_jobs
  #     HelloJob.perform_later('jeremy')
  #     assert_enqueued_jobs 1
  #   end
  #
  # If a block is passed, that block should not cause any job to be enqueued.
  #
  #   def test_jobs_again
  #     assert_no_enqueued_jobs do
  #       # No job should be enqueued from this block
  #     end
  #   end
  #
  # It can be asserted that no jobs of a specific kind are enqueued:
  #
  #   def test_no_logging
  #     assert_no_enqueued_jobs only: LoggingJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # It can be asserted that no jobs except specific class are enqueued:
  #
  #   def test_no_logging
  #     assert_no_enqueued_jobs except: HelloJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Note: This assertion is simply a shortcut for:
  #
  #   assert_enqueued_jobs 0, &block
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:165
  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), &block); end

  # Asserts that no jobs have been performed.
  #
  #   def test_jobs
  #     assert_no_performed_jobs
  #
  #     perform_enqueued_jobs do
  #       HelloJob.perform_later('matthew')
  #       assert_performed_jobs 1
  #     end
  #   end
  #
  # If a block is passed, that block should not cause any job to be performed.
  #
  #   def test_jobs_again
  #     assert_no_performed_jobs do
  #       # No job should be performed from this block
  #     end
  #   end
  #
  # The block form supports filtering. If the :only option is specified,
  # then only the listed job(s) will not be performed.
  #
  #   def test_no_logging
  #     assert_no_performed_jobs only: LoggingJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Also if the :except option is specified,
  # then the job(s) except specific class will not be performed.
  #
  #   def test_no_logging
  #     assert_no_performed_jobs except: HelloJob do
  #       HelloJob.perform_later('jeremy')
  #     end
  #   end
  #
  # Note: This assertion is simply a shortcut for:
  #
  #   assert_performed_jobs 0, &block
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:285
  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), &block); end

  # Asserts that the number of performed jobs matches the given number.
  # If no block is passed, <tt>perform_enqueued_jobs</tt>
  # must be called around the job call.
  #
  #   def test_jobs
  #     assert_performed_jobs 0
  #
  #     perform_enqueued_jobs do
  #       HelloJob.perform_later('xavier')
  #     end
  #     assert_performed_jobs 1
  #
  #     perform_enqueued_jobs do
  #       HelloJob.perform_later('yves')
  #       assert_performed_jobs 2
  #     end
  #   end
  #
  # If a block is passed, that block should cause the specified number of
  # jobs to be performed.
  #
  #   def test_jobs_again
  #     assert_performed_jobs 1 do
  #       HelloJob.perform_later('robin')
  #     end
  #
  #     assert_performed_jobs 2 do
  #       HelloJob.perform_later('carlos')
  #       HelloJob.perform_later('sean')
  #     end
  #   end
  #
  # The block form supports filtering. If the :only option is specified,
  # then only the listed job(s) will be performed.
  #
  #     def test_hello_job
  #       assert_performed_jobs 1, only: HelloJob do
  #         HelloJob.perform_later('jeremy')
  #         LoggingJob.perform_later
  #       end
  #     end
  #
  # Also if the :except option is specified,
  # then the job(s) except specific class will be performed.
  #
  #     def test_hello_job
  #       assert_performed_jobs 1, except: LoggingJob do
  #         HelloJob.perform_later('jeremy')
  #         LoggingJob.perform_later
  #       end
  #     end
  #
  # An array may also be specified, to support testing multiple jobs.
  #
  #     def test_hello_and_logging_jobs
  #       assert_nothing_raised do
  #         assert_performed_jobs 2, only: [HelloJob, LoggingJob] do
  #           HelloJob.perform_later('jeremy')
  #           LoggingJob.perform_later('stewie')
  #           RescueJob.perform_later('david')
  #         end
  #       end
  #     end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:232
  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil)); end

  # Asserts that the job passed in the block has been performed with the given arguments.
  #
  #   def test_assert_performed_with
  #     assert_performed_with(job: MyJob, args: [1,2,3], queue: 'high') do
  #       MyJob.perform_later(1,2,3)
  #     end
  #
  #     assert_performed_with(job: MyJob, at: Date.tomorrow.noon) do
  #       MyJob.set(wait_until: Date.tomorrow.noon).perform_later
  #     end
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:325
  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil)); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:37
  def before_setup; end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:9
  def enqueued_jobs(*args, &block); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:9
  def enqueued_jobs=(arg); end

  # Performs all enqueued jobs in the duration of the block.
  #
  #   def test_perform_enqueued_jobs
  #     perform_enqueued_jobs do
  #       MyJob.perform_later(1, 2, 3)
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # This method also supports filtering. If the +:only+ option is specified,
  # then only the listed job(s) will be performed.
  #
  #   def test_perform_enqueued_jobs_with_only
  #     perform_enqueued_jobs(only: MyJob) do
  #       MyJob.perform_later(1, 2, 3) # will be performed
  #       HelloJob.perform_later(1, 2, 3) # will not be performed
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # Also if the +:except+ option is specified,
  # then the job(s) except specific class will be performed.
  #
  #   def test_perform_enqueued_jobs_with_except
  #     perform_enqueued_jobs(except: HelloJob) do
  #       MyJob.perform_later(1, 2, 3) # will be performed
  #       HelloJob.perform_later(1, 2, 3) # will not be performed
  #     end
  #     assert_performed_jobs 1
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:370
  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil)); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:9
  def performed_jobs(*args, &block); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:9
  def performed_jobs=(arg); end

  # Accesses the queue_adapter set by ActiveJob::Base.
  #
  #   def test_assert_job_has_custom_queue_adapter_set
  #     assert_instance_of CustomQueueAdapter, HelloJob.queue_adapter
  #   end
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:396
  def queue_adapter; end

  # Specifies the queue adapter to use with all active job test helpers.
  #
  # Returns an instance of the queue adapter and defaults to
  # <tt>ActiveJob::QueueAdapters::TestAdapter</tt>.
  #
  # Note: The adapter provided by this method must provide some additional
  # methods from those expected of a standard <tt>ActiveJob::QueueAdapter</tt>
  # in order to be used with the active job test helpers. Refer to
  # <tt>ActiveJob::QueueAdapters::TestAdapter</tt>.
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:64
  def queue_adapter_for_test; end

  private

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:401
  def clear_enqueued_jobs; end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:405
  def clear_performed_jobs; end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:431
  def deserialize_args_for_assertion(job); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:409
  def enqueued_jobs_size(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil)); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:437
  def instantiate_job(payload); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:425
  def prepare_args_for_assertion(args); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:445
  def queue_adapter_changed_jobs; end

  # @raise [ArgumentError]
  #
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:452
  def validate_option(only: T.unsafe(nil), except: T.unsafe(nil)); end
end

# source://activejob-5.2.8.1/lib/active_job/test_helper.rb:13
module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveJob::TestHelper::TestQueueAdapter::ClassMethods

  module GeneratedClassMethods
    def _test_adapter; end
    def _test_adapter=(value); end
  end

  module GeneratedInstanceMethods; end
end

# source://activejob-5.2.8.1/lib/active_job/test_helper.rb:20
module ActiveJob::TestHelper::TestQueueAdapter::ClassMethods
  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:25
  def disable_test_adapter; end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:29
  def enable_test_adapter(test_adapter); end

  # source://activejob-5.2.8.1/lib/active_job/test_helper.rb:21
  def queue_adapter; end
end

# source://activejob-5.2.8.1/lib/active_job/translation.rb:4
module ActiveJob::Translation
  extend ::ActiveSupport::Concern
end

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:9
module ActiveJob::VERSION; end

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:10
ActiveJob::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:11
ActiveJob::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:13
ActiveJob::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:15
ActiveJob::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activejob-5.2.8.1/lib/active_job/gem_version.rb:12
ActiveJob::VERSION::TINY = T.let(T.unsafe(nil), Integer)
