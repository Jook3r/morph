# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-api` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch-api`.

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/version.rb:5
module Elasticsearch; end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/version.rb:6
module Elasticsearch::API
  class << self
    # Auto-include all namespaces in the receiver
    #
    # source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:49
    def included(base); end

    # The serializer class
    #
    # source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:65
    def serializer; end

    # Access the module settings
    #
    # source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:71
    def settings; end
  end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/params_registry.rb:7
module Elasticsearch::API::Actions
  # Abort a running benchmark
  #
  # @example
  #
  #   client.abort_benchmark name: 'my_benchmark'
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/search-benchmark.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/abort_benchmark.rb:19
  def abort_benchmark(arguments = T.unsafe(nil)); end

  # Run a single query, or a set of queries, and return statistics on their performance
  #
  # @example Return statistics for a single query
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_1',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @example Return statistics for a set of "competing" queries
  #
  #   client.benchmark body: {
  #   name: 'my_benchmark',
  #   competitors: [
  #   {
  #   name: 'query_a',
  #   requests: [
  #   { query: { match: { _all: 'a*' } } }
  #   ]
  #   },
  #   {
  #   name: 'query_b',
  #   requests: [
  #   { query: { match: { _all: 'b*' } } }
  #   ]
  #   }
  #   ]
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/search-benchmark.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/benchmark.rb:54
  def benchmark(arguments = T.unsafe(nil)); end

  # Perform multiple index, delete or update operations in a single request.
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item in a custom `:data` key.
  #
  # @example Perform three operations in a single request, passing actions and data as an array of hashes
  #
  #   client.bulk body: [
  #   { index: { _index: 'myindex', _type: 'mytype', _id: 1 } },
  #   { title: 'foo' },
  #
  #   { index: { _index: 'myindex', _type: 'mytype', _id: 2 } },
  #   { title: 'foo' },
  #
  #   { delete: { _index: 'myindex', _type: 'mytype', _id: 3  } }
  #   ]
  # @example Perform three operations in a single request, passing data in the `:data` option
  #
  #   client.bulk body: [
  #   { index:  { _index: 'myindex', _type: 'mytype', _id: 1, data: { title: 'foo' } } },
  #   { update: { _index: 'myindex', _type: 'mytype', _id: 2, data: { doc: { title: 'foo' } } } },
  #   { delete: { _index: 'myindex', _type: 'mytype', _id: 3  } }
  #   ]
  # @example Perform a script-based bulk update, passing scripts in the `:data` option
  #
  #   client.bulk body: [
  #   { update: { _index: 'myindex', _type: 'mytype', _id: 1,
  #   data: {
  #   script: "ctx._source.counter += value",
  #   lang: 'js',
  #   params: { value: 1 }, upsert: { counter: 0 } }
  #   }},
  #   { update: { _index: 'myindex', _type: 'mytype', _id: 2,
  #   data: {
  #   script: "ctx._source.counter += value",
  #   lang: 'js',
  #   params: { value: 42 }, upsert: { counter: 0 } }
  #   }}
  #
  #   ]
  # @note The body argument is required and cannot be empty.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [Hash] Deserialized Elasticsearch response
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/bulk.rb:71
  def bulk(arguments = T.unsafe(nil)); end

  # Abort a particular scroll search and clear all the resources associated with it.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/clear_scroll.rb:16
  def clear_scroll(arguments = T.unsafe(nil)); end

  # Get the number of documents for the cluster, index, type, or a query.
  #
  # @example Get the number of all documents in the cluster
  #
  #   client.count
  # @example Get the number of documents in a specified index
  #
  #   client.count index: 'myindex'
  # @example Get the number of documents matching a specific query
  #
  #   index: 'my_index', body: { filtered: { filter: { terms: { foo: ['bar'] } } } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/count.rb:44
  def count(arguments = T.unsafe(nil)); end

  # Create a new document.
  #
  # The API will create new document, if it doesn't exist yet -- in that case, it will return
  # a `409` error (`version_conflict_engine_exception`).
  #
  # You can leave out the `:id` parameter for the ID to be generated automatically
  #
  # @example Create a document with an ID
  #
  #   client.create index: 'myindex',
  #   type: 'doc',
  #   id: '1',
  #   body: {
  #   title: 'Test 1'
  #   }
  # @example Create a document with an auto-generated ID
  #
  #   client.create index: 'myindex',
  #   type: 'doc',
  #   body: {
  #   title: 'Test 1'
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#_automatic_id_generation
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/create.rb:37
  def create(arguments = T.unsafe(nil)); end

  # Delete a single document.
  #
  # @example Delete a document
  #
  #   client.delete index: 'myindex', type: 'mytype', id: '1'
  # @example Delete a document with specific routing
  #
  #   client.delete index: 'myindex', type: 'mytype', id: '1', routing: 'abc123'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/delete/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/delete.rb:34
  def delete(arguments = T.unsafe(nil)); end

  # Delete documents which match specified query.
  #
  # Provide the query either as a "query string" query in the `:q` argument, or using the Elasticsearch's
  # [Query DSL](https://www.elastic.co/guide/reference/query-dsl/) in the `:body` argument.
  #
  # @example Deleting documents with a simple query
  #
  #   client.delete_by_query index: 'myindex', q: 'title:test'
  # @example Deleting documents using the Query DSL
  #
  #   client.delete_by_query index: 'myindex', body: { query: { term: { published: false } } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/delete_by_query.rb:60
  def delete_by_query(arguments = T.unsafe(nil)); end

  # The value of requests_per_second can be changed on a running delete by query using the _rethrottle API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/delete_by_rethrottle.rb:16
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end

  # Remove an indexed script from Elasticsearch
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/delete_script.rb:17
  def delete_script(arguments = T.unsafe(nil)); end

  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/get/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/exists.rb:33
  def exists(arguments = T.unsafe(nil)); end

  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/get/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/exists.rb:33
  def exists?(arguments = T.unsafe(nil)); end

  # The get API allows to get a typed JSON document from the index based on its id.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/exists_source.rb:27
  def exists_source(arguments = T.unsafe(nil)); end

  # Return information if and how well a document matches a query.
  #
  # The returned information contains a `_score` and its explanation, if the document matches the query.
  #
  # @example Passing the query in the Lucene query syntax as the `:q` URL parameter
  #
  #   client.explain index: 'myindex', type: 'mytype', id: '1', q: 'test'
  # @example Passing the query in the Query DSL as the request `:body`
  #
  #   client.explain index: 'myindex', type: 'mytype', id: '1',
  #   body: { query: { match: { title: 'test' } } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/explain/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/explain.rb:42
  def explain(arguments = T.unsafe(nil)); end

  # Return the capabilities of fields among multiple indices
  #
  # @example
  #   client.field_caps fields: '*'
  #   # => { "fields" => "t"=>{"text"=>{"type"=>"text", "searchable"=>true, "aggregatable"=>false}} ...
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-caps.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/field_caps.rb:23
  def field_caps(arguments = T.unsafe(nil)); end

  # Return a specified document.
  #
  # The response contains full document, as stored in Elasticsearch, incl. `_source`, `_version`, etc.
  #
  # @example Get a document
  #
  #   client.get index: 'myindex', type: 'mytype', id: '1'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/get/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/get.rb:36
  def get(arguments = T.unsafe(nil)); end

  # Retrieve an indexed script from Elasticsearch
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html#_indexed_scripts
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/get_script.rb:16
  def get_script(arguments = T.unsafe(nil)); end

  # Return a specified document's `_source`.
  #
  # The response contains just the original document, as passed to Elasticsearch during indexing.
  #
  # @example Get a document `_source`
  #
  #   client.get_source index: 'myindex', type: 'mytype', id: '1'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/get/
  # @since 0.90.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/get_source.rb:35
  def get_source(arguments = T.unsafe(nil)); end

  # Create or update a document.
  #
  # The `index` API will either _create_ a new document, or _update_ an existing one, when a document `:id`
  # is passed. When creating a document, an ID will be auto-generated, when it's not passed as an argument.
  #
  # You can specifically enforce the _create_ operation by setting the `op_type` argument to `create`, or
  # by using the {Actions#create} method.
  #
  # Optimistic concurrency control is performed, when the `version` argument is specified. By default,
  # no version checks are performed.
  #
  # By default, the document will be available for {Actions#get} immediately, for {Actions#search} only
  # after an index refresh operation has been performed (either automatically or manually).
  #
  # @example Create or update a document `myindex/mytype/1`
  #
  #   client.index index: 'myindex',
  #   type: 'mytype',
  #   id: '1',
  #   body: {
  #   title: 'Test 1',
  #   tags: ['y', 'z'],
  #   published: true,
  #   published_at: Time.now.utc.iso8601,
  #   counter: 1
  #   }
  # @example Refresh the index after the operation (useful e.g. in integration tests)
  #
  #   client.index index: 'myindex', type: 'mytype', id: '1', body: { title: 'TEST' }, refresh: true
  #   client.search index: 'myindex', q: 'title:test'
  # @example Create a document with a specific expiration time (TTL)
  #
  #   # Decrease the default housekeeping interval first:
  #   client.cluster.put_settings body: { transient: { 'indices.ttl.interval' => '1s' } }
  #
  #   # Enable the `_ttl` property for all types within the index
  #   client.indices.create index: 'myindex', body: { mappings: { properties: { _ttl: { enabled: true } }  } }
  #
  #   client.index index: 'myindex', type: 'mytype', id: '1', body: { title: 'TEST' }, ttl: '5s'
  #
  #   sleep 3 and client.get index: 'myindex', type: 'mytype', id: '1'
  #   # => {"_index"=>"myindex" ... "_source"=>{"title"=>"TEST"}}
  #
  #   sleep 3 and client.get index: 'myindex', type: 'mytype', id: '1'
  #   # => Elasticsearch::Transport::Transport::Errors::NotFound: [404] ...
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/index.rb:78
  def index(arguments = T.unsafe(nil)); end

  # Return simple information about the cluster (name, version).
  #
  # @see http://elasticsearch.org/guide/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/info.rb:13
  def info(arguments = T.unsafe(nil)); end

  # Return multiple documents from one or more indices in a single request.
  #
  # Pass the request definition in the `:body` argument, either as an Array of `docs` specifications,
  # or `ids`, when the `:index` and document `:type` are specified.
  #
  # @example Get multiple documents fully specified in the `docs` definition
  #
  #   client.mget body: {
  #   docs: [
  #   { _index: 'myindex', _type: 'mytype', _id: '1' },
  #   { _index: 'myindex', _type: 'mytype', _id: '2' },
  #   { _index: 'myindex', _type: 'mytype', _id: '3' }
  #   ]
  #   }
  # @example Get multiple documents specified by `ids` while passing `:index` and `:type`
  #
  #   client.mget index: 'myindex', type: 'mytype', body: { ids: ['1', '2', '3'] }
  # @example Get only specific fields from documents
  #
  #   client.mget index: 'myindex', type: 'mytype', body: { ids: ['1', '2', '3'] }, fields: ['title']
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/multi-get/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/mget.rb:46
  def mget(arguments = T.unsafe(nil)); end

  # Perform multiple search operations in a single request.
  #
  # Pass the search definitions in the `:body` argument
  #
  # @example Perform multiple different searches as `:search`
  #
  #   client.msearch \
  #   body: [
  #   { search: { query: { match_all: {} } } },
  #   { index: 'myindex', type: 'mytype', search: { query: { query_string: { query: '"Test 1"' } } } },
  #   { search_type: 'count', search: { aggregations: { published: { terms: { field: 'published' } } } } }
  #   ]
  # @example Perform multiple different searches as an array of meta/data pairs
  #
  #   client.msearch \
  #   body: [
  #   { query: { match_all: {} } },
  #   { index: 'myindex', type: 'mytype' },
  #   { query: { query_string: { query: '"Test 1"' } } },
  #   { search_type: 'query_then_fetch' },
  #   { aggregations: { published: { terms: { field: 'published' } } } }
  #   ]
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-multi-search.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/msearch.rb:46
  def msearch(arguments = T.unsafe(nil)); end

  # Execute several search requests using templates (inline, indexed or stored in a file)
  #
  # @example Search with an inline script
  #
  #   client.msearch_template body: [
  #   { index: 'test' },
  #   { inline: { query: { match: { title: '{{q}}' } } }, params: { q: 'foo'} }
  #   ]
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-search-template.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/msearch_template.rb:29
  def msearch_template(arguments = T.unsafe(nil)); end

  # Returns information and statistics about terms in the fields of multiple documents
  # in a single request/response. The semantics are similar to the {#mget} API.
  #
  # @example Return information about multiple documents in a specific index
  #
  #   subject.mtermvectors index: 'my-index', type: 'my-type', body: { ids: [1, 2, 3] }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html
  # @see #mget
  # @see #termvector
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/mtermvectors.rb:38
  def mtermvectors(arguments = T.unsafe(nil)); end

  # Returns true if the cluster returns a successful HTTP response, false otherwise.
  #
  # @example
  #
  #   client.ping
  # @see http://elasticsearch.org/guide/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ping.rb:17
  def ping(arguments = T.unsafe(nil)); end

  # Store a script in an internal index (`.scripts`), to be able to reference them
  # in search definitions (with dynamic scripting disabled)
  #
  # @example Storing an Mvel script in Elasticsearch and using it in function score
  #
  #   client.put_script id: 'my_score', body: { script: { lang: 'groovy', source: 'log(_score * factor)' } }
  #
  #   client.search body: {
  #   query: {
  #   function_score: {
  #   query: { match: { title: 'foo' } },
  #   functions: [ { script_score: { script_id: 'my_score', params: { factor: 3 } } } ]
  #   }
  #   }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html#_indexed_scripts
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/put_script.rb:34
  def put_script(arguments = T.unsafe(nil)); end

  # The ranking evaluation API allows to evaluate the quality of ranked search results over a set of typical search queries.
  #   Given this set of queries and a list of manually rated documents, the _rank_eval endpoint calculates and
  #   returns typical information retrieval metrics like mean reciprocal rank, precision or discounted cumulative gain.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/rank_eval.rb:21
  def rank_eval(arguments = T.unsafe(nil)); end

  # Copy documents from one index to another, potentially changing
  # its settings, mappings and the documents itself.
  #
  # @example Copy documents into a different index
  #
  #   client.reindex body: { source: { index: 'test1' }, dest: { index: 'test2' } }
  # @example Limit the copied documents with a query
  #
  #   client.reindex body: {
  #   source: {
  #   index: 'test1',
  #   query: { terms: { category: ['one', 'two'] }  }
  #   },
  #   dest: {
  #   index: 'test2'
  #   }
  #   }
  # @example Remove a field from reindexed documents
  #
  #   client.reindex body: {
  #   source: {
  #   index: 'test1'
  #   },
  #   dest: {
  #   index: 'test3'
  #   },
  #   script: {
  #   inline: 'ctx._source.remove("category")'
  #   }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/reindex.rb:53
  def reindex(arguments = T.unsafe(nil)); end

  # The value of requests_per_second can be changed on a running reindex using the _rethrottle
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/reindex_rethrottle.rb:16
  def reindex_rethrottle(arguments = T.unsafe(nil)); end

  # Pre-render search requests before they are executed and fill existing templates with template parameters
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/render_search_template.rb:16
  def render_search_template(arguments = T.unsafe(nil)); end

  # The Painless execute API allows an arbitrary script to be executed and a result to be returned.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-execute-api.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/scripts_painless_execute.rb:15
  def scripts_painless_execute(arguments = T.unsafe(nil)); end

  # Efficiently iterate over a large result set.
  #
  # When using `from` and `size` to return a large result sets, performance drops as you "paginate" in the set,
  # and you can't guarantee the consistency when the index is being updated at the same time.
  #
  # The "Scroll" API uses a "point in time" snapshot of the index state, which was created via a "Search" API
  # request specifying the `scroll` parameter.
  #
  # @example A basic example
  #
  #   result = client.search index: 'scrollindex',
  #   scroll: '5m',
  #   body: { query: { match: { title: 'test' } }, sort: '_id' }
  #
  #   result = client.scroll body: { scroll_id: result['_scroll_id'], scroll: '5m' }
  # @example Call the `scroll` API until all the documents are returned
  #
  #   # Index 1,000 documents
  #   client.indices.delete index: 'test'
  #   1_000.times do |i| client.index index: 'test', type: 'test', id: i+1, body: {title: "Test #{i+1}"} end
  #   client.indices.refresh index: 'test'
  #
  #   # Open the "view" of the index by passing the `scroll` parameter
  #   # Sorting by `_doc` makes the operations faster
  #   r = client.search index: 'test', scroll: '1m', body: {sort: ['_doc']}
  #
  #   # Display the initial results
  #   puts "--- BATCH 0 -------------------------------------------------"
  #   puts r['hits']['hits'].map { |d| d['_source']['title'] }.inspect
  #
  #   # Call the `scroll` API until empty results are returned
  #   while r = client.scroll(body: { scroll_id: r['_scroll_id'] }, scroll: '5m') and not r['hits']['hits'].empty? do
  #   puts "--- BATCH #{defined?($i) ? $i += 1 : $i = 1} -------------------------------------------------"
  #   puts r['hits']['hits'].map { |d| d['_source']['title'] }.inspect
  #   puts
  #   end
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/guide/current/scan-scroll.html#scan-scroll
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/scroll.rb:56
  def scroll(arguments = T.unsafe(nil)); end

  # Return documents matching a query, as well as aggregations (facets), highlighted snippets, suggestions, etc.
  #
  # The search API is used to query one or more indices either using simple
  # [query string queries](https://www.elastic.co/guide/reference/api/search/uri-request/)
  # as the `:q` argument , or by passing the
  # [full request definition](https://www.elastic.co/guide/reference/api/search/request-body/)
  # in the [Query DSL](https://www.elastic.co/guide/reference/query-dsl/) as the `:body` argument.
  #
  # @example Search with a simple query string query
  #
  #   client.search index: 'myindex', q: 'title:test'
  # @example Passing a full request definition in the Elasticsearch's Query DSL as a `Hash`
  #
  #   client.search index: 'myindex',
  #   body: {
  #   query: { match: { title: 'test' } },
  #   aggregations: { tags: { terms: { field: 'tags' } } }
  #   }
  # @example Paginating results: return 10 documents, beginning from the 10th
  #
  #   client.search index: 'myindex',
  #   body: {
  #   query: { match: { title: 'test' } },
  #   from: 10,
  #   size: 10
  #   }
  # @example Passing the search definition as a `String`, built with a JSON builder
  #
  #   require 'jbuilder'
  #
  #   json = Jbuilder.encode do |json|
  #   json.query do
  #   json.match do
  #   json.title do
  #   json.query    'test 1'
  #   json.operator 'and'
  #   end
  #   end
  #   end
  #   end
  #
  #   client.search index: 'myindex', body: json
  # @example Wrapping the result in [`Hashie::Mash`](https://github.com/intridea/hashie) for easier access
  #
  #   response = client.search index: 'myindex',
  #   body: {
  #   query:  { match: { title: 'test' } },
  #   aggregations: { tags:  { terms: { field: 'tags' } } }
  #   }
  #
  #   response = Hashie::Mash.new response
  #
  #   response.hits.hits.first._source.title
  #
  #   response.aggregations.tags.terms.to_a.map { |f| "#{f.term} [#{f.count}]" }.join(', ')
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [Hash]
  # @see https://www.elastic.co/guide/reference/api/search/
  # @see https://www.elastic.co/guide/reference/api/search/request-body/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/search.rb:132
  def search(arguments = T.unsafe(nil)); end

  # Returns the names of indices and shards on which a search request would be executed
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/search_shards.rb:28
  def search_shards(arguments = T.unsafe(nil)); end

  # Configure the search definition witha template in Mustache and parameters
  #
  # @example Insert the start and end values for the `range` query
  #
  #   client.search_template index: 'myindex',
  #   body: {
  #   template: {
  #   query: {
  #   range: {
  #   date: { gte: "{{start}}", lte: "{{end}}" }
  #   }
  #   }
  #   },
  #   params: { start: "2014-02-01", end: "2014-03-01" }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/search_template.rb:44
  def search_template(arguments = T.unsafe(nil)); end

  # @deprecated Use the plural version, {#termvectors}
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/termvectors.rb:84
  def termvector(arguments = T.unsafe(nil)); end

  # Return information and statistics about terms in the fields of a particular document
  #
  # @example Get statistics for an indexed document
  #
  #   client.indices.create index: 'my_index',
  #   body: {
  #   mappings: {
  #   properties: {
  #   text: {
  #   type: 'string',
  #   term_vector: 'with_positions_offsets_payloads'
  #   }
  #   }
  #   }
  #   }
  #
  #   client.index index: 'my_index', type: 'my_type', id: '1', body: { text: 'Foo Bar Fox' }
  #
  #   client.termvectors index: 'my_index', type: 'my_type', id: '1'
  #   # => { ..., "term_vectors" => { "text" => { "field_statistics" => { ... }, "terms" => { "bar" => ... } } }
  # @example Get statistics for an arbitrary document
  #
  #   client.termvector index: 'my_index', type: 'my_type',
  #   body: {
  #   doc: {
  #   text: 'Foo Bar Fox'
  #   }
  #   }
  #   # => { ..., "term_vectors" => { "text" => { "field_statistics" => { ... }, "terms" => { "bar" => ... } } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/termvectors.rb:60
  def termvectors(arguments = T.unsafe(nil)); end

  # Update a document without sending the whole document in the request ("partial update").
  #
  # Send either a partial document (`doc` ) which will be deeply merged into an existing document,
  # or a `script`, which will update the document content, in the `:body` argument.
  #
  # The partial update operation allows you to limit the amount of data you send over the wire and
  # reduces the chance of failed updates due to conflict.
  #
  # Specify the `:version` and `:retry_on_conflict` arguments to balance convenience and consistency.
  #
  # @example Update document _title_ using partial `doc`-ument
  #
  #   client.update index: 'myindex', type: 'mytype', id: '1',
  #   body: { doc: { title: 'Updated' } }
  # @example Add a tag to document `tags` property using a `script`
  #
  #   client.update index: 'myindex', type: 'mytype', id: '1',
  #   body: { script: { source: 'ctx._source.tags.add(params.tag)', params: { tag: 'x' } } }
  # @example Increment a document counter by 1 _or_ initialize it, when the document does not exist
  #
  #   client.update index: 'myindex', type: 'mytype', id: '666',
  #   body: { script: 'ctx._source.counter += 1', upsert: { counter: 1 } }
  # @example Delete a document if it's tagged "to-delete"
  #
  #   client.update index: 'myindex', type: 'mytype', id: '1',
  #   body: { script: 'ctx._source.tags.contains(params.tag) ? ctx.op = "delete" : ctx.op = "none"',
  #   params: { tag: 'to-delete' } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://elasticsearch.org/guide/reference/api/update/
  # @since 0.20
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/update.rb:73
  def update(arguments = T.unsafe(nil)); end

  # Process every document matching a query, potentially updating it
  #
  # @example Update all documents in the index, eg. to pick up new mappings
  #
  #   client.update_by_query index: 'articles'
  # @example Update a property of documents matching a query in the index
  #
  #   client.update_by_query index: 'article',
  #   body: {
  #   script: { inline: 'ctx._source.views += 1' },
  #   query: { match: { title: 'foo' } }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/update_by_query.rb:63
  def update_by_query(arguments = T.unsafe(nil)); end

  # The value of requests_per_second can be changed on a running update by query using the _rethrottle API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/update_by_query_rethrottle.rb:16
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/params_registry.rb:8
module Elasticsearch::API::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/params_registry.rb:40
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/params_registry.rb:26
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/params_registry.rb:15
Elasticsearch::API::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:21
Elasticsearch::API::COMMON_PARAMS = T.let(T.unsafe(nil), Array)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:30
Elasticsearch::API::COMMON_QUERY_PARAMS = T.let(T.unsafe(nil), Array)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:7
module Elasticsearch::API::Cat
  # Proxy method for {CatClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/cat.rb:18
  def cat; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:8
module Elasticsearch::API::Cat::Actions
  # Returns information about aliases, including associated routing values and filters.
  #
  # @example Display all aliases in the cluster
  #
  #   puts client.cat.aliases
  # @example Display indices for the 'year-2013' alias
  #
  #   puts client.cat.aliases name: 'year-2013'
  # @example Display header names in the output
  #
  #   puts client.cat.aliases v: true
  # @example Return only the 'alias' and 'index' columns
  #
  #   puts client.cat.aliases h: ['alias', 'index']
  # @example Return only the 'alias' and 'index' columns, using short names
  #
  #   puts client.cat.aliases h: 'a,i'
  # @example Return the output sorted by the alias name
  #
  #   puts client.cat.aliases s: 'alias'
  # @example Return the information as Ruby objects
  #
  #   client.cat.aliases format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-aliases.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/aliases.rb:52
  def aliases(arguments = T.unsafe(nil)); end

  # Return shard allocation information
  #
  # @example Display allocation for all nodes in the cluster
  #
  #   puts client.cat.allocation
  # @example Display allocation for node with name 'node-1'
  #
  #   puts client.cat.allocation node_id: 'node-1'
  # @example Display header names in the output
  #
  #   puts client.cat.allocation v: true
  # @example Display only specific columns in the output (see the `help` parameter)
  #
  #   puts client.cat.allocation h: ['node', 'shards', 'disk.percent']
  # @example Display only specific columns in the output, using the short names
  #
  #   puts client.cat.allocation h: 'n,s,dp'
  # @example Return the information as Ruby objects
  #
  #   client.cat.allocation format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/allocation.rb:49
  def allocation(arguments = T.unsafe(nil)); end

  # Return document counts for the entire cluster or specific indices
  #
  # @example Display number of documents in the cluster
  #
  #   puts client.cat.count
  # @example Display number of documents in an index
  #
  #   puts client.cat.count index: 'index-a'
  # @example Display number of documents in a list of indices
  #
  #   puts client.cat.count index: ['index-a', 'index-b']
  # @example Display header names in the output
  #
  #   puts client.cat.count v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.count format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/count.rb:44
  def count(arguments = T.unsafe(nil)); end

  # Return information about field data usage across the cluster
  #
  # @example Return the total size of field data
  #
  #   client.cat.fielddata
  # @example Return both the total size and size for specific fields
  #
  #   client.cat.fielddata fields: 'title,body'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/fielddata.rb:32
  def fielddata(arguments = T.unsafe(nil)); end

  # Display a terse version of the {Elasticsearch::API::Cluster::Actions#health} API output
  #
  # @example Display cluster health
  #
  #   puts client.cat.health
  # @example Display header names in the output
  #
  #   puts client.cat.health v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.health format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/health.rb:36
  def health(arguments = T.unsafe(nil)); end

  # Help information for the Cat API
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/help.rb:16
  def help(arguments = T.unsafe(nil)); end

  # Return the most important statistics about indices, across the cluster nodes
  #
  # Use the `help` parameter to display available statistics.
  #
  # @example Display information for all indices
  #
  #   puts client.cat.indices
  # @example Display information for a specific index
  #
  #   puts client.cat.indices index: 'index-a'
  # @example Display information for indices matching a pattern
  #
  #   puts client.cat.indices index: 'index-*'
  # @example Display header names in the output
  #
  #   puts client.cat.indices v: true
  # @example Display only specific columns in the output (see the `help` parameter)
  #
  #   puts client.cat.indices h: ['index', 'docs.count', 'fielddata.memory_size', 'filter_cache.memory_size']
  # @example Display only specific columns in the output, using the short names
  #
  #   puts client.cat.indices h: 'i,dc,ss,mt', v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.indices format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/indices.rb:58
  def indices(arguments = T.unsafe(nil)); end

  # Display basic information about the master node
  #
  # @example
  #
  #   puts client.cat.master
  # @example Display header names in the output
  #
  #   puts client.cat.master v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.master format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/master.rb:35
  def master(arguments = T.unsafe(nil)); end

  # Display custom node attributes
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/nodeattrs.rb:21
  def nodeattrs(arguments = T.unsafe(nil)); end

  # Display information about cluster topology and nodes statistics
  #
  # @example Display basic information about nodes in the cluster (host, node name, memory usage, master, etc.)
  #
  #   puts client.cat.nodes
  # @example Display header names in the output
  #
  #   puts client.cat.nodes v: true
  # @example Display only specific columns in the output (see the `help` parameter)
  #
  #   puts client.cat.nodes h: %w(name version jdk disk.avail heap.percent load merges.total_time), v: true
  # @example Display only specific columns in the output, using the short names
  #
  #   puts client.cat.nodes h: 'n,v,j,d,hp,l,mtt', v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.nodes format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/nodes.rb:44
  def nodes(arguments = T.unsafe(nil)); end

  # Display the information from the {Cluster::Actions#pending_tasks} API in a tabular format
  #
  # @example
  #
  #   puts client.cat.pending_tasks
  # @example Display header names in the output
  #
  #   puts client.cat.pending_tasks v: true
  # @example Return the information as Ruby objects
  #
  #   client.cat.pending_tasks format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/pending_tasks.rb:35
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Return information about installed plugins
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/plugins.rb:22
  def plugins(arguments = T.unsafe(nil)); end

  # Display information about the recovery process (allocating shards)
  #
  # @example Display information for all indices
  #
  #   puts client.cat.recovery
  # @example Display information for a specific index
  #
  #   puts client.cat.recovery index: 'index-a'
  # @example Display information for indices matching a pattern
  #
  #   puts client.cat.recovery index: 'index-*'
  # @example Display header names in the output
  #
  #   puts client.cat.recovery v: true
  # @example Display only specific columns in the output (see the `help` parameter)
  #
  #   puts client.cat.recovery h: ['node', 'index', 'shard', 'percent']
  # @example Display only specific columns in the output, using the short names
  #
  #   puts client.cat.recovery h: 'n,i,s,per'
  # @example Return the information as Ruby objects
  #
  #   client.cat.recovery format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/recovery.rb:53
  def recovery(arguments = T.unsafe(nil)); end

  # Shows all repositories registered in a cluster
  #
  # @example Return list of repositories
  #
  #   client.cat.repositories
  # @example Return only id for each repository
  #
  #   client.cat.repositories h: 'id'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-repositories.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/repositories.rb:28
  def repositories(arguments = T.unsafe(nil)); end

  # Display information about the segments in the shards of an index
  #
  # @example Display information for all indices
  #
  #   puts client.cat.segments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/segments.rb:25
  def segments(arguments = T.unsafe(nil)); end

  # Display shard allocation across nodes
  #
  # @example Display information for all indices
  #
  #   puts client.cat.shards
  # @example Display information for a specific index
  #
  #   puts client.cat.shards index: 'index-a'
  # @example Display information for a list of indices
  #
  #   puts client.cat.shards index: ['index-a', 'index-b']
  # @example Display header names in the output
  #
  #   puts client.cat.shards v: true
  # @example Display shard size in choice of units
  #
  #   puts client.cat.shards bytes: 'b'
  # @example Display only specific columns in the output (see the `help` parameter)
  #
  #   puts client.cat.shards h: ['node', 'index', 'shard', 'prirep', 'docs', 'store', 'merges.total']
  # @example Display only specific columns in the output, using the short names
  #
  #   puts client.cat.shards h: 'n,i,s,p,d,sto,mt'
  # @example Return the information as Ruby objects
  #
  #   client.cat.shards format: 'json'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/shards.rb:57
  def shards(arguments = T.unsafe(nil)); end

  # Shows all snapshots that belong to a specific repository
  #
  # @example Return snapshots for 'my_repository'
  #
  #   client.cat.snapshots repository: 'my_repository'
  # @example Return id, status and start_epoch for 'my_repository'
  #
  #   client.cat.snapshots repository: 'my_repository', h: 'id,status,start_epoch'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/snapshots.rb:28
  def snapshots(arguments = T.unsafe(nil)); end

  # Return currently running tasks
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/tasks.rb:25
  def tasks(arguments = T.unsafe(nil)); end

  # Returns information about existing templates
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/templates.rb:23
  def templates(arguments = T.unsafe(nil)); end

  # Display thread pool statistics across nodes (use the `help` parameter to display a list
  # of avaialable thread pools)
  #
  # @example Display information about all thread pools across nodes
  #
  #   puts client.cat.thread_pool
  # @example Display header names in the output
  #
  #   puts client.cat.thread_pool v: true
  # @example Display information about the indexing thread pool
  #
  #   puts client.cat.thread_pool h: %w(h ip index.active index.size index.queue index.rejected), v: true
  # @example Display information about the indexing and search threads, using the short names
  #
  #   puts client.cat.thread_pool h: 'host,ia,is,iq,ir,sa,ss,sq,sr', v: true
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/thread_pool.rb:45
  def thread_pool(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:9
module Elasticsearch::API::Cat::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cat::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cat/params_registry.rb:16
Elasticsearch::API::Cat::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cat" namespace (includes the {Cat::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/cat.rb:12
class Elasticsearch::API::Cat::CatClient
  include ::Elasticsearch::API::Cat::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:7
module Elasticsearch::API::Cluster
  # Proxy method for {ClusterClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/cluster.rb:18
  def cluster; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:8
module Elasticsearch::API::Cluster::Actions
  # Return the information about why a shard is or isn't allocated
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/allocation_explain.rb:19
  def allocation_explain(arguments = T.unsafe(nil)); end

  # Get the cluster settings (previously set with {Cluster::Actions#put_settings})
  #
  # @example Get cluster settings
  #
  #   client.cluster.get_settings
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/get_settings.rb:22
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns information about cluster "health".
  #
  # @example Get the cluster health information
  #
  #   client.cluster.health
  # @example Block the request until the cluster is in the "yellow" state
  #
  #   client.cluster.health wait_for_status: 'yellow'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-health/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/health.rb:42
  def health(arguments = T.unsafe(nil)); end

  # Returns a list of any cluster-level changes (e.g. create index, update mapping, allocate or fail shard)
  # which have not yet been executed and are queued up.
  #
  # @example Get a list of currently queued up tasks in the cluster
  #
  #   client.cluster.pending_tasks
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/pending_tasks.rb:23
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Update cluster settings.
  #
  # @example Disable shard allocation in the cluster until restart
  #
  #   client.cluster.put_settings body: { transient: { 'cluster.routing.allocation.disable_allocation' => true } }
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-update-settings/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/put_settings.rb:21
  def put_settings(arguments = T.unsafe(nil)); end

  # Returns the configured remote cluster information
  #
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-remote-info.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/remote_info.rb:15
  def remote_info(arguments = T.unsafe(nil)); end

  # Perform manual shard allocation in the cluster.
  #
  # Pass the operations you want to perform in the `:body` option. Use the `dry_run` option to
  # evaluate the result of operations without actually performing them.
  #
  # @example Move shard `0` of index `myindex` from node named _Node1_ to node named _Node2_
  #
  #   client.cluster.reroute body: {
  #   commands: [
  #   { move: { index: 'myindex', shard: 0, from_node: 'Node1', to_node: 'Node2' } }
  #   ]
  #   }
  # @note If you want to explicitly set the shard allocation to a certain node, you might
  #   want to look at the `allocation.*` cluster settings.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-reroute/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/reroute.rb:38
  def reroute(arguments = T.unsafe(nil)); end

  # Get information about the cluster state (indices settings, allocations, etc)
  #
  # @example
  #
  #   client.cluster.state
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-state/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/state.rb:34
  def state(arguments = T.unsafe(nil)); end

  # Returns statistical information about the cluster
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/stats.rb:19
  def stats(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:9
module Elasticsearch::API::Cluster::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Cluster::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/cluster/params_registry.rb:16
Elasticsearch::API::Cluster::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "cluster" namespace (includes the {Cluster::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/cluster.rb:12
class Elasticsearch::API::Cluster::ClusterClient
  include ::Elasticsearch::API::Cluster::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:7
module Elasticsearch::API::Common; end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:8
module Elasticsearch::API::Common::Actions; end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:10
module Elasticsearch::API::Common::Client
  # Delegates the `perform_request` method to the wrapped client
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:24
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

# Base client wrapper
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:14
module Elasticsearch::API::Common::Client::Base
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:17
  def initialize(client); end

  # Returns the value of attribute client.
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/common.rb:15
  def client; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:45
Elasticsearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:19
Elasticsearch::API::DEFAULT_SERIALIZER = MultiJson

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:42
Elasticsearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:38
Elasticsearch::API::HTTP_GET = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:39
Elasticsearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:40
Elasticsearch::API::HTTP_POST = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:41
Elasticsearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:7
module Elasticsearch::API::Indices
  # Proxy method for {IndicesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/indices.rb:18
  def indices; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:8
module Elasticsearch::API::Indices::Actions
  # Return the result of the analysis process (tokens)
  #
  # Allows to "test-drive" the Elasticsearch analysis process by performing the analysis on the
  # same text with different analyzers. An ad-hoc analysis chain can be built from specific
  # _tokenizer_ and _filters_.
  #
  # client.indices.analyze body: { text: 'The Quick <b>Brown</b> Jumping Fox',
  #                                tokenizer: 'standard',
  #                                char_filter: ['html_strip'] }
  #
  # @example Analyze text "Quick Brown Jumping Fox" with the _snowball_ analyzer
  #
  #   client.indices.analyze text: 'The Quick Brown Jumping Fox', analyzer: 'snowball'
  # @example Analyze text "Quick Brown Jumping Fox" with a custom tokenizer and filter chain
  #
  #   client.indices.analyze body: { text: 'The Quick Brown Jumping Fox',
  #   tokenizer: 'whitespace',
  #   filter: ['lowercase','stop'] }
  # @example Analyze text "Quick <b>Brown</b> Jumping Fox" with custom tokenizer, token and character filters
  # @note If your text for analysis is longer than 4096 bytes then you should use the :body argument, rather than :text, to avoid HTTP transport errors
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-analyze/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/analyze.rb:53
  def analyze(arguments = T.unsafe(nil)); end

  # Clear caches and other auxiliary data structures.
  #
  # Can be performed against a specific index, or against all indices.
  #
  # By default, all caches and data structures will be cleared.
  # Pass a specific cache or structure name to clear just a single one.
  #
  # @example Clear all caches and data structures
  #
  #   client.indices.clear_cache
  # @example Clear the field data structure only
  #
  #   client.indices.clear_cache field_data: true
  # @example Clear only specific field in the field data structure
  #
  #   client.indices.clear_cache field_data: true, fields: 'created_at', filter_cache: false, id_cache: false
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/clear_cache.rb:44
  def clear_cache(arguments = T.unsafe(nil)); end

  # Clone an existing index into a new index, where each original primary shard is cloned into a
  #   new primary shard in the new index.
  #
  # @example Clone index named _myindex_
  #
  #   client.indices.clone(index: 'my_source_index', target: 'my_target_index')
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clone-index.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/clone.rb:27
  def clone(arguments = T.unsafe(nil)); end

  # Close an index (keep the data on disk, but deny operations with the index).
  #
  # A closed index can be opened again with the {Indices::Actions#close} API.
  #
  # @example Close index named _myindex_
  #
  #   client.indices.close index: 'myindex'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-open-close/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/close.rb:33
  def close(arguments = T.unsafe(nil)); end

  # Create an index.
  #
  # Pass the index `settings` and `mappings` in the `:body` attribute.
  #
  # @example Create an index with specific settings, custom analyzers and mappings
  #
  #   client.indices.create index: 'test',
  #   body: {
  #   settings: {
  #   index: {
  #   number_of_shards: 1,
  #   number_of_replicas: 0,
  #   'routing.allocation.include.name' => 'node-1'
  #   },
  #   analysis: {
  #   filter: {
  #   ngram: {
  #   type: 'nGram',
  #   min_gram: 3,
  #   max_gram: 25
  #   }
  #   },
  #   analyzer: {
  #   ngram: {
  #   tokenizer: 'whitespace',
  #   filter: ['lowercase', 'stop', 'ngram'],
  #   type: 'custom'
  #   },
  #   ngram_search: {
  #   tokenizer: 'whitespace',
  #   filter: ['lowercase', 'stop'],
  #   type: 'custom'
  #   }
  #   }
  #   }
  #   },
  #   mappings: {
  #   properties: {
  #   title: {
  #   type: 'multi_field',
  #   fields: {
  #   title:  { type: 'string', analyzer: 'snowball' },
  #   exact:  { type: 'string', analyzer: 'keyword' },
  #   ngram:  { type: 'string',
  #   index_analyzer: 'ngram',
  #   search_analyzer: 'ngram_search'
  #   }
  #   }
  #   }
  #   }
  #   }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-create-index/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/create.rb:74
  def create(arguments = T.unsafe(nil)); end

  # Delete an index, list of indices, or all indices in the cluster.
  #
  # @example Delete an index
  #
  #   client.indices.delete index: 'foo'
  # @example Delete a list of indices
  #
  #   client.indices.delete index: ['foo', 'bar']
  #   client.indices.delete index: 'foo,bar'
  # @example Delete a list of indices matching wildcard expression
  #
  #   client.indices.delete index: 'foo*'
  # @example Delete all indices
  #
  #   client.indices.delete index: '_all'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-delete-index/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/delete.rb:40
  def delete(arguments = T.unsafe(nil)); end

  # Delete a single index alias.
  #
  # See the {Indices::Actions#update_aliases} for performing operations with index aliases in bulk.
  #
  # @example Delete an alias
  #
  #   client.indices.delete_alias index: 'foo', name: 'bar'
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/delete_alias.rb:24
  def delete_alias(arguments = T.unsafe(nil)); end

  # Delete an index template.
  #
  # @example Delete a template named _mytemplate_
  #
  #   client.indices.delete_template name: 'mytemplate'
  # @example Delete all templates
  #
  #   client.indices.delete_template name: '*'
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-templates/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/delete_template.rb:25
  def delete_template(arguments = T.unsafe(nil)); end

  # Return true if the index (or all indices in a list) exists, false otherwise.
  #
  # @example Check whether index named _myindex_ exists
  #
  #   client.indices.exists? index: 'myindex'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @return [true, false]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-indices-exists/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists.rb:33
  def exists(arguments = T.unsafe(nil)); end

  # Return true if the index (or all indices in a list) exists, false otherwise.
  #
  # @example Check whether index named _myindex_ exists
  #   client.indices.exists? index: 'myindex'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @return [true, false]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-indices-exists/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists.rb:33
  def exists?(arguments = T.unsafe(nil)); end

  # Return true if the specified alias exists, false otherwise.
  #
  # @example Check whether index alias named _myalias_ exists
  #
  #   client.indices.exists_alias? name: 'myalias'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_alias.rb:32
  def exists_alias(arguments = T.unsafe(nil)); end

  # Return true if the specified alias exists, false otherwise.
  #
  # @example Check whether index alias named _myalias_ exists
  #   client.indices.exists_alias? name: 'myalias'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_alias.rb:32
  def exists_alias?(arguments = T.unsafe(nil)); end

  # Return true if the specified index template exists, false otherwise.
  #
  #     client.indices.exists_template? name: 'mytemplate'
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_template.rb:20
  def exists_template(arguments = T.unsafe(nil)); end

  # Return true if the specified index template exists, false otherwise.
  #
  #     client.indices.exists_template? name: 'mytemplate'
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_template.rb:20
  def exists_template?(arguments = T.unsafe(nil)); end

  # Return true if the specified type exists, false otherwise.
  #
  #     client.indices.exists_type? index: 'myindex', type: 'mytype'
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_type.rb:31
  def exists_type(arguments = T.unsafe(nil)); end

  # Return true if the specified type exists, false otherwise.
  #
  #     client.indices.exists_type? index: 'myindex', type: 'mytype'
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/exists_type.rb:31
  def exists_type?(arguments = T.unsafe(nil)); end

  # "Flush" the index or indices.
  #
  # The "flush" operation clears the transaction log and memory and writes data to disk.
  # It corresponds to a Lucene "commit" operation.
  #
  # @note The flush operation is handled automatically by Elasticsearch, you don't need to perform it manually.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-flush/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/flush.rb:30
  def flush(arguments = T.unsafe(nil)); end

  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/flush_synced.rb:17
  def flush_synced(arguments = T.unsafe(nil)); end

  # Force merge an index, list of indices, or all indices in the cluster.
  #
  # @example Fully force merge an index
  #
  #   client.indices.forcemerge index: 'foo', max_num_segments: 1
  # @example Do not flush index after force-merging
  #
  #   client.indices.forcemerge index: 'foo', flush: false
  # @example Do not expunge deleted documents after force-merging
  #
  #   client.indices.forcemerge index: 'foo', only_expunge_deletes: false
  # @example Force merge a list of indices
  #
  #   client.indices.forcemerge index: ['foo', 'bar']
  #   client.indices.forcemerge index: 'foo,bar'
  # @example forcemerge a list of indices matching wildcard expression
  #
  #   client.indices.forcemerge index: 'foo*'
  # @example forcemerge all indices
  #
  #   client.indices.forcemerge index: '_all'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/forcemerge.rb:47
  def forcemerge(arguments = T.unsafe(nil)); end

  # In order to keep indices available and queryable for a longer period but at the same time reduce their
  #   hardware requirements they can be transitioned into a frozen state. Once an index is frozen, all of its
  #   transient shard memory (aside from mappings and analyzers) is moved to persistent storage.
  #
  # @note This feature is available in the Platinum distribution of Elasticsearch.
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/frozen-indices.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/freeze.rb:16
  def freeze(arguments = T.unsafe(nil)); end

  # Retrieve information about one or more indices
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get.rb:24
  def get(arguments = T.unsafe(nil)); end

  # Get information about a specific alias.
  #
  # @example Return all indices an alias points to
  #
  #   client.indices.get_alias name: '2013'
  # @example Return all indices matching a wildcard pattern an alias points to
  #
  #   client.indices.get_alias index: 'log*', name: '2013'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get_alias.rb:29
  def get_alias(arguments = T.unsafe(nil)); end

  # Return the mapping definition for specific field (or fields)
  #
  # @example Get mapping for a specific field across all indices
  #
  #   client.indices.get_field_mapping field: 'foo'
  # @example Get mapping for a specific field in an index
  #
  #   client.indices.get_field_mapping index: 'foo', field: 'bar'
  # @example Get mappings for multiple fields in an index
  #
  #   client.indices.get_field_mapping index: 'foo', field: ['bar', 'bam']
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get_field_mapping.rb:36
  def get_field_mapping(arguments = T.unsafe(nil)); end

  # Return the mapping definitions for all indices, or specific indices/types.
  #
  # @example Get all mappings in the cluster
  #
  #   client.indices.get_mapping
  # @example Get mapping for a specific index
  #
  #   client.indices.get_mapping index: 'foo'
  # @example Get mapping for a specific type in a specific index
  #
  #   client.indices.get_mapping index: 'foo', type: 'baz'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get_mapping.rb:35
  def get_mapping(arguments = T.unsafe(nil)); end

  # Return the settings for all indices, or a list of indices.
  #
  # @example Get settings for all indices
  #
  #   client.indices.get_settings
  # @example Get settings for the 'foo' index
  #
  #   client.indices.get_settings index: 'foo'
  # @example Get settings for indices beginning with foo
  #
  #   client.indices.get_settings prefix: 'foo'
  # @example Get settings for an index named _myindex_
  #
  #   client.indices.get_settings index: 'myindex'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-get-settings/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get_settings.rb:40
  def get_settings(arguments = T.unsafe(nil)); end

  # Get a single index template.
  #
  # @example Get all templates
  #
  #   client.indices.get_template
  # @example Get a template named _mytemplate_
  #
  #   client.indices.get_template name: 'mytemplate'
  # @note Use the {Cluster::Actions#state} API to get a list of all templates.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-templates/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/get_template.rb:30
  def get_template(arguments = T.unsafe(nil)); end

  # Open a previously closed index (see the {Indices::Actions#close} API).
  #
  # @example Open index named _myindex_
  #
  #   client.indices.open index: 'myindex'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-open-close/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/open.rb:26
  def open(arguments = T.unsafe(nil)); end

  # Create or update a single index alias.
  #
  # See the {Indices::Actions#update_aliases} for performing operations with index aliases in bulk.
  #
  # @example Create an alias for current month
  #
  #   client.indices.put_alias index: 'logs-2013-06', name: 'current-month'
  # @example Create an alias for multiple indices
  #
  #   client.indices.put_alias index: 'logs-2013-06', name: 'year-2013'
  #   client.indices.put_alias index: 'logs-2013-05', name: 'year-2013'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/put_alias.rb:31
  def put_alias(arguments = T.unsafe(nil)); end

  # Create or update mapping.
  #
  # Pass the mapping definition(s) in the `:body` argument.
  #
  # @example Create or update a mapping for a specific document type
  #
  #   client.indices.put_mapping index: 'myindex', type: 'mytype', body: {
  #   mytype: {
  #   properties: {
  #   title: { type: 'text', analyzer: 'snowball' }
  #   }
  #   }
  #   }
  # @example Update the mapping for a specific type in all indices
  #
  #   client.indices.put_mapping type: 'mytype', body: {
  #   mytype: {
  #   dynamic: 'strict'
  #   }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-put-mapping/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/put_mapping.rb:44
  def put_mapping(arguments = T.unsafe(nil)); end

  # Update the settings for one or multiple indices.
  #
  # @example Change the number of replicas for all indices
  #
  #   client.indices.put_settings body: { index: { number_of_replicas: 0 } }
  # @example Change the number of replicas for a specific index
  #
  #   client.indices.put_settings index: 'myindex', body: { index: { number_of_replicas: 0 } }
  # @example Disable "flush" for all indices
  #
  #   client.indices.put_settings body: { 'index.translog.disable_flush' => true }
  # @example Allocate specific index on specific nodes
  #
  #   client.indices.put_settings index: 'my-big-index',
  #   body: { 'index.routing.allocation.require.tag' => 'bigbox' }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-update-settings/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/put_settings.rb:43
  def put_settings(arguments = T.unsafe(nil)); end

  # Create or update an index template.
  #
  # @example Create a template for all indices starting with `logs-`
  #
  #   client.indices.put_template name: 'foo',
  #   body: { template: 'logs-*', settings: { 'index.number_of_shards' => 1 } }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-templates/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/put_template.rb:28
  def put_template(arguments = T.unsafe(nil)); end

  # Return information about shard recovery for one or more indices
  #
  # @example Get recovery information for a single index
  #
  #   client.indices.recovery index: 'foo'
  # @example Get detailed recovery information for multiple indices
  #
  #   client.indices.recovery index: ['foo', 'bar'], detailed: true
  # @example Get recovery information for all indices
  #
  #   client.indices.recovery
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/recovery.rb:30
  def recovery(arguments = T.unsafe(nil)); end

  # Refresh the index and to make the changes (creates, updates, deletes) searchable.
  #
  # By default, Elasticsearch has a delay of 1 second until changes to an index are
  # available for search; the delay is configurable, see {Indices::Actions#put_settings}.
  #
  # You can trigger this operation explicitly, for example when performing a sequence of commands
  # in integration tests, or when you need to perform a manual "synchronization" of the index
  # with an external system at given moment.
  #
  # @example Refresh an index named _myindex_
  #
  #   client.indices.refresh index: 'myindex'
  # @note The refresh operation can adversely affect indexing throughput when used too frequently.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/admin-indices-refresh/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/refresh.rb:32
  def refresh(arguments = T.unsafe(nil)); end

  # The rollover index API rolls an alias over to a new index when the existing index
  # is considered to be too large or too old
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/rollover.rb:24
  def rollover(arguments = T.unsafe(nil)); end

  # Return information about segments for one or more indices.
  #
  # The response contains information about segment size, number of documents, deleted documents, etc.
  # See also {Indices::Actions#optimize}.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-indices-segments/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/segments.rb:23
  def segments(arguments = T.unsafe(nil)); end

  # Provides low-level information about shards (allocated nodes, exceptions, ...)
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/shard_stores.rb:20
  def shard_stores(arguments = T.unsafe(nil)); end

  # Copy an existing index into a new index with a fewer number of primary shards
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/shrink.rb:21
  def shrink(arguments = T.unsafe(nil)); end

  # The split index API allows you to split an existing index into a new index with multiple of its primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-split-index.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/split.rb:21
  def split(arguments = T.unsafe(nil)); end

  # Return statistical information about one or more indices.
  #
  # The response contains comprehensive statistical information about metrics related to index:
  # how much time did indexing, search and other operations take, how much disk space it takes,
  # how much memory filter caches or field data require, etc.
  #
  # @example Get all available statistics for all indices
  #
  #   client.indices.stats
  # @example Get statistics for a single index
  #
  #   client.indices.stats index: 'foo'
  # @example Get statistics about documents and disk size for multiple indices
  #
  #   client.indices.stats index: ['foo', 'bar'], docs: true, store: true
  # @example Get statistics about filter cache and field data for all fields
  #
  #   client.indices.stats fielddata: true, filter_cache: true
  # @example Get statistics about filter cache and field data for specific fields
  #
  #   client.indices.stats fielddata: true, filter_cache: true, fields: 'created_at,tags'
  # @example Get statistics about filter cache and field data per field for all fields
  #
  #   client.indices.stats fielddata: true, filter_cache: true, fields: '*'
  # @example Get statistics about searches, with segmentation for different search groups
  #
  #   client.indices.stats search: true, groups: ['groupA', 'groupB']
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/stats.rb:82
  def stats(arguments = T.unsafe(nil)); end

  # In order to keep indices available and queryable for a longer period but at the same time reduce their
  #   hardware requirements they can be transitioned into a frozen state. Once an index is frozen, all of its
  #   transient shard memory (aside from mappings and analyzers) is moved to persistent storage.
  #
  # @note This feature is available in the Platinum distribution of Elasticsearch.
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/frozen-indices.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/unfreeze.rb:16
  def unfreeze(arguments = T.unsafe(nil)); end

  # Perform multiple operation on index aliases in a single request.
  #
  # Pass the `actions` (add, remove) in the `body` argument.
  #
  # @example Add multiple indices to a single alias
  #
  #   client.indices.update_aliases body: {
  #   actions: [
  #   { add: { index: 'logs-2013-06', alias: 'year-2013' } },
  #   { add: { index: 'logs-2013-05', alias: 'year-2013' } }
  #   ]
  #   }
  # @example Swap an alias (atomic operation)
  #
  #   client.indices.update_aliases body: {
  #   actions: [
  #   { remove: { index: 'logs-2013-06', alias: 'current-month' } },
  #   { add:    { index: 'logs-2013-07', alias: 'current-month' } }
  #   ]
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/reference/api/admin-indices-aliases/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/update_aliases.rb:38
  def update_aliases(arguments = T.unsafe(nil)); end

  # Upgrade the index or indices to the latest Lucene format.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/upgrade.rb:21
  def upgrade(arguments = T.unsafe(nil)); end

  # Validate a query
  #
  #     client.indices.validate_query index: 'myindex',
  #                                   rewrite: true,
  #                                   explain: true,
  #                                   body: {
  #                                     filtered: {
  #                                       query: {
  #                                         match: {
  #                                           title: 'foo'
  #                                         }
  #                                       },
  #                                       filter: {
  #                                         range: {
  #                                           published_at: {
  #                                             from: '2013-06-01'
  #                                           }
  #                                         }
  #                                       }
  #                                     }
  #                                   }
  #
  # @example Validate a simple query string query
  #
  #   client.indices.validate_query index: 'myindex', q: 'title:foo AND body:bar'
  # @example Validate an invalid query (with explanation)
  #
  #   client.indices.validate_query index: 'myindex', q: '[[[ BOOM! ]]]', explain: true
  # @example Validate a DSL query (with explanation and rewrite). With rewrite set to true, the
  #   explanation is more detailed showing the actual Lucene query that will
  #   be executed.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/reference/api/validate/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/validate_query.rb:62
  def validate_query(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:9
module Elasticsearch::API::Indices::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Indices::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/indices/params_registry.rb:16
Elasticsearch::API::Indices::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "indices" namespace (includes the {Indices::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/indices.rb:12
class Elasticsearch::API::Indices::IndicesClient
  include ::Elasticsearch::API::Indices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:7
module Elasticsearch::API::Ingest
  # Proxy method for {IngestClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/ingest.rb:18
  def ingest; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:8
module Elasticsearch::API::Ingest::Actions
  # Delete a speficied pipeline
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/delete_pipeline.rb:18
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Return a specified pipeline
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/get_pipeline.rb:17
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Extracts structured fields out of a single text field within a document. You choose which field to extract
  #   matched fields from, as well as the grok pattern you expect will match.
  #
  # @see https://www.elastic.co/guide/en/elasticsearch/plugins/current/ingest.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/processor_grok.rb:12
  def processor_grok(arguments = T.unsafe(nil)); end

  # Add or update a specified pipeline
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/put_pipeline.rb:19
  def put_pipeline(arguments = T.unsafe(nil)); end

  # Execute a specific pipeline against the set of documents provided in the body of the request
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/simulate.rb:19
  def simulate(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:9
module Elasticsearch::API::Ingest::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Ingest::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/ingest/params_registry.rb:16
Elasticsearch::API::Ingest::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "ingest" namespace (includes the {Ingest::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/ingest.rb:12
class Elasticsearch::API::Ingest::IngestClient
  include ::Elasticsearch::API::Ingest::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:7
module Elasticsearch::API::Nodes
  # Proxy method for {NodesClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/nodes.rb:18
  def nodes; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:8
module Elasticsearch::API::Nodes::Actions
  # Returns information about the hottest threads in the cluster or on a specific node as a String.
  #
  #
  # The information is returned as text, and allows you to understand what are currently
  # the most taxing operations happening in the cluster, for debugging or monitoring purposes.
  #
  # @example Return 10 hottest threads
  #
  #   client.nodes.hot_threads threads: 10
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @return [String]
  # @see https://www.elastic.co/guide/reference/api/admin-cluster-nodes-hot-threads/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/hot_threads.rb:32
  def hot_threads(arguments = T.unsafe(nil)); end

  # Returns information about nodes in the cluster (cluster settings, JVM version, etc).
  #
  # Use the `all` option to return all available settings, or limit the information returned
  # to a specific type (eg. `http`).
  #
  # Use the `node_id` option to limit information to specific node(s).
  #
  # @example Return information about JVM
  #
  #   client.nodes.info jvm: true
  # @example Return information about HTTP and network
  #
  #   client.nodes.info http: true, network: true
  # @example Pass a list of metrics
  #
  #   client.nodes.info metric: ['http', 'network']
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/info.rb:47
  def info(arguments = T.unsafe(nil)); end

  # Re-read the local node's encrypted keystore. Specifically, it will prompt the keystore
  # decryption and reading across the cluster.
  #
  # @example Reload secure settings for all nodes
  #
  #   client.nodes.reload_secure_settings
  # @example Reload secure settings for a list of nodes
  #
  #   client.nodes.reload_secure_settings(node_id: 'foo,bar')
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/cluster-nodes-reload-secure-settings
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/reload_secure_settings.rb:26
  def reload_secure_settings(arguments = T.unsafe(nil)); end

  # Shutdown one or all nodes
  #
  # @example Shut down node named _Bloke_
  #
  #   client.nodes.shutdown node_id: 'Bloke'
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/shutdown.rb:24
  def shutdown(arguments = T.unsafe(nil)); end

  # Returns statistical information about nodes in the cluster.
  #
  # @example Return statistics about JVM
  #
  #   client.nodes.stats metric: 'jvm'
  # @example Return statistics about field data structures for all fields
  #
  #   client.nodes.stats metric: 'indices', index_metric: 'fielddata', fields: '*', human: true
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/stats.rb:34
  def stats(arguments = T.unsafe(nil)); end

  # The cluster nodes usage API allows to retrieve information on the usage of features for each node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-usage.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/usage.rb:14
  def usage(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:9
module Elasticsearch::API::Nodes::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Nodes::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/nodes/params_registry.rb:16
Elasticsearch::API::Nodes::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "nodes" namespace (includes the {Nodes::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/nodes.rb:12
class Elasticsearch::API::Nodes::NodesClient
  include ::Elasticsearch::API::Nodes::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/remote/info.rb:7
module Elasticsearch::API::Remote
  # Proxy method for {RemoteClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/remote.rb:18
  def remote; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/remote/info.rb:8
module Elasticsearch::API::Remote::Actions
  # Returns all of the configured remote cluster information
  #
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/remote-info.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/remote/info.rb:14
  def info(arguments = T.unsafe(nil)); end
end

# Client for the "remote" namespace (includes the {Remote::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/remote.rb:12
class Elasticsearch::API::Remote::RemoteClient
  include ::Elasticsearch::API::Remote::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:7
module Elasticsearch::API::Snapshot
  # Proxy method for {SnapshotClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/snapshot.rb:18
  def snapshot; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:8
module Elasticsearch::API::Snapshot::Actions
  # Create a new snapshot in the repository
  #
  # @example Create a snapshot of the whole cluster in the `my-backups` repository
  #
  #   client.snapshot.create repository: 'my-backups', snapshot: 'snapshot-1'
  # @example Create a snapshot for specific indices in the `my-backups` repository
  #
  #   client.snapshot.create repository: 'my-backups',
  #   snapshot: 'snapshot-2',
  #   body: { indices: 'foo,bar', ignore_unavailable: true }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html#_snapshot
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/create.rb:31
  def create(arguments = T.unsafe(nil)); end

  # Create a repository for storing snapshots
  #
  # @example Create a repository at `/tmp/backup`
  #
  #   client.snapshot.create_repository repository: 'my-backups',
  #   body: {
  #   type: 'fs',
  #   settings: { location: '/tmp/backup', compress: true  }
  #   }
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html#_repositories
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/create_repository.rb:28
  def create_repository(arguments = T.unsafe(nil)); end

  # Delete a snapshot from the repository
  #
  # @example Delete the `snapshot-1` snapshot
  #
  #   client.snapshot.delete repository: 'my-backups', snapshot: 'snapshot-1'
  # @note Will also abort a currently running snapshot.
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/delete.rb:25
  def delete(arguments = T.unsafe(nil)); end

  # Delete a specific repository or repositories
  #
  # @example Delete the `my-backups` repository
  #
  #   client.snapshot.delete_repository repository: 'my-backups'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/delete_repository.rb:23
  def delete_repository(arguments = T.unsafe(nil)); end

  # Return information about specific (or all) snapshots
  #
  # @example Return information about the `snapshot-2` snapshot
  #
  #   client.snapshot.get repository: 'my-backup', snapshot: 'snapshot-2'
  # @example Return information about multiple snapshots
  #
  #   client.snapshot.get repository: 'my-backup', snapshot: ['snapshot-2', 'snapshot-3']
  # @example Return information about all snapshots in the repository
  #
  #   client.snapshot.get repository: 'my-backup', snapshot: '_all'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/get.rb:33
  def get(arguments = T.unsafe(nil)); end

  # Get information about snapshot repositories or a specific repository
  #
  # @example Get all repositories
  #
  #   client.snapshot.get_repository
  # @example Get a specific repository
  #
  #   client.snapshot.get_repository repository: 'my-backups'
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/get_repository.rb:29
  def get_repository(arguments = T.unsafe(nil)); end

  # Restore the state from a snapshot
  #
  # @example Restore from the `snapshot-1` snapshot
  #
  #   client.snapshot.restore repository: 'my-backups', snapshot: 'snapshot-1'
  # @example Restore a specific index under a different name
  #
  #   client.snapshot.restore repository: 'my-backups',
  #   snapshot: 'snapshot-1',
  #   body: {
  #   rename_pattern: "^(.*)$",
  #   rename_replacement: "restored_$1"
  #   }
  # @note You cannot restore into an open index, you have to {Indices::Actions#close} it first
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/restore.rb:35
  def restore(arguments = T.unsafe(nil)); end

  # Return information about a running snapshot
  #
  # @example Return information about all currently running snapshots
  #
  #   client.snapshot.status repository: 'my-backups', human: true
  # @example Return information about a specific snapshot
  #
  #   client.snapshot.status repository: 'my-backups', human: true
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html#_snapshot_status
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/status.rb:29
  def status(arguments = T.unsafe(nil)); end

  # Explicitly perform the verification of a repository
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/verify_repository.rb:18
  def verify_repository(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:9
module Elasticsearch::API::Snapshot::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Snapshot::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/snapshot/params_registry.rb:16
Elasticsearch::API::Snapshot::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "snapshot" namespace (includes the {Snapshot::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/snapshot.rb:12
class Elasticsearch::API::Snapshot::SnapshotClient
  include ::Elasticsearch::API::Snapshot::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:7
module Elasticsearch::API::Tasks
  # Proxy method for {TasksClient}, available in the receiving object
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/tasks.rb:18
  def tasks; end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:8
module Elasticsearch::API::Tasks::Actions
  # Cancel a specific task
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks-cancel.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/cancel.rb:19
  def cancel(arguments = T.unsafe(nil)); end

  # Return information about a specific task
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/get.rb:18
  def get(arguments = T.unsafe(nil)); end

  # Return the list of tasks
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks-list.html
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/list.rb:22
  def list(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:9
module Elasticsearch::API::Tasks::Actions::ParamsRegistry
  extend ::Elasticsearch::API::Tasks::Actions::ParamsRegistry

  # Get the list of valid params for a given action.
  #
  # @example Get the list of valid params.
  #   ParamsRegistry.get(:benchmark)
  # @param action [Symbol] The action.
  # @return [Array<Symbol>] The list of valid params for the action.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:41
  def get(action); end

  # Register an action with its list of valid params.
  #
  # @example Register the action.
  #   ParamsRegistry.register(:benchmark, [ :verbose ])
  # @param action [Symbol] The action to register.
  # @param valid_params [Array[Symbol]] The list of valid params.
  # @since 6.1.1
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:27
  def register(action, valid_params); end
end

# A Mapping of all the actions to their list of valid params.
#
# @since 6.1.1
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/tasks/params_registry.rb:16
Elasticsearch::API::Tasks::Actions::ParamsRegistry::PARAMS = T.let(T.unsafe(nil), Hash)

# Client for the "tasks" namespace (includes the {Tasks::Actions} methods)
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/namespace/tasks.rb:12
class Elasticsearch::API::Tasks::TasksClient
  include ::Elasticsearch::API::Tasks::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:44
Elasticsearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api.rb:43
Elasticsearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

# Generic utility methods
#
# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:10
module Elasticsearch::API::Utils
  extend ::Elasticsearch::API::Utils

  # Convert an array of payloads into Elasticsearch `header\ndata` format
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item.
  #
  #     Elasticsearch::API::Utils.__bulkify [
  #       { :index =>  { :_index => 'myindexA', :_type => 'mytype', :_id => '1', :data => { :title => 'Test' } } },
  #       { :update => { :_index => 'myindexB', :_type => 'mytype', :_id => '2', :data => { :doc => { :title => 'Update' } } } }
  #     ]
  #
  #     # => {"index":{"_index":"myindexA","_type":"mytype","_id":"1"}}
  #     # => {"title":"Test"}
  #     # => {"update":{"_index":"myindexB","_type":"mytype","_id":"2"}}
  #     # => {"doc":{"title":"Update"}}
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:87
  def __bulkify(payload); end

  # URL-escape a string
  #
  # @api private
  # @example
  #   __escape('foo/bar') # => 'foo%2Fbar'
  #   __escape('bar^bam') # => 'bar%5Ebam'
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:19
  def __escape(string); end

  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:163
  def __extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Extracts the valid parts of the URL from the arguments
  #
  # @api private
  # @example Extract parts
  #   __extract_parts { :foo => true }, [:foo, :bar]
  #   # => [:foo]
  # @note Mutates the `arguments` argument, to prevent failures in `__validate_and_extract_params`.
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_parts [Array<Symbol>] An array of symbol with valid keys
  # @return [Array<String>] Valid parts of the URL as an array of strings
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:186
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end

  # Create a "list" of values from arguments, ignoring nil values and encoding special characters.
  #
  # @api private
  # @example Create a list from array
  #   __listify(['A','B']) # => 'A,B'
  # @example Create a list from arguments
  #   __listify('A','B') # => 'A,B'
  # @example Escape values
  #   __listify('foo','bar^bam') # => 'foo,bar%5Ebam'
  # @example Do not escape the values
  #   __listify('foo','bar^bam', escape: false) # => 'foo,bar^bam'
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:39
  def __listify(*list); end

  # Create a path (URL part) from arguments, ignoring nil values and empty strings.
  #
  # # @example Encode special characters
  #     __pathify(['foo', 'bar^bam']) # => 'foo/bar%5Ebam'
  #
  # @api private
  # @example Create a path from array
  #   __pathify(['foo', '', nil, 'bar']) # => 'foo/bar'
  # @example Create a path from arguments
  #   __pathify('foo', '', nil, 'bar') # => 'foo/bar'
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:63
  def __pathify(*segments); end

  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:257
  def __report_unsupported_method(name); end

  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:215
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end

  # Calls the given block, rescuing from `StandardError`.
  #
  # Primary use case is the `:ignore` parameter for API calls.
  #
  # Returns `false` if exception contains NotFound in its class name or message,
  # else re-raises the exception.
  #
  # @api private
  # @yield [block] A block of code to be executed with exception handling.
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:205
  def __rescue_from_not_found(&block); end

  # Validates the argument Hash against common and valid API parameters
  #
  # @api private
  # @example Extract parameters
  #   __validate_and_extract_params( { :foo => 'qux' }, [:foo, :bar] )
  #   # => { :foo => 'qux' }
  # @example Raise an exception for invalid parameters
  #   __validate_and_extract_params( { :foo => 'qux', :bam => 'mux' }, [:foo, :bar] )
  #   # ArgumentError: "URL parameter 'bam' is not supported"
  # @example Skip validating parameters
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar], { skip_parameter_validation: true } )
  #   # => { :foo => "q", :bam => "m" }
  # @example Skip validating parameters when the module setting is set
  #   Elasticsearch::API.settings[:skip_parameter_validation] = true
  #   __validate_and_extract_params( { :foo => 'q', :bam => 'm' }, [:foo, :bar] )
  #   # => { :foo => "q", :bam => "m" }
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_params [Array<Symbol>] An array of symbols with valid keys
  # @raise [ArgumentError] If the arguments Hash contains invalid keys
  # @return [Hash] Return whitelisted Hash
  #
  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:147
  def __validate_and_extract_params(arguments, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:156
  def __validate_params(arguments, valid_params = T.unsafe(nil)); end
end

# source://elasticsearch-api-7.4.0/lib/elasticsearch/api/version.rb:7
Elasticsearch::API::VERSION = T.let(T.unsafe(nil), String)

# source://elasticsearch-7.4.0/lib/elasticsearch/version.rb:6
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
