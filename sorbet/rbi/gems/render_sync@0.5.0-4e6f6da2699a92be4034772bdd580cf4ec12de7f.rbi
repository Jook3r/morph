# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `render_sync` gem.
# Please instead update this file by running `bin/tapioca gem render_sync`.

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:1
module RenderSync
  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:112
    def adapter; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:104
    def adapter_javascript_url; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:120
    def api_key; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:116
    def app_id; end

    # @return [Boolean]
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:96
    def async?; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:108
    def auth_token; end

    # Returns the value of attribute client.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:40
    def client; end

    # Sets the attribute client
    #
    # @param value the value to set the attribute client to.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:40
    def client=(_arg0); end

    # Returns the value of attribute config.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:42
    def config; end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:40
    def config=(_arg0); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:46
    def config_json; end

    # Loads the configuration from a given YAML file and environment (such as production)
    #
    # @raise [ArgumentError]
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:67
    def load_config(filename, environment); end

    # Returns the value of attribute logger.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:40
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:40
    def logger=(_arg0); end

    # Returns the Faye Rack application.
    # Any options given are passed to the Faye::RackAdapter.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:162
    def pubsub_app(options = T.unsafe(nil)); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:128
    def pusher_api_host; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:132
    def pusher_api_port; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:124
    def pusher_api_scheme; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:148
    def pusher_encrypted; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:136
    def pusher_ws_host; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:140
    def pusher_ws_port; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:144
    def pusher_wss_port; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:156
    def reactor; end

    # Resets the configuration to the default (empty hash)
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:61
    def reset_config; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:100
    def server; end

    # @raise [ArgumentError]
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:81
    def setup_client; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:87
    def setup_dummy_client; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:92
    def setup_logger; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync.rb:170
    def views_root; end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:2
class RenderSync::Action
  include ::RenderSync::Actions

  # @return [Action] a new instance of Action
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:7
  def initialize(record, name, *args); end

  # Returns the value of attribute name.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def name=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:14
  def perform; end

  # Returns the value of attribute record.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def record; end

  # Sets the attribute record
  #
  # @param value the value to set the attribute record to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def record=(_arg0); end

  # Returns the value of attribute scope.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def scope; end

  # Sets the attribute scope
  #
  # @param value the value to set the attribute scope to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:5
  def scope=(_arg0); end

  # Just for testing purposes (see test/sync/model_test.rb)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:26
  def test_path; end

  private

  # Merge default_scope and scope from options Hash
  # compact array to remove nil elements
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/action.rb:34
  def get_scope_from_options(options); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:2
module RenderSync::Actions
  # Render all sync'd partials for resource to string and publish action
  # to pubsub server with rendered resource messages
  #
  # resource - The ActiveModel resource
  # action - The Symbol action to publish. One of :update, :destroy
  # options - The Hash of options
  #   default_scope - The ActiveModel resource to scope the action channel to
  #   scope - Either a String, a symbol, an instance of ActiveModel or
  #           RenderSync::Scope or an Array containing a combination to scope
  #           the channel to. Will be concatenated to an optional default_scope
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:45
  def sync(resource, action, options = T.unsafe(nil)); end

  # Render all sync'd partials for resource to string and publish destroy action
  # to pubsub server with rendered resource messages
  #
  # resource - The ActiveModel resource
  # options - The Hash of options
  #   default_scope - The ActiveModel resource to scope the update channel to
  #   scope - Either a String, a symbol, an instance of ActiveModel or
  #           RenderSync::Scope or an Array containing a combination to scope
  #           the destroy channel to. Will be concatenated to an optional
  #           default_scope
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:30
  def sync_destroy(resource, options = T.unsafe(nil)); end

  # Render all sync'd partials for resource to string and publish
  # new action to pubsub server with rendered resource messages
  #
  # resource - The ActiveModel resource, or Array of ActiveModel resources
  # action - The Symbol action to publish. One of :update, :destroy
  # options - The Hash of options
  #   default_scope - The ActiveModel resource to scope the new channel to
  #   scope - Either a String, a symbol, an instance of ActiveModel or
  #           RenderSync::Scope or an Array containing any combination to scope
  #           the new channel to. Will be concatenated to an optional
  #           default_scope
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:76
  def sync_new(resource, options = T.unsafe(nil)); end

  # Render all sync'd partials for resource to string and publish update action
  # to pubsub server with rendered resource messages
  #
  # resource - The ActiveModel resource
  # options - The Hash of options
  #   default_scope - The ActiveModel resource to scope the update channel to
  #   scope - Either a String, a symbol, an instance of ActiveModel or
  #           RenderSync::Scope or an Array containing a combination to scope
  #           the update channel to. Will be concatenated to an optional
  #           default_scope
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:15
  def sync_update(resource, options = T.unsafe(nil)); end

  private

  # Returns Array of Partials for all given resource and context, including
  # both Partial and RefetchPartial instances
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:104
  def all_partials(resource, context, scope = T.unsafe(nil)); end

  # Returns an Array containing both the Partial and RefetchPartial instances
  # for a given resource, context and partial name
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:110
  def specified_partials(resource, context, partial_name); end

  # The Context class handling partial rendering
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/actions.rb:98
  def sync_render_context; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:3
class RenderSync::Channel
  # @return [Channel] a new instance of Channel
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:7
  def initialize(name); end

  # Returns the value of attribute name.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:5
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:5
  def name=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:11
  def signature; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/channel.rb:19
  def to_s; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:2
module RenderSync::Clients; end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:3
class RenderSync::Clients::Dummy
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:4
  def method_missing(*args, &block); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:8
class RenderSync::Clients::Dummy::Message
  # @return [Message] a new instance of Message
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:13
  def initialize(*_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:16
  def method_missing(*args, &block); end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/dummy.rb:9
    def method_missing(*args, &block); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:3
class RenderSync::Clients::Faye
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:10
  def batch_publish(*args); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:14
  def build_message(*args); end

  # Public: Normalize channel to adapter supported format
  #
  # channel - The string channel name
  #
  # Returns The normalized channel prefixed with supported format for Faye
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:23
  def normalize_channel(channel); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:5
  def setup; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:28
class RenderSync::Clients::Faye::Message
  # @return [Message] a new instance of Message
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:63
  def initialize(channel, data); end

  # Returns the value of attribute channel.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:30
  def channel; end

  # Sets the attribute channel
  #
  # @param value the value to set the attribute channel to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:30
  def channel=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:30
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:30
  def data=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:82
  def publish; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:94
  def publish_asynchronous; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:90
  def publish_synchronous; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:68
  def to_hash; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:78
  def to_json; end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:55
    def batch_messages_query_hash(messages); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:32
    def batch_publish(messages); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:47
    def batch_publish_asynchronous(messages); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/faye.rb:40
    def batch_publish_synchronous(messages); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:3
class RenderSync::Clients::Pusher
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:24
  def batch_publish(*args); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:28
  def build_message(*args); end

  # Public: Normalize channel to adapter supported format
  #
  # channel - The string channel name
  #
  # Returns The normalized channel prefixed with supported format for Pusher
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:37
  def normalize_channel(channel); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:5
  def setup; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:42
class RenderSync::Clients::Pusher::Message
  # @return [Message] a new instance of Message
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:52
  def initialize(channel, data); end

  # Returns the value of attribute channel.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:44
  def channel; end

  # Sets the attribute channel
  #
  # @param value the value to set the attribute channel to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:44
  def channel=(_arg0); end

  # Returns the value of attribute data.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:44
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:44
  def data=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:57
  def publish; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:69
  def publish_asynchronous; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:65
  def publish_synchronous; end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/clients/pusher.rb:46
    def batch_publish(messages); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/app/helpers/render_sync/config_helper.rb:1
module RenderSync::ConfigHelper
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/app/helpers/render_sync/config_helper.rb:2
  def include_sync_config(opts = T.unsafe(nil)); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:3
module RenderSync::ControllerHelpers
  include ::RenderSync::Actions

  mixes_in_class_methods ::RenderSync::ControllerHelpers::ClassMethods

  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:20
  def enable_sync; end

  # ControllerHelpers overrides Action#sync_render_context to use self as
  # context to allow full access to request/response cycle
  # over default abstract Renderer class
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:29
  def sync_render_context; end

  class << self
    # @private
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:7
    def included(base); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:11
module RenderSync::ControllerHelpers::ClassMethods
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/controller_helpers.rb:12
  def enable_sync(options = T.unsafe(nil)); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:18
class RenderSync::ERBTracker < ::ActionView::DependencyTracker::ERBTracker
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:33
  def dependencies; end

  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:39
  def source; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:43
  def sync_dependencies; end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:29
    def call(name, template); end
  end
end

# Matches:
#   sync partial: "comment", collection: commentable.comments
#   sync partial: "comment", resource: comment
#
# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/erb_tracker.rb:19
RenderSync::ERBTracker::SYNC_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/engine.rb:4
class RenderSync::Engine < ::Rails::Engine; end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:2
class RenderSync::FayeExtension
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:13
  def batch_incoming(message, callback); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:23
  def batch_publish?(message); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:35
  def handle_eror(message, callback); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:4
  def incoming(message, callback); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:40
  def message_authenticated?(message); end

  # IMPORTANT: clear out the auth token so it is not leaked to the client
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:28
  def outgoing(message, callback); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/faye_extension.rb:19
  def single_incoming(message, callback); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:2
module RenderSync::Model
  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:8
    def context; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:17
    def disable!; end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:22
    def enable(context = T.unsafe(nil)); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:12
    def enable!(context = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:4
    def enabled?; end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:29
module RenderSync::Model::ClassMethods
  # Set up automatic syncing of partials when a record of this class is
  # created, updated or deleted. Be sure to wrap your model actions inside
  # a sync_enable block for sync to do its magic.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:36
  def sync(*actions); end

  # Returns the value of attribute sync_default_scope.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_default_scope; end

  # Sets the attribute sync_default_scope
  #
  # @param value the value to set the attribute sync_default_scope to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_default_scope=(_arg0); end

  # Set up a sync scope for the model defining a set of records to be
  # updated via sync
  #
  # name - The name of the scope
  # lambda - A lambda defining the scope.
  #    Has to return an ActiveRecord::Relation.
  #
  # You can define the lambda with arguments (see examples).
  # Note that the naming of the parameters is very important. Only use
  # names of methods or ActiveRecord attributes defined on the model (e.g.
  # user_id). This way sync will be able to pass changed records to the
  # lambda and track changes to the scope.
  #
  # Example:
  #
  #   class Todo < ActiveRecord::Base
  #     belongs_to :user
  #     belongs_to :project
  #     scope :incomplete, -> { where(complete: false) }
  #
  #     sync :all
  #
  #     sync_scope :complete, -> { where(complete: true) }
  #     sync_scope :by_project, ->(project_id) { where(project_id: project_id) }
  #     sync_scope :my_incomplete_todos, ->(user) { incomplete.where(user_id: user.id) }
  #   end
  #
  # To subscribe to these scopes you would put these lines into your views:
  #
  #   <%= sync partial: "todo", collection: @todos, scope: Todo.complete %>
  #
  # If the collection you want to render is exactly defined be the given
  # scope the scope can be omitted:
  #
  #   <%= sync partial: "todo", collection: Todo.complete %>
  #
  # For rendering my_incomplete_todos:
  #
  #   <%= sync partial: "todo", collection: Todo.my_incomplete_todos(current_user) %>
  #
  # The render_new call has to look like this:
  #
  #   <%= sync_new partial: "todo", resource: Todo.new, scope: Todo.complete %>
  #
  # Now when a record changes sync will use the names of the lambda
  # parameters (project_id and user), get the corresponding attributes from
  # the record (project_id column or user association) and pass it to the
  # lambda. This way sync can identify if a record has been added or
  # removed from a scope and will then publish the changes to subscribers
  # on all scoped channels.
  #
  # Beware that chaining of sync scopes in the view is currently not
  # possible. So the following example would raise an exception:
  #
  #   <%= sync_new partial: "todo", Todo.new, scope: Todo.mine(current_user).incomplete %>
  #
  # To work around this just create an explicit sync_scope for your problem:
  #
  #   sync_scope :my_incomplete_todos, ->(user) { incomplete.mine(current_user) }
  #
  # And in the view:
  #
  #   <%= sync_new partial: "todo", Todo.new, scope: Todo.my_incomplete_todos(current_user) %>
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:126
  def sync_scope(name, lambda); end

  # Returns the value of attribute sync_scope_definitions.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_scope_definitions; end

  # Sets the attribute sync_scope_definitions
  #
  # @param value the value to set the attribute sync_scope_definitions to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_scope_definitions=(_arg0); end

  # Register one or more associations to be sync'd when this record changes.
  #
  # Example:
  #
  #   class Todo < ActiveRecord::Base
  #     belongs_to :project
  #     belongs_to :user
  #
  #     sync :all
  #     sync_touch :project, :user
  #   end
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:150
  def sync_touch(*args); end

  # Returns the value of attribute sync_touches.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_touches; end

  # Sets the attribute sync_touches
  #
  # @param value the value to set the attribute sync_touches to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model.rb:30
  def sync_touches=(_arg0); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:2
module RenderSync::ModelActions
  # Set up instance variable holding the collected sync actions
  # to be published later on.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:6
  def sync_actions; end

  # Set up instance variable holding the collected sync actions
  # to be published later on.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:6
  def sync_actions=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:23
  def sync_default_scope; end

  private

  # Add a new aync action to the list of actions to be published later on
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:40
  def add_sync_action(action_name, record, options = T.unsafe(nil)); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:34
  def prepare_sync_actions; end

  # Run the collected actions on after_commit callback
  # Triggers the syncing of the partials
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:47
  def publish_sync_actions; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:55
  def sync_render_context; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:51
  def sync_scope_definitions; end

  class << self
    # Set up ActiveRecord callbacks to prepare for collecting
    # publish sync actions and publishing them after commit
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_actions.rb:11
    def included(base); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:2
module RenderSync::ModelChangeTracking
  private

  # Checks if this record has entered the new (possibly changed) scope
  # defined by the passed scope definition throughout the update process
  #
  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:51
  def entered_new_scope?(definition); end

  # Checks if this record has left the old scope defined by the passed scope
  # definition throughout the update process
  #
  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:42
  def left_old_scope?(definition); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:88
  def new_record_in_new_scope?(definition); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:92
  def new_record_in_old_scope?(defintion); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:84
  def old_record_in_new_scope?(definition); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:80
  def old_record_in_old_scope?(definition); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:64
  def record_after_update; end

  # Return the instance (state) of this record from before the update
  # (which was previously stored by #store_state_before_update)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:60
  def record_before_update; end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:68
  def remained_in_old_scope?(definition); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:76
  def scope_after_update(definition); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:72
  def scope_before_update(definition); end

  # Stores the current state of the record with its attributes
  # and all sync relations in an instance variable BEFORE the update
  # command to later be able to check if the record has been
  # added/removed from sync scopes.
  #
  # Uses ActiveModel::Dirty to track attribute changes
  # (triggered by AR Callback before_update)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:20
  def store_state_before_update; end

  class << self
    # Set up callback to store record and sync scope states prior
    # the update action
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_change_tracking.rb:6
    def included(base); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_syncing.rb:2
module RenderSync::ModelRenderSyncing
  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_syncing.rb:6
  def prepare_sync_create; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_syncing.rb:25
  def prepare_sync_destroy; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_syncing.rb:17
  def prepare_sync_update; end

  # Creates update actions for subscribers on the sync scope defined by
  # the passed sync scope definition.
  #
  # It compares the state of the record in context of the sync scope before
  # and after the update. If the record has been added to a scope, it
  # publishes a new partial to the subscribers of that scope. It also sends
  # a destroy action to subscribers of the scope, if the record has been
  # removed from it.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_syncing.rb:47
  def prepare_sync_update_scope(scope_definition); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_touching.rb:2
module RenderSync::ModelTouching
  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_touching.rb:6
  def prepare_sync_touches; end

  # Return the associations to be touched after a record change
  # Takes into account that an association itself may have changed during
  # an update call (e.g. project_id has changed). To accomplish this, it
  # uses the stored record from before the update (@record_before_update)
  # and touches that as well as the current association
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/model_touching.rb:18
  def sync_touches; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:2
class RenderSync::Partial
  # @return [Partial] a new instance of Partial
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:22
  def initialize(name, resource, scope, context); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:49
  def auth_token; end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:45
  def authorized?(auth_token); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:70
  def channel_for_action(action); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:62
  def channel_prefix; end

  # Returns the value of attribute context.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def context=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:87
  def creator_for_scope(scope); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:40
  def message(action); end

  # Returns the value of attribute name.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def name=(_arg0); end

  # For the refetch feature we need an auth_token that wasn't created
  # with scopes, because the scope information is not available on the
  # refetch-request. So we create a refetch_auth_token which is based
  # only on model_name and id plus the name of this partial
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:58
  def refetch_auth_token; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:32
  def render; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:28
  def render_to_string; end

  # Returns the value of attribute resource.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def resource; end

  # Sets the attribute resource
  #
  # @param value the value to set the attribute resource to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:3
  def resource=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:83
  def selector_end; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:79
  def selector_start; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:36
  def sync(action); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:66
  def update_channel_prefix; end

  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:98
  def locals; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:104
  def model_path; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:94
  def path; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:108
  def polymorphic_path; end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:5
    def all(model, context, scope = T.unsafe(nil)); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial.rb:14
    def find(model, partial_name, context); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:2
class RenderSync::PartialCreator
  # @return [PartialCreator] a new instance of PartialCreator
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:5
  def initialize(name, resource, scopes, context); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:12
  def auth_token; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:16
  def channel; end

  # Returns the value of attribute context.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def context=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:28
  def message; end

  # Returns the value of attribute name.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def name=(_arg0); end

  # Returns the value of attribute partial.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def partial; end

  # Sets the attribute partial
  #
  # @param value the value to set the attribute partial to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def partial=(_arg0); end

  # Returns the value of attribute resource.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def resource; end

  # Sets the attribute resource
  #
  # @param value the value to set the attribute resource to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:3
  def resource=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:20
  def selector; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:24
  def sync_new; end

  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/partial_creator.rb:43
  def polymorphic_path; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/reactor.rb:2
class RenderSync::Reactor
  include ::MonitorMixin

  # If the reactor's thread died, EM still thinks it's running but it isn't.
  # This will happen if we forked from a process that had the reator running.
  # Tell EM it's dead. Stolen from the EM internals
  #
  # https://groups.google.com/forum/#!msg/ruby-amqp/zchM4QzbZRE/I43wIjbgIv4J
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/reactor.rb:40
  def cleanly_shutdown_reactor; end

  # Execute EventMachine bound code block, waiting for reactor to start if
  # not yet started or reactor thread has gone away
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/reactor.rb:7
  def perform; end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/reactor.rb:30
  def running?; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/reactor.rb:26
  def stop; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_model.rb:2
class RenderSync::RefetchModel
  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_model.rb:4
    def find_by_class_name_and_id(resource_name, id); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_model.rb:11
    def supported_classes; end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:2
class RenderSync::RefetchPartial < ::RenderSync::Partial
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:32
  def creator_for_scope(scope); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:28
  def message(action); end

  private

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:39
  def path; end

  class << self
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:4
    def all(model, context, scope = T.unsafe(nil)); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:13
    def find(model, partial_name, context); end

    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial.rb:21
    def find_by_authorized_resource(model, partial_name, context, auth_token); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial_creator.rb:2
class RenderSync::RefetchPartialCreator < ::RenderSync::PartialCreator
  # @return [RefetchPartialCreator] a new instance of RefetchPartialCreator
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial_creator.rb:4
  def initialize(name, resource, scoped_resource, context); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/refetch_partial_creator.rb:9
  def message; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:2
class RenderSync::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:6
  def initialize; end

  # Returns the value of attribute context.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:4
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:4
  def context=(_arg0); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/renderer.rb:15
  def render_to_string(options); end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:4
class RenderSync::Resource
  # Constructor
  #
  # model - The ActiveModel instace for this Resource
  # scopes - The optional scopes to prefix polymorphic paths with.
  #          Can be a Symbol/String, a parent model or an RenderSync::Scope
  #          or an Array with any combination.
  #
  # Examples
  #
  #   class User < ActiveRecord::Base
  #     sync :all
  #     sync_scope :cool, -> { where(cool: true) }
  #     sync_scope :in_group, ->(group) { where(group_id: group.id) }
  #   end
  #
  #   user = User.find(1)
  #
  #   resource = Resource.new(user)
  #   resource.polymorphic_path => "/users/1"
  #   resource.polymorphic_new_path => "/users/new"
  #
  #   resource = Resource.new(user, :admin)
  #   resource.polymorphic_path => "/admin/users/1"
  #   resource.polymorphic_new_path => "/admin/users/new"
  #
  #   resource = Resource.new(user, [:staff, :restricted])
  #   resource.polymorphic_path => "/staff/restricted/users/1"
  #   resource.polymorphic_new_path => "/staff/restricted/users/new"
  #
  #   resource = Resource.new(user, project)
  #   resource.polymorphic_path => "/projects/2/users/1"
  #   resource.polymorphic_new_path => "/projects/2/users/new"
  #
  #   resource = Resource.new(user, User.cool)
  #   resource.polymorphic_path => "/cool/users/2"
  #   resource.polymorphic_new_path => "/cool/users/new"
  #
  #   resource = Resource.new(user, User.in_group(group))
  #   resource.polymorphic_path => "/in_group/group/3/users/2"
  #   resource.polymorphic_new_path => "/in_group/group/3/users/new"
  #
  #   resource = Resource.new(user, [:admin, User.cool, User.in_group(group)])
  #   resource.polymorphic_path => "admin/cool/in_group/group/3/users/2"
  #   resource.polymorphic_new_path => "admin/cool/in_group/group/3/users/new"
  #
  #   resource = Resource.new(user, [:admin, project])
  #   resource.polymorphic_path => "/admin/projects/2/users/1"
  #   resource.polymorphic_new_path => "/admin/projects/2/users/new"
  #
  # @return [Resource] a new instance of Resource
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:56
  def initialize(model, scopes = T.unsafe(nil)); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:74
  def base_name; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:66
  def id; end

  # Returns the value of attribute model.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:5
  def model; end

  # Sets the attribute model
  #
  # @param value the value to set the attribute model to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:5
  def model=(_arg0); end

  # Returns an unscoped Pathname for the model (e.g. /users/1)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:100
  def model_path; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:70
  def name; end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:78
  def plural_name; end

  # Returns the scoped Pathname for a new model (e.g. /users/1/todos/new)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:110
  def polymorphic_new_path; end

  # Returns the scoped Pathname for the model (e.g. /users/1/todos/2)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:105
  def polymorphic_path; end

  # Returns the value of attribute scopes.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:5
  def scopes; end

  # Sets the attribute scopes
  #
  # @param value the value to set the attribute scopes to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:61
  def scopes=(new_scopes); end

  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/resource.rb:82
  def scopes_path; end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:2
class RenderSync::Scope
  # @return [Scope] a new instance of Scope
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:5
  def initialize(scope_definition, args); end

  # Returns the value of attribute args.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def args; end

  # Sets the attribute args
  #
  # @param value the value to set the attribute args to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def args=(_arg0); end

  # Generates an Array of path elements based on the given lambda args and their
  # name which is saved in scope_definition.parameters
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:78
  def args_path; end

  # Check if the given record falls under the narrowing by the stored ActiveRecord Relation.
  # Depending on the arguments set in args this can lead to an exception (e.g. when a nil is passed)
  # Also set the value of valid to avoid another DB query.
  #
  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:65
  def contains?(record); end

  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:57
  def invalid?; end

  # Delegate all undefined methods to the relation, so that
  # the scope behaves like an ActiveRecord::Relation, e.g. call count
  # on the relation (User.in_group(group).count)
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:108
  def method_missing(method, *args, &block); end

  # Returns the Pathname for this scope
  # Example:
  #   class User < ActiveRecord::Base
  #     sync :all
  #     belongs_to :group
  #     sync_scope :in_group, ->(group) { where(group_id: group.id) }
  #   end
  #
  #   group = Group.first
  #   User.in_group(group).polymorphic_path.to_s
  #   # => "/in_group/group/1"
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:100
  def polymorphic_path; end

  # Return the ActiveRecord Relation by calling the lamda with the given args.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:41
  def relation; end

  # Returns the value of attribute scope_definition.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def scope_definition; end

  # Sets the attribute scope_definition
  #
  # @param value the value to set the attribute scope_definition to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def scope_definition=(_arg0); end

  # Returns the value of attribute valid.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def valid; end

  # Sets the attribute valid
  #
  # @param value the value to set the attribute valid to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:3
  def valid=(_arg0); end

  # Check if the combination of stored AR relation and args is valid by calling exists? on it.
  # This may raise an exception depending on the args, so we have to rescue the block
  #
  # @return [Boolean]
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:48
  def valid?; end

  class << self
    # Return a new sync scope by passing a scope definition (containing a lambda and parameter names)
    # and a set of arguments to be handed over to the lambda
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:12
    def new_from_args(scope_definition, args); end

    # Return a new sync scope by passing a scope definition (containing a lambda and parameter names)
    # and an ActiveRecord model object. The args List will be filled with the model attributes
    # corrensponding to the parameter names defined in the scope_definition
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope.rb:35
    def new_from_model(scope_definition, model); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:2
class RenderSync::ScopeDefinition
  # @return [ScopeDefinition] a new instance of ScopeDefinition
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:5
  def initialize(klass, name, lambda); end

  # Returns the value of attribute args.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def args; end

  # Sets the attribute args
  #
  # @param value the value to set the attribute args to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def args=(_arg0); end

  # Returns the value of attribute klass.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def klass; end

  # Sets the attribute klass
  #
  # @param value the value to set the attribute klass to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def klass=(_arg0); end

  # Returns the value of attribute lambda.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def lambda; end

  # Sets the attribute lambda
  #
  # @param value the value to set the attribute lambda to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def lambda=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def name=(_arg0); end

  # Returns the value of attribute parameters.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def parameters; end

  # Sets the attribute parameters
  #
  # @param value the value to set the attribute parameters to.
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:3
  def parameters=(_arg0); end

  class << self
    # Checks the validity of the parameter names contained in the lambda definition.
    # E.g. if the lambda looks like this:
    #
    # ->(user) { where(user_id: user.id) }
    #
    # The name of the passed argument (user) must be present as a column name or an
    # instance method (e.g. an association) of the ActiveRecord object.
    #
    # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/scope_definition.rb:22
    def ensure_valid_params!(klass, lambda); end
  end
end

# source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/view_helpers.rb:3
module RenderSync::ViewHelpers
  # Surround partial render in script tags, watching for
  # sync_update and sync_destroy channels from pubsub server
  #
  # options - The Hash of options
  #   partial - The String partial filename without leading underscore
  #   resource - The ActiveModel resource
  #   collection - The Array of ActiveModel resources to use in place of
  #                single resource
  #
  # Examples
  #   <%= sync partial: 'todo', resource: todo %>
  #   <%= sync partial: 'todo', collection: todos %>
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/view_helpers.rb:18
  def sync(options = T.unsafe(nil)); end

  # Setup listener for new resource from sync_new channel, appending
  # partial in place
  #
  # options - The Hash of options
  #   partial - The String partial filename without leading underscore
  #   resource - The ActiveModel resource
  #   scope - The ActiveModel resource to scope the new channel publishes to.
  #           Used for restricting new resource publishes to 'owner' models.
  #           ie, current_user, project, group, etc. When excluded, listens
  #           for global resource creates.
  #
  #   direction - The String/Symbol direction to insert rendered partials.
  #               One of :append, :prepend. Defaults to :append
  #
  # Examples
  #   <%= sync_new partial: 'todo', resource: Todo.new, scope: @project %>
  #   <%= sync_new partial: 'todo', resource: Todo.new, scope: @project, direction: :prepend %>
  #
  # source://render_sync-0.5.0-4e6f6da2699a92be4034772bdd580cf4ec12de7f/lib/render_sync/view_helpers.rb:77
  def sync_new(options = T.unsafe(nil)); end
end
