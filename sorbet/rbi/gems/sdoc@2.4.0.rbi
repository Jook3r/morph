# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sdoc` gem.
# Please instead update this file by running `bin/tapioca gem sdoc`.

# ClassModule is the base class for objects representing either a class or a
# module.
#
# source://sdoc-2.4.0/lib/sdoc/generator.rb:12
class RDoc::ClassModule < ::RDoc::Context
  # @return [Boolean]
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:13
  def with_documentation?; end
end

# source://sdoc-2.4.0/lib/sdoc/generator.rb:23
class RDoc::Generator::SDoc
  include ::SDoc::GitHub
  include ::SDoc::Templatable
  include ::SDoc::Helpers

  # @return [SDoc] a new instance of SDoc
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:69
  def initialize(store, options); end

  # Returns the value of attribute base_dir.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:43
  def base_dir; end

  # source://sdoc-2.4.0/lib/sdoc/generator.rb:101
  def class_dir; end

  # source://sdoc-2.4.0/lib/sdoc/generator.rb:105
  def file_dir; end

  # source://sdoc-2.4.0/lib/sdoc/generator.rb:84
  def generate; end

  # Returns the value of attribute options.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:45
  def options; end

  # The RDoc::Store that is the source of the generated content
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:50
  def store; end

  protected

  # Copy all the resource files to output dir
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:219
  def copy_resources; end

  # Output progress information if debugging is enabled
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:111
  def debug_msg(*msg); end

  # Generate a documentation file for each class
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:127
  def generate_class_files; end

  # Create class tree structure and write it as json
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:166
  def generate_class_tree; end

  # Recursivly build class tree structure
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:177
  def generate_class_tree_level(classes, visited = T.unsafe(nil)); end

  # Generate a documentation file for each file
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:142
  def generate_file_files; end

  # source://sdoc-2.4.0/lib/sdoc/generator.rb:239
  def generate_file_tree; end

  # source://sdoc-2.4.0/lib/sdoc/generator.rb:251
  def generate_file_tree_level(tree); end

  # Create index.html with frameset
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:117
  def generate_index_file; end

  # Generate file with links for the search engine
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:157
  def generate_search_index; end

  # Determines index page based on @options.main_page (or lack thereof)
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:206
  def index; end

  # Determines index path based on @options.main_page (or lack thereof)
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:195
  def index_path; end

  class << self
    # source://sdoc-2.4.0/lib/sdoc/generator.rb:52
    def setup_options(options); end
  end
end

# source://sdoc-2.4.0/lib/sdoc/generator.rb:39
RDoc::Generator::SDoc::CLASS_DIR = T.let(T.unsafe(nil), String)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:26
RDoc::Generator::SDoc::DESCRIPTION = T.let(T.unsafe(nil), String)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:38
RDoc::Generator::SDoc::FILE_DIR = T.let(T.unsafe(nil), String)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:225
class RDoc::Generator::SDoc::FilesTree
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:227
  def add(path, url); end

  # Returns the value of attribute children.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:226
  def children; end
end

# source://sdoc-2.4.0/lib/sdoc/generator.rb:33
RDoc::Generator::SDoc::GENERATOR_DIRS = T.let(T.unsafe(nil), Array)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:41
RDoc::Generator::SDoc::RESOURCES_DIR = T.let(T.unsafe(nil), String)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:36
RDoc::Generator::SDoc::SEARCH_INDEX_FILE = T.let(T.unsafe(nil), String)

# source://sdoc-2.4.0/lib/sdoc/generator.rb:35
RDoc::Generator::SDoc::TREE_FILE = T.let(T.unsafe(nil), String)

# RDoc::Options handles the parsing and storage of options
#
# == Saved Options
#
# You can save some options like the markup format in the
# <tt>.rdoc_options</tt> file in your gem.  The easiest way to do this is:
#
#   rdoc --markup tomdoc --write-options
#
# Which will automatically create the file and fill it with the options you
# specified.
#
# The following options will not be saved since they interfere with the user's
# preferences or with the normal operation of RDoc:
#
# * +--coverage-report+
# * +--dry-run+
# * +--encoding+
# * +--force-update+
# * +--format+
# * +--pipe+
# * +--quiet+
# * +--template+
# * +--verbose+
#
# == Custom Options
#
# Generators can hook into RDoc::Options to add generator-specific command
# line options.
#
# When <tt>--format</tt> is encountered in ARGV, RDoc calls ::setup_options on
# the generator class to add extra options to the option parser.  Options for
# custom generators must occur after <tt>--format</tt>.  <tt>rdoc --help</tt>
# will list options for all installed generators.
#
# Example:
#
#   class RDoc::Generator::Spellcheck
#     RDoc::RDoc.add_generator self
#
#     def self.setup_options rdoc_options
#       op = rdoc_options.option_parser
#
#       op.on('--spell-dictionary DICTIONARY',
#             RDoc::Options::Path) do |dictionary|
#         rdoc_options.spell_dictionary = dictionary
#       end
#     end
#   end
#
# Of course, RDoc::Options does not respond to +spell_dictionary+ by default
# so you will need to add it:
#
#   class RDoc::Options
#
#     ##
#     # The spell dictionary used by the spell-checking plugin.
#
#     attr_accessor :spell_dictionary
#
#   end
#
# == Option Validators
#
# OptionParser validators will validate and cast user input values.  In
# addition to the validators that ship with OptionParser (String, Integer,
# Float, TrueClass, FalseClass, Array, Regexp, Date, Time, URI, etc.),
# RDoc::Options adds Path, PathArray and Template.
#
# source://sdoc-2.4.0/lib/sdoc/generator.rb:18
class RDoc::Options
  # Returns the value of attribute github.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:19
  def github; end

  # Sets the attribute github
  #
  # @param value the value to set the attribute github to.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:19
  def github=(_arg0); end

  # Returns the value of attribute search_index.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:20
  def search_index; end

  # Sets the attribute search_index
  #
  # @param value the value to set the attribute search_index to.
  #
  # source://sdoc-2.4.0/lib/sdoc/generator.rb:20
  def search_index=(_arg0); end
end

# source://sdoc-2.4.0/lib/sdoc.rb:3
module SDoc; end

# source://sdoc-2.4.0/lib/sdoc/github.rb:1
module SDoc::GitHub
  # source://sdoc-2.4.0/lib/sdoc/github.rb:2
  def github_url(path); end

  protected

  # @return [Boolean]
  #
  # source://sdoc-2.4.0/lib/sdoc/github.rb:21
  def have_git?; end

  # source://sdoc-2.4.0/lib/sdoc/github.rb:26
  def last_commit_sha1; end

  # source://sdoc-2.4.0/lib/sdoc/github.rb:45
  def path_relative_to_repository(path); end

  # source://sdoc-2.4.0/lib/sdoc/github.rb:51
  def path_to_git_dir(path); end

  # source://sdoc-2.4.0/lib/sdoc/github.rb:34
  def repository_url(path); end
end

# source://sdoc-2.4.0/lib/sdoc/helpers.rb:1
module SDoc::Helpers
  # @yield [group]
  #
  # source://sdoc-2.4.0/lib/sdoc/helpers.rb:2
  def each_letter_group(methods, &block); end

  # Strips out HTML tags from a given string.
  #
  # Example:
  #
  #   strip_tags("<strong>Hello world</strong>") => "Hello world"
  #
  # source://sdoc-2.4.0/lib/sdoc/helpers.rb:23
  def strip_tags(text); end

  # Truncates a given string. It tries to take whole sentences to have
  # a meaningful description for SEO tags.
  #
  # The only available option is +:length+ which defaults to 200.
  #
  # source://sdoc-2.4.0/lib/sdoc/helpers.rb:31
  def truncate(text, options = T.unsafe(nil)); end

  protected

  # source://sdoc-2.4.0/lib/sdoc/helpers.rb:41
  def group_name(name); end
end

# source://sdoc-2.4.0/lib/sdoc/templatable.rb:3
module SDoc::Templatable
  # Load and render the erb template in the given +templatefile+ within the
  # specified +context+ (a Binding object) and return output
  # Both +templatefile+ and +outfile+ should be Pathname-like objects.
  #
  # source://sdoc-2.4.0/lib/sdoc/templatable.rb:7
  def eval_template(templatefile, context); end

  # Load and render the erb template with the given +template_name+ within
  # current context. Adds all +local_assigns+ to context
  #
  # source://sdoc-2.4.0/lib/sdoc/templatable.rb:29
  def include_template(template_name, local_assigns = T.unsafe(nil)); end

  # Load and render the erb template in the given +templatefile+ within the
  # specified +context+ (a Binding object) and write it out to +outfile+.
  # Both +templatefile+ and +outfile+ should be Pathname-like objects.
  #
  # source://sdoc-2.4.0/lib/sdoc/templatable.rb:38
  def render_template(templatefile, context, outfile); end
end

# source://sdoc-2.4.0/lib/sdoc/version.rb:2
SDoc::VERSION = T.let(T.unsafe(nil), String)
